{
  "version": 3,
  "sources": ["../../../server/private-messages/database.ts"],
  "sourcesContent": ["/**\r\n * Storage handling for offline PMs.\r\n * By Mia.\r\n * @author mia-pi-git\r\n */\r\nimport { type SQL, FS } from '../../lib';\r\nimport { MAX_PENDING } from '.';\r\n\r\nexport const statements = {\r\n\tsend: 'INSERT INTO offline_pms (sender, receiver, message, time) VALUES (?, ?, ?, ?)',\r\n\tclear: 'DELETE FROM offline_pms WHERE receiver = ?',\r\n\tfetch: 'SELECT * FROM offline_pms WHERE receiver = ?',\r\n\tfetchNew: 'SELECT * FROM offline_pms WHERE receiver = ? AND seen IS NULL',\r\n\tclearDated: 'DELETE FROM offline_pms WHERE ? - time >= ?',\r\n\tcheckSentCount: 'SELECT count(*) as count FROM offline_pms WHERE sender = ? AND receiver = ?',\r\n\tsetSeen: 'UPDATE offline_pms SET seen = ? WHERE receiver = ? AND seen IS NULL',\r\n\tclearSeen: 'DELETE FROM offline_pms WHERE ? - seen >= ?',\r\n\tgetSettings: 'SELECT * FROM pm_settings WHERE userid = ?',\r\n\tsetBlock: 'REPLACE INTO pm_settings (userid, view_only) VALUES (?, ?)',\r\n\tdeleteSettings: 'DELETE FROM pm_settings WHERE userid = ?',\r\n} as const;\r\n\r\ntype Statement = keyof typeof statements;\r\n\r\nclass StatementMap {\r\n\tenv: SQL.TransactionEnvironment;\r\n\tconstructor(env: SQL.TransactionEnvironment) {\r\n\t\tthis.env = env;\r\n\t}\r\n\trun(name: Statement, args: any[] | AnyObject) {\r\n\t\treturn this.getStatement(name).run(args);\r\n\t}\r\n\tall(name: Statement, args: any[] | AnyObject) {\r\n\t\treturn this.getStatement(name).all(args);\r\n\t}\r\n\tget(name: Statement, args: any[] | AnyObject) {\r\n\t\treturn this.getStatement(name).get(args);\r\n\t}\r\n\tgetStatement(name: Statement) {\r\n\t\tconst source = statements[name];\r\n\t\treturn this.env.statements.get(source)!;\r\n\t}\r\n}\r\n\r\nexport const transactions: {\r\n\t[k: string]: (args: any[], env: SQL.TransactionEnvironment) => any,\r\n} = {\r\n\tsend: (args, env) => {\r\n\t\tconst statementList = new StatementMap(env);\r\n\t\tconst [sender, receiver, message] = args;\r\n\t\tconst count = statementList.get('checkSentCount', [sender, receiver])?.count;\r\n\t\tif (count && count > MAX_PENDING) {\r\n\t\t\treturn { error: `You have already sent the maximum ${MAX_PENDING} offline PMs to that user.` };\r\n\t\t}\r\n\t\treturn statementList.run('send', [sender, receiver, message, Date.now()]);\r\n\t},\r\n\tlistNew: (args, env) => {\r\n\t\tconst list = new StatementMap(env);\r\n\t\tconst [receiver] = args;\r\n\t\tconst pms = list.all('fetchNew', [receiver]);\r\n\t\tlist.run('setSeen', [Date.now(), receiver]);\r\n\t\treturn pms;\r\n\t},\r\n};\r\n\r\nexport function onDatabaseStart(database: import('better-sqlite3').Database) {\r\n\tlet version;\r\n\ttry {\r\n\t\tversion = database.prepare('SELECT * FROM db_info').get().version;\r\n\t} catch {\r\n\t\tconst schemaContent = FS('databases/schemas/pms.sql').readSync();\r\n\t\tdatabase.exec(schemaContent);\r\n\t}\r\n\tconst migrations = FS('databases/migrations/pms').readdirIfExistsSync();\r\n\tif (version !== migrations.length) {\r\n\t\tfor (const migration of migrations) {\r\n\t\t\tconst num = /(\\d+)\\.sql$/.exec(migration)?.[1];\r\n\t\t\tif (!num || version >= num) continue;\r\n\t\t\tdatabase.exec('BEGIN TRANSACTION');\r\n\t\t\ttry {\r\n\t\t\t\tdatabase.exec(FS(`databases/migrations/pms/${migration}`).readSync());\r\n\t\t\t} catch (e: any) {\r\n\t\t\t\tconsole.log(`Error in PM migration ${migration} - ${e.message}`);\r\n\t\t\t\tconsole.log(e.stack);\r\n\t\t\t\tdatabase.exec('ROLLBACK');\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tdatabase.exec('COMMIT');\r\n\t\t}\r\n\t}\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,iBAA6B;AAC7B,eAA4B;AAErB,MAAM,aAAa;AAAA,EACzB,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,SAAS;AAAA,EACT,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,gBAAgB;AACjB;AAIA,MAAM,aAAa;AAAA,EAElB,YAAY,KAAiC;AAC5C,SAAK,MAAM;AAAA,EACZ;AAAA,EACA,IAAI,MAAiB,MAAyB;AAC7C,WAAO,KAAK,aAAa,IAAI,EAAE,IAAI,IAAI;AAAA,EACxC;AAAA,EACA,IAAI,MAAiB,MAAyB;AAC7C,WAAO,KAAK,aAAa,IAAI,EAAE,IAAI,IAAI;AAAA,EACxC;AAAA,EACA,IAAI,MAAiB,MAAyB;AAC7C,WAAO,KAAK,aAAa,IAAI,EAAE,IAAI,IAAI;AAAA,EACxC;AAAA,EACA,aAAa,MAAiB;AAC7B,UAAM,SAAS,WAAW,IAAI;AAC9B,WAAO,KAAK,IAAI,WAAW,IAAI,MAAM;AAAA,EACtC;AACD;AAEO,MAAM,eAET;AAAA,EACH,MAAM,CAAC,MAAM,QAAQ;AACpB,UAAM,gBAAgB,IAAI,aAAa,GAAG;AAC1C,UAAM,CAAC,QAAQ,UAAU,OAAO,IAAI;AACpC,UAAM,QAAQ,cAAc,IAAI,kBAAkB,CAAC,QAAQ,QAAQ,CAAC,GAAG;AACvE,QAAI,SAAS,QAAQ,sBAAa;AACjC,aAAO,EAAE,OAAO,qCAAqC,oBAAW,6BAA6B;AAAA,IAC9F;AACA,WAAO,cAAc,IAAI,QAAQ,CAAC,QAAQ,UAAU,SAAS,KAAK,IAAI,CAAC,CAAC;AAAA,EACzE;AAAA,EACA,SAAS,CAAC,MAAM,QAAQ;AACvB,UAAM,OAAO,IAAI,aAAa,GAAG;AACjC,UAAM,CAAC,QAAQ,IAAI;AACnB,UAAM,MAAM,KAAK,IAAI,YAAY,CAAC,QAAQ,CAAC;AAC3C,SAAK,IAAI,WAAW,CAAC,KAAK,IAAI,GAAG,QAAQ,CAAC;AAC1C,WAAO;AAAA,EACR;AACD;AAEO,SAAS,gBAAgB,UAA6C;AAC5E,MAAI;AACJ,MAAI;AACH,cAAU,SAAS,QAAQ,uBAAuB,EAAE,IAAI,EAAE;AAAA,EAC3D,QAAQ;AACP,UAAM,oBAAgB,eAAG,2BAA2B,EAAE,SAAS;AAC/D,aAAS,KAAK,aAAa;AAAA,EAC5B;AACA,QAAM,iBAAa,eAAG,0BAA0B,EAAE,oBAAoB;AACtE,MAAI,YAAY,WAAW,QAAQ;AAClC,eAAW,aAAa,YAAY;AACnC,YAAM,MAAM,cAAc,KAAK,SAAS,IAAI,CAAC;AAC7C,UAAI,CAAC,OAAO,WAAW,IAAK;AAC5B,eAAS,KAAK,mBAAmB;AACjC,UAAI;AACH,iBAAS,SAAK,eAAG,4BAA4B,SAAS,EAAE,EAAE,SAAS,CAAC;AAAA,MACrE,SAAS,GAAQ;AAChB,gBAAQ,IAAI,yBAAyB,SAAS,MAAM,EAAE,OAAO,EAAE;AAC/D,gBAAQ,IAAI,EAAE,KAAK;AACnB,iBAAS,KAAK,UAAU;AACxB;AAAA,MACD;AACA,eAAS,KAAK,QAAQ;AAAA,IACvB;AAAA,EACD;AACD;",
  "names": []
}
