{
  "version": 3,
  "sources": ["../../../server/chat-plugins/cg-teams-leveling.ts"],
  "sourcesContent": ["/**\r\n * Not a chat plugin.\r\n *\r\n * Handles updating the level database for [Gen 9] Computer-Generated Teams.\r\n */\r\n\r\nimport { SQL, Utils } from \"../../lib\";\r\nimport { getSpeciesName } from \"./randombattles/winrates\";\r\nimport { cgtDatabase } from \"../../data/cg-teams\";\r\n\r\nexport let addPokemon: SQL.Statement | null = null;\r\nexport let incrementWins: SQL.Statement | null = null;\r\nexport let incrementLosses: SQL.Statement | null = null;\r\nexport let dbSetupPromise: Promise<void> | null = null;\r\n\r\nasync function setupDatabase(database: SQL.DatabaseManager) {\r\n\tawait database.runFile('./databases/schemas/battlestats.sql');\r\n\taddPokemon = await database.prepare(\r\n\t\t'INSERT OR IGNORE INTO gen9computergeneratedteams (species_id, wins, losses, level) VALUES (?, 0, 0, ?)'\r\n\t);\r\n\tincrementWins = await database.prepare(\r\n\t\t'UPDATE gen9computergeneratedteams SET wins = wins + 1 WHERE species_id = ?'\r\n\t);\r\n\tincrementLosses = await database.prepare(\r\n\t\t'UPDATE gen9computergeneratedteams SET losses = losses + 1 WHERE species_id = ?'\r\n\t);\r\n}\r\n\r\nif (Config.usesqlite && Config.usesqliteleveling) {\r\n\tconst database = SQL(module, {\r\n\t\tfile: './databases/battlestats.db',\r\n\t});\r\n\tdbSetupPromise = setupDatabase(database);\r\n}\r\n\r\nfunction getLevelSpeciesID(set: PokemonSet, format?: Format) {\r\n\tif (['Basculin', 'Greninja'].includes(set.name)) return toID(set.species);\r\n\treturn toID(getSpeciesName(set, format || Dex.formats.get('gen9computergeneratedteams')));\r\n}\r\n\r\nasync function updateStats(battle: RoomBattle, winner: ID) {\r\n\tif (!incrementWins || !incrementLosses) await dbSetupPromise;\r\n\tif (toID(battle.format) !== 'gen9computergeneratedteams') return;\r\n\t// if the game is rated or part of a tournament hosted by a public room, it counts\r\n\tif (battle.rated <= 1 && battle.room.parent?.game) {\r\n\t\tlet parent = battle.room.parent;\r\n\t\tif (parent.game!.gameid === 'bestof' && parent.parent?.game) parent = parent.parent;\r\n\t\tif (parent.game!.gameid !== 'tournament' || parent.settings.isPrivate) return;\r\n\t} else if (battle.rated < 1000) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor (const player of battle.players) {\r\n\t\tconst team = await battle.getPlayerTeam(player);\r\n\t\tif (!team) return;\r\n\t\tconst increment = (player.id === winner ? incrementWins : incrementLosses);\r\n\r\n\t\tfor (const set of team) {\r\n\t\t\tconst statsSpecies = getLevelSpeciesID(set, Dex.formats.get(battle.format));\r\n\t\t\tawait addPokemon?.run([statsSpecies, set.level || 100]);\r\n\t\t\tawait increment?.run([statsSpecies]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const handlers: Chat.Handlers = {\r\n\tonBattleEnd(battle, winner) {\r\n\t\tif (!Config.usesqlite || !Config.usesqliteleveling) return;\r\n\t\tvoid updateStats(battle, winner);\r\n\t},\r\n};\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tcgtwr: 'cgtwinrates',\r\n\tcgtwinrates(target, room, user) {\r\n\t\treturn this.parse(`/j view-cgtwinrates-${target ? 'history--' + target : 'current'}`);\r\n\t},\r\n\tcgtwinrateshelp: [\r\n\t\t'/cgtwinrates OR /cgtwr - Get a list of the current win rate data for all Pokemon in [Gen 9] Computer Generated Teams.',\r\n\t],\r\n\r\n\t// Add maintenance commands here\r\n};\r\n\r\ninterface MonCurrent { species_id: ID; wins: number; losses: number; level: number }\r\ninterface MonHistory { level: number; species_id: ID; timestamp: number }\r\n\r\nexport const pages: Chat.PageTable = {\r\n\tasync cgtwinrates(query, user) {\r\n\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\r\n\t\tif (!cgtDatabase) {\r\n\t\t\tthrow new Chat.ErrorMessage(`CGT win rates are not being tracked due to the server's SQL settings.`);\r\n\t\t}\r\n\t\tquery = query.join('-').split('--');\r\n\t\tconst mode = query.shift();\r\n\t\tif (mode === 'current') {\r\n\t\t\tlet buf = `<div class=\"pad\"><h2>Winrates for [Gen 9] Computer Generated Teams</h2>`;\r\n\t\t\tconst sorter = toID(query.shift() || 'alphabetical');\r\n\t\t\tif (!['alphabetical', 'level'].includes(sorter)) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid sorting method. Must be either 'alphabetical' or 'level'.`);\r\n\t\t\t}\r\n\t\t\tconst otherSort = sorter === 'alphabetical' ? 'Level' : 'Alphabetical';\r\n\t\t\tbuf += `<a class=\"button\" target=\"replace\" href=\"/view-cgtwinrates-current--${toID(otherSort)}\">`;\r\n\t\t\tbuf += `Sort by ${otherSort} descending</a>`;\r\n\t\t\tbuf += `<hr />`;\r\n\t\t\tconst statData: MonCurrent[] = await cgtDatabase.all(\r\n\t\t\t\t'SELECT species_id, wins, losses, level FROM gen9computergeneratedteams'\r\n\t\t\t);\r\n\t\t\tthis.title = `[Winrates] [Gen 9] Computer Generated Teams`;\r\n\t\t\tlet sortFn: (val: MonCurrent) => Utils.Comparable;\r\n\r\n\t\t\tif (sorter === 'alphabetical') {\r\n\t\t\t\tsortFn = data => [data.species_id];\r\n\t\t\t} else {\r\n\t\t\t\tsortFn = data => [-data.level];\r\n\t\t\t}\r\n\t\t\tconst mons = Utils.sortBy(statData, sortFn);\r\n\t\t\tbuf += `<div class=\"ladder pad\"><table><tr><th>Pokemon</th><th>Level</th><th>Wins</th><th>Losses</th>`;\r\n\t\t\tfor (const mon of mons) {\r\n\t\t\t\tbuf += `<tr><td>${Dex.species.get(mon.species_id).name}</td>`;\r\n\t\t\t\tbuf += `<td>${mon.level}</td><td>${mon.wins}</td><td>${mon.losses}</td></tr>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</table></div></div>`;\r\n\t\t\treturn buf;\r\n\t\t} else if (mode === 'history') {\r\n\t\t\t// Restricted because this is a potentially very slow command\r\n\t\t\tthis.checkCan('modlog', null, Rooms.get('development')!); // stinky non-null assertion\r\n\r\n\t\t\tlet speciesID = query.shift();\r\n\t\t\tlet buf;\r\n\t\t\tif (speciesID) {\r\n\t\t\t\tspeciesID = getLevelSpeciesID({ species: speciesID || '' } as PokemonSet);\r\n\t\t\t\tconst species = Dex.species.get(speciesID);\r\n\t\t\t\tif (!species.exists ||\r\n\t\t\t\t\tspecies.isNonstandard || species.isNonstandard === 'Unobtainable' ||\r\n\t\t\t\t\tspecies.nfe ||\r\n\t\t\t\t\tspecies.battleOnly && (!species.requiredItems?.length || species.name.endsWith('-Tera'))\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.errorReply('Species has no data in [Gen 9] Computer Generated Teams');\r\n\t\t\t\t}\r\n\t\t\t\tbuf = `<div class=\"pad\"><h2>Level history for ${species.name} in [Gen 9] CGT</h2>`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf = `<div class=\"pad\"><h2>Level history for [Gen 9] Computer Generated Teams</h2>`;\r\n\t\t\t}\r\n\t\t\tconst history: MonHistory[] = await cgtDatabase.all(\r\n\t\t\t\t'SELECT level, species_id, timestamp FROM gen9_historical_levels'\r\n\t\t\t);\r\n\t\t\tthis.title = `[History] [Gen 9] Computer Generated Teams`;\r\n\r\n\t\t\tconst MAX_LINES = 100;\r\n\t\t\tbuf += `<div class=\"ladder pad\"><table><tr><th>Pokemon</th><th>Level</th><th>Timestamp</th>`;\r\n\t\t\tfor (let i = history.length - 1; history.length - i <= MAX_LINES; i--) {\r\n\t\t\t\tconst entry = history[i];\r\n\t\t\t\tif (speciesID && entry.species_id !== speciesID) continue;\r\n\t\t\t\tbuf += `<tr><td>${entry.species_id}</td><td>${entry.level}</td>`;\r\n\t\t\t\tconst timestamp = new Date(entry.timestamp);\r\n\t\t\t\tbuf += `<td>${timestamp.toLocaleDateString()}, ${timestamp.toLocaleTimeString()}</td></tr>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</table></div></div>`;\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
