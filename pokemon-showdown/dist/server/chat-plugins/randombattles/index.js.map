{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/randombattles/index.ts"],
  "sourcesContent": ["/**\r\n * Random Battles chat-plugin\r\n * Written by dhelmise with inspiration from sirDonovan and The Immortal\r\n *\r\n * Set probability code written by Annika\r\n */\r\n\r\nimport { FS, Utils } from '../../../lib';\r\n\r\ninterface SetCriteria {\r\n\tmoves: { mustHave: Move[], mustNotHave: Move[] };\r\n\tability: { mustHave?: Ability, mustNotHave: Ability[] };\r\n\titem: { mustHave?: Item, mustNotHave: Item[] };\r\n\tnature: { mustHave?: Nature, mustNotHave: Nature[] };\r\n\tteraType: { mustHave?: TypeInfo, mustNotHave: TypeInfo[] };\r\n}\r\n\r\nfunction getHTMLCriteriaDescription(criteria: SetCriteria) {\r\n\tconst format = (list: { name: string }[]) => list.map(m => Utils.html`<strong>${m.name}</strong>`);\r\n\tconst parts = [];\r\n\r\n\tconst { moves, ability, item, nature, teraType } = criteria;\r\n\r\n\tif (moves.mustHave.length) {\r\n\t\tparts.push(`had the move${Chat.plural(moves.mustHave)} ${Chat.toListString(format(moves.mustHave))}`);\r\n\t}\r\n\tif (moves.mustNotHave.length) {\r\n\t\tparts.push(`did not have the move${Chat.plural(moves.mustNotHave)} ${Chat.toListString(format(moves.mustNotHave), 'or')}`);\r\n\t}\r\n\r\n\tif (ability.mustHave) {\r\n\t\tparts.push(Utils.html`had the ability <strong>${ability.mustHave.name}</strong>`);\r\n\t}\r\n\tif (ability.mustNotHave.length) {\r\n\t\tparts.push(`did not have the ${Chat.plural(ability.mustNotHave, 'abilities', 'ability')} ${Chat.toListString(format(ability.mustNotHave), 'or')}`);\r\n\t}\r\n\r\n\tif (item.mustHave) {\r\n\t\tparts.push(Utils.html`had the item <strong>${item.mustHave.name}</strong>`);\r\n\t}\r\n\tif (item.mustNotHave.length) {\r\n\t\tparts.push(`did not have the item${Chat.plural(item.mustNotHave)} ${Chat.toListString(format(item.mustNotHave), 'or')}`);\r\n\t}\r\n\r\n\tif (nature.mustHave) {\r\n\t\tparts.push(Utils.html`had the nature <strong>${nature.mustHave.name}</strong>`);\r\n\t}\r\n\tif (nature.mustNotHave.length) {\r\n\t\tparts.push(`did not have the nature${Chat.plural(nature.mustNotHave)} ${Chat.toListString(format(nature.mustNotHave), 'or')}`);\r\n\t}\r\n\r\n\tif (teraType.mustHave) {\r\n\t\tparts.push(Utils.html`had the Tera Type <strong>${teraType.mustHave.name}</strong>`);\r\n\t}\r\n\tif (teraType.mustNotHave.length) {\r\n\t\tparts.push(`did not have the Tera Type${Chat.plural(teraType.mustNotHave)} ${Chat.toListString(format(teraType.mustNotHave), 'or')}`);\r\n\t}\r\n\r\n\treturn Chat.toListString(parts, 'and');\r\n}\r\n\r\nfunction setProbability(\r\n\tspecies: Species,\r\n\tformat: Format,\r\n\tcriteria: SetCriteria,\r\n\trounds = 700\r\n): { rounds: number, matches: number } {\r\n\tconst results = { rounds, matches: 0 };\r\n\tconst generator = Teams.getGenerator(format);\r\n\r\n\tfor (let i = 0; i < rounds; i++) {\r\n\t\tconst set = generator.randomSet(\r\n\t\t\tspecies,\r\n\t\t\t{},\r\n\t\t\tfalse,\r\n\t\t\tformat.gameType !== 'singles',\r\n\t\t\tformat.ruleTable?.has('dynamaxclause')\r\n\t\t);\r\n\r\n\t\tif (criteria.item.mustHave && set.item !== criteria.item.mustHave.name) continue;\r\n\t\tif (criteria.item.mustNotHave.some(item => item.name === set.item)) continue;\r\n\r\n\t\tif (criteria.ability.mustHave && set.ability !== criteria.ability.mustHave.name) continue;\r\n\t\tif (criteria.ability.mustNotHave.some(ability => ability.name === set.ability)) continue;\r\n\r\n\t\tif (criteria.nature.mustHave && set.nature !== criteria.nature.mustHave.name) continue;\r\n\t\tif (criteria.nature.mustNotHave.some(nature => nature.name === set.nature)) continue;\r\n\r\n\t\tif (criteria.teraType.mustHave && set.teraType !== criteria.teraType.mustHave.name) continue;\r\n\t\tif (criteria.teraType.mustNotHave.some(type => type.name === set.teraType)) continue;\r\n\r\n\t\tconst setHasMove = (move: Move) => {\r\n\t\t\tconst id = move.id === 'hiddenpower' ? `${move.id}${toID(move.type)}` : move.id;\r\n\t\t\treturn set.moves.includes(id);\r\n\t\t};\r\n\t\tif (!criteria.moves.mustHave.every(setHasMove)) continue;\r\n\t\tif (criteria.moves.mustNotHave.some(setHasMove)) continue;\r\n\r\n\t\tresults.matches++;\r\n\t}\r\n\r\n\treturn results;\r\n}\r\n\r\nconst GEN_NAMES: { [k: string]: string } = {\r\n\tgen1: '[Gen 1]', gen2: '[Gen 2]', gen3: '[Gen 3]', gen4: '[Gen 4]', gen5: '[Gen 5]', gen6: '[Gen 6]', gen7: '[Gen 7]',\r\n\tgen8: '[Gen 8]', gen9: '[Gen 9]',\r\n};\r\n\r\nexport const STAT_NAMES: { [k: string]: string } = {\r\n\thp: \"HP\", atk: \"Atk\", def: \"Def\", spa: \"SpA\", spd: \"SpD\", spe: \"Spe\",\r\n};\r\n\r\nconst TIERS: { [k: string]: string } = {\r\n\tuber: \"Uber\", ubers: \"Uber\",\r\n\tou: \"OU\", uu: \"UU\", ru: \"RU\", nu: \"NU\", pu: \"PU\",\r\n\tmono: \"Mono\", monotype: \"Mono\", lc: \"LC\", littlecup: \"LC\",\r\n};\r\n\r\nfunction formatAbility(ability: Ability | string) {\r\n\tability = Dex.abilities.get(ability);\r\n\treturn `<a href=\"https://${Config.routes.dex}/abilities/${ability.id}\" target=\"_blank\" class=\"subtle\" style=\"white-space:nowrap\">${ability.name}</a>`;\r\n}\r\n\r\nexport function formatNature(n: string) {\r\n\tconst nature = Dex.natures.get(n);\r\n\treturn nature.name;\r\n}\r\n\r\nfunction formatMove(move: Move | string) {\r\n\tmove = Dex.moves.get(move);\r\n\treturn `<a href=\"https://${Config.routes.dex}/moves/${move.id}\" target=\"_blank\" class=\"subtle\" style=\"white-space:nowrap\">${move.name}</a>`;\r\n}\r\n\r\nfunction formatItem(item: Item | string) {\r\n\tif (typeof item === 'string' && item === \"No Item\") {\r\n\t\treturn `No Item`;\r\n\t} else {\r\n\t\titem = Dex.items.get(item);\r\n\t\treturn `<a href=\"https://${Config.routes.dex}/items/${item.id}\" target=\"_blank\" class=\"subtle\" style=\"white-space:nowrap\">${item.name}</a>`;\r\n\t}\r\n}\r\n\r\nfunction formatType(type: TypeInfo | string) {\r\n\ttype = Dex.types.get(type);\r\n\treturn type.name;\r\n}\r\n\r\n/**\r\n * Gets the sets for a Pokemon for a format that uses the new schema.\r\n * Old formats will use getData()\r\n */\r\nfunction getSets(species: string | Species, format: string | Format = 'gen9randombattle'): {\r\n\tlevel: number,\r\n\tsets: any[],\r\n} | null {\r\n\tconst dex = Dex.forFormat(format);\r\n\tformat = Dex.formats.get(format);\r\n\tspecies = dex.species.get(species);\r\n\tconst isDoubles = format.gameType === 'doubles';\r\n\tlet folderName = format.mod;\r\n\tif (format.team === 'randomBaby') folderName += 'baby';\r\n\tif (species.isNonstandard === 'CAP') folderName += 'cap';\r\n\tconst setsFile = JSON.parse(\r\n\t\tFS(`data/random-battles/${folderName}/${isDoubles ? 'doubles-' : ''}sets.json`)\r\n\t\t\t.readIfExistsSync() || '{}'\r\n\t);\r\n\tconst data = setsFile[species.id];\r\n\tif (!data?.sets?.length) return null;\r\n\treturn data;\r\n}\r\n\r\n/**\r\n * Gets the random battles data for a Pokemon for formats with the old schema.\r\n */\r\nfunction getData(species: string | Species, format: string | Format): AnyObject | null {\r\n\tconst dex = Dex.forFormat(format);\r\n\tformat = Dex.formats.get(format);\r\n\tspecies = dex.species.get(species);\r\n\tconst dataFile = JSON.parse(\r\n\t\tFS(`data/random-battles/${format.mod}/data.json`).readIfExistsSync() || '{}'\r\n\t);\r\n\tconst data = dataFile[species.id];\r\n\tif (!data) return null;\r\n\treturn data;\r\n}\r\n\r\n/**\r\n * Gets the default level for a Pokemon in the given format.\r\n * Returns 0 if the format doesn't use default levels or it can't be determined.\r\n */\r\nfunction getLevel(species: string | Species, format: string | Format): number {\r\n\tconst dex = Dex.forFormat(format);\r\n\tformat = Dex.formats.get(format);\r\n\tspecies = dex.species.get(species);\r\n\tswitch (format.id) {\r\n\t// Only formats where levels are not all manually assigned should be copied here\r\n\tcase 'gen2randombattle':\r\n\t\tconst levelScale: { [k: string]: number } = {\r\n\t\t\tZU: 81,\r\n\t\t\tZUBL: 79,\r\n\t\t\tPU: 77,\r\n\t\t\tPUBL: 75,\r\n\t\t\tNU: 73,\r\n\t\t\tNUBL: 71,\r\n\t\t\tUU: 69,\r\n\t\t\tUUBL: 67,\r\n\t\t\tOU: 65,\r\n\t\t\tUber: 61,\r\n\t\t};\r\n\t\treturn levelScale[species.tier] || 80;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nfunction getRBYMoves(species: string | Species) {\r\n\tspecies = Dex.mod(`gen1`).species.get(species);\r\n\tconst data = getData(species, 'gen1randombattle');\r\n\tif (!data) return false;\r\n\tlet buf = `<br/><b>Level</b>: ${data.level}`;\r\n\tif (data.comboMoves) {\r\n\t\tbuf += `<br/><b>Combo moves</b>: `;\r\n\t\tbuf += data.comboMoves.map(formatMove).sort().join(\", \");\r\n\t}\r\n\tif (data.exclusiveMoves) {\r\n\t\tbuf += `<br/><b>Exclusive moves</b>: `;\r\n\t\tbuf += data.exclusiveMoves.map(formatMove).sort().join(\", \");\r\n\t}\r\n\tif (data.essentialMoves) {\r\n\t\tbuf += `<br/><b>Essential move${Chat.plural(data.essentialMoves)}</b>: `;\r\n\t\tbuf += data.essentialMoves.map(formatMove).sort().join(\", \");\r\n\t}\r\n\tif (data.moves) {\r\n\t\tbuf += `<br/><b>Randomized moves</b>: `;\r\n\t\tbuf += data.moves.map(formatMove).sort().join(\", \");\r\n\t}\r\n\tif (\r\n\t\t!data.moves && !data.comboMoves &&\r\n\t\t!data.exclusiveMoves && !data.essentialMove\r\n\t) {\r\n\t\treturn false;\r\n\t}\r\n\treturn buf;\r\n}\r\n\r\nfunction getLetsGoMoves(species: string | Species) {\r\n\tspecies = Dex.species.get(species);\r\n\tconst data = getData(species, 'gen7letsgorandombattle');\r\n\tif (!data) return false;\r\n\tconst isLetsGoLegal = (\r\n\t\t(species.num <= 151 || ['Meltan', 'Melmetal'].includes(species.name)) &&\r\n\t\t(!species.forme || ['Alola', 'Mega', 'Mega-X', 'Mega-Y', 'Starter'].includes(species.forme))\r\n\t);\r\n\tif (!isLetsGoLegal) return false;\r\n\tif (!data.moves?.length) return false;\r\n\treturn data.moves.map(formatMove).sort().join(`, `);\r\n}\r\n\r\nfunction battleFactorySets(species: string | Species, tier: string | null, gen = 'gen9', isBSS = false) {\r\n\tspecies = Dex.species.get(species);\r\n\tif (typeof species.battleOnly === 'string') {\r\n\t\tspecies = Dex.species.get(species.battleOnly);\r\n\t}\r\n\tgen = toID(gen);\r\n\tconst genNum = parseInt(gen[3]);\r\n\tif (isNaN(genNum) || genNum < 6 || (isBSS && genNum < 7)) return null;\r\n\tconst statsFile = JSON.parse(\r\n\t\tFS(`data/random-battles/gen${genNum}/${isBSS ? `bss-` : ``}factory-sets.json`).readIfExistsSync() ||\r\n\t\t\"{}\"\r\n\t);\r\n\tif (!Object.keys(statsFile).length) return null;\r\n\tlet buf = ``;\r\n\tif (!isBSS) {\r\n\t\tif (!tier) throw new Chat.ErrorMessage(`Please provide a valid tier.`);\r\n\t\tif (!(toID(tier) in TIERS)) throw new Chat.ErrorMessage(`That tier isn't supported.`);\r\n\t\tif (!(TIERS[toID(tier)] in statsFile)) {\r\n\t\t\tthrow new Chat.ErrorMessage(`${TIERS[toID(tier)]} is not included in [Gen ${genNum}] Battle Factory.`);\r\n\t\t}\r\n\t\tconst t = statsFile[TIERS[toID(tier)]];\r\n\t\tif (!(species.id in t)) {\r\n\t\t\tconst formatName = Dex.formats.get(`${gen}battlefactory`).name;\r\n\t\t\tthrow new Chat.ErrorMessage(`${species.name} doesn't have any sets in ${TIERS[toID(tier)]} for ${formatName}.`);\r\n\t\t}\r\n\t\tconst setObj = t[species.id];\r\n\t\tif (genNum >= 9) {\r\n\t\t\tbuf += `Species rarity: ${setObj.weight} (higher is more common, max 10)<br />`;\r\n\t\t}\r\n\t\tbuf += `<span class=\"gray\">Sets for ${species.name} in${genNum === 8 ? `` : ` ${GEN_NAMES[gen]}`} ${TIERS[toID(tier)]}:</span><br />`;\r\n\t\tfor (const [i, set] of setObj.sets.entries()) {\r\n\t\t\tif (genNum >= 9) {\r\n\t\t\t\tbuf += `<details class=\"details\"><summary>Set ${i + 1} (${set.weight}%)</summary>`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += `<details class=\"details\"><summary>Set ${i + 1}</summary>`;\r\n\t\t\t}\r\n\t\t\tbuf += `<ul style=\"list-style-type:none;\">`;\r\n\t\t\tbuf += `<li>${set.species}${set.gender ? ` (${set.gender})` : ``} @ ${Array.isArray(set.item) ? set.item.map(formatItem).join(\" / \") : formatItem(set.item)}</li>`;\r\n\t\t\tbuf += `<li>Ability: ${Array.isArray(set.ability) ? set.ability.map(formatAbility).join(\" / \") : formatAbility(set.ability)}</li>`;\r\n\t\t\tif (TIERS[toID(tier)] === \"LC\" && !set.level) buf += `<li>Level: 5</li>`;\r\n\t\t\tif (set.level && set.level < 100) buf += `<li>Level: ${set.level}</li>`;\r\n\t\t\tif (set.shiny) buf += `<li>Shiny: Yes</li>`;\r\n\t\t\tif (set.happiness) buf += `<li>Happiness: ${set.happiness}</li>`;\r\n\t\t\tif (genNum === 9 && set.teraType) {\r\n\t\t\t\tbuf += `<li>Tera Type: ${set.teraType.map(formatType).join(' / ')}</li>`;\r\n\t\t\t}\r\n\t\t\tif (set.evs) {\r\n\t\t\t\tbuf += `<li>EVs: `;\r\n\t\t\t\tconst evs: string[] = [];\r\n\t\t\t\tlet ev: string;\r\n\t\t\t\tfor (ev in set.evs) {\r\n\t\t\t\t\tif (set.evs[ev] === 0) continue;\r\n\t\t\t\t\tevs.push(`${set.evs[ev]} ${STAT_NAMES[ev]}`);\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `${evs.join(\" / \")}</li>`;\r\n\t\t\t}\r\n\t\t\tbuf += `<li>${Array.isArray(set.nature) ? set.nature.map(formatNature).join(\" / \") : formatNature(set.nature)} Nature</li>`;\r\n\t\t\tif (set.ivs) {\r\n\t\t\t\tbuf += `<li>IVs: `;\r\n\t\t\t\tconst ivs: string[] = [];\r\n\t\t\t\tlet iv: string;\r\n\t\t\t\tfor (iv in set.ivs) {\r\n\t\t\t\t\tif (set.ivs[iv] === 31) continue;\r\n\t\t\t\t\tivs.push(`${set.ivs[iv]} ${STAT_NAMES[iv]}`);\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `${ivs.join(\" / \")}</li>`;\r\n\t\t\t}\r\n\t\t\tfor (const moveid of set.moves) {\r\n\t\t\t\tbuf += `<li>- ${Array.isArray(moveid) ? moveid.map(formatMove).join(\" / \") : formatMove(moveid)}</li>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</ul></details>`;\r\n\t\t}\r\n\t} else {\r\n\t\tconst format = Dex.formats.get(`${gen}bssfactory`);\r\n\t\tif (!(species.id in statsFile)) throw new Chat.ErrorMessage(`${species.name} doesn't have any sets in ${format.name}.`);\r\n\t\tconst setObj = statsFile[species.id];\r\n\t\tif (genNum >= 9) {\r\n\t\t\tbuf += `Species rarity: ${setObj.weight} (higher is more common, max 10)<br />`;\r\n\t\t\tbuf += `Sets for ${species.name} in ${format.name}:<br />`;\r\n\t\t\tfor (const [i, set] of setObj.sets.entries()) {\r\n\t\t\t\tbuf += `<details class=\"details\"><summary>Set ${i + 1} (${set.weight}%)</summary>`;\r\n\t\t\t\tbuf += `<ul style=\"list-style-type:none;padding-left:0;\">`;\r\n\t\t\t\tbuf += `<li>${Dex.forFormat(format).species.get(set.species).name} @ ${set.item.map(formatItem).join(\" / \")}</li>`;\r\n\t\t\t\tbuf += `<li>Ability: ${set.ability.map(formatAbility).join(\" / \")}</li>`;\r\n\t\t\t\tbuf += `<li>Level: 50</li>`;\r\n\t\t\t\tbuf += `<li>Tera Type: ${set.teraType.map(formatType).join(' / ')}</li>`;\r\n\t\t\t\tif (set.evs) {\r\n\t\t\t\t\tbuf += `<li>EVs: `;\r\n\t\t\t\t\tconst evs: string[] = [];\r\n\t\t\t\t\tlet ev: string;\r\n\t\t\t\t\tfor (ev in set.evs) {\r\n\t\t\t\t\t\tif (!set.evs[ev]) continue;\r\n\t\t\t\t\t\tevs.push(`${set.evs[ev]} ${STAT_NAMES[ev]}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuf += `${evs.join(\" / \")}</li>`;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `<li>${formatNature(set.nature)} Nature</li>`;\r\n\t\t\t\tif (set.ivs) {\r\n\t\t\t\t\tbuf += `<li>IVs: `;\r\n\t\t\t\t\tconst ivs: string[] = [];\r\n\t\t\t\t\tlet iv: string;\r\n\t\t\t\t\tfor (iv in set.ivs) {\r\n\t\t\t\t\t\tif (set.ivs[iv] === 31) continue;\r\n\t\t\t\t\t\tivs.push(`${set.ivs[iv]} ${STAT_NAMES[iv]}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuf += `${ivs.join(\" / \")}</li>`;\r\n\t\t\t\t}\r\n\t\t\t\tfor (const moveSlot of set.moves) {\r\n\t\t\t\t\tbuf += `<li>- ${moveSlot.map(formatMove).join(' / ')}</li>`;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `</ul></details>`;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tbuf += `<span class=\"gray\">Sets for ${species.name} in ${format.name}:</span><br />`;\r\n\t\t\tfor (const [i, set] of setObj.sets.entries()) {\r\n\t\t\t\tbuf += `<details class=\"details\"><summary>Set ${i + 1}</summary>`;\r\n\t\t\t\tbuf += `<ul style=\"list-style-type:none;padding-left:0;\">`;\r\n\t\t\t\tbuf += `<li>${set.species}${set.gender ? ` (${set.gender})` : ``} @ ${Array.isArray(set.item) ? set.item.map(formatItem).join(\" / \") : formatItem(set.item)}</li>`;\r\n\t\t\t\tbuf += `<li>Ability: ${Array.isArray(set.ability) ? set.ability.map(formatAbility).join(\" / \") : formatAbility(set.ability)}</li>`;\r\n\t\t\t\tif (!set.level) buf += `<li>Level: 50</li>`;\r\n\t\t\t\tif (set.level && set.level < 50) buf += `<li>Level: ${set.level}</li>`;\r\n\t\t\t\tif (set.shiny) buf += `<li>Shiny: Yes</li>`;\r\n\t\t\t\tif (set.happiness) buf += `<li>Happiness: ${set.happiness}</li>`;\r\n\t\t\t\tif (set.evs) {\r\n\t\t\t\t\tbuf += `<li>EVs: `;\r\n\t\t\t\t\tconst evs: string[] = [];\r\n\t\t\t\t\tlet ev: string;\r\n\t\t\t\t\tfor (ev in set.evs) {\r\n\t\t\t\t\t\tif (set.evs[ev] === 0) continue;\r\n\t\t\t\t\t\tevs.push(`${set.evs[ev]} ${STAT_NAMES[ev]}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuf += `${evs.join(\" / \")}</li>`;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `<li>${Array.isArray(set.nature) ? set.nature.map(formatNature).join(\" / \") : formatNature(set.nature)} Nature</li>`;\r\n\t\t\t\tif (set.ivs) {\r\n\t\t\t\t\tbuf += `<li>IVs: `;\r\n\t\t\t\t\tconst ivs: string[] = [];\r\n\t\t\t\t\tlet iv: string;\r\n\t\t\t\t\tfor (iv in set.ivs) {\r\n\t\t\t\t\t\tif (set.ivs[iv] === 31) continue;\r\n\t\t\t\t\t\tivs.push(`${set.ivs[iv]} ${STAT_NAMES[iv]}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbuf += `${ivs.join(\" / \")}</li>`;\r\n\t\t\t\t}\r\n\t\t\t\tfor (const moveid of set.moves) {\r\n\t\t\t\t\tbuf += `<li>- ${Array.isArray(moveid) ? moveid.map(formatMove).join(\" / \") : formatMove(moveid)}</li>`;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `</ul></details>`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn buf;\r\n}\r\n\r\nfunction CAP1v1Sets(species: string | Species) {\r\n\tspecies = Dex.species.get(species);\r\n\tconst statsFile = JSON.parse(\r\n\t\tFS(`data/random-battles/gen8/cap-1v1-sets.json`).readIfExistsSync() ||\r\n\t\t\"{}\"\r\n\t);\r\n\tif (!Object.keys(statsFile).length) return null;\r\n\tif (species.isNonstandard !== \"CAP\") {\r\n\t\treturn {\r\n\t\t\te: `[Gen 8] CAP 1v1 only allows Pok\\u00e9mon created by the Create-A-Pok\\u00e9mon Project.`,\r\n\t\t\tparse: `/cap`,\r\n\t\t};\r\n\t}\r\n\tif (species.isNonstandard === \"CAP\" && !(species.name in statsFile)) {\r\n\t\treturn { e: `${species.name} doesn't have any sets in [Gen 8] CAP 1v1.` };\r\n\t}\r\n\tlet buf = `<span class=\"gray\">Sets for ${species.name} in [Gen 8] CAP 1v1:</span><br />`;\r\n\tfor (const [i, set] of statsFile[species.name].entries()) {\r\n\t\tbuf += `<details class=\"details\"><summary>Set ${i + 1}</summary>`;\r\n\t\tbuf += `<ul style=\"list-style-type:none;\">`;\r\n\t\tbuf += `<li>${set.species || species.name}${set.gender ? ` (${set.gender})` : ``} @ ${Array.isArray(set.item) ? set.item.map(formatItem).join(\" / \") : formatItem(set.item)}</li>`;\r\n\t\tbuf += `<li>Ability: ${Array.isArray(set.ability) ? set.ability.map(formatAbility).join(\" / \") : formatAbility(set.ability)}</li>`;\r\n\t\tif (set.level && set.level < 100) buf += `<li>Level: ${set.level}</li>`;\r\n\t\tif (set.shiny) buf += `<li>Shiny: Yes</li>`;\r\n\t\tif (set.happiness) buf += `<li>Happiness: ${set.happiness}</li>`;\r\n\t\tif (set.evs) {\r\n\t\t\tbuf += `<li>EVs: `;\r\n\t\t\tconst evs: string[] = [];\r\n\t\t\tlet ev: string;\r\n\t\t\tfor (ev in set.evs) {\r\n\t\t\t\tif (set.evs[ev] === 0) continue;\r\n\t\t\t\tevs.push(`${set.evs[ev]} ${STAT_NAMES[ev]}`);\r\n\t\t\t}\r\n\t\t\tbuf += `${evs.join(\" / \")}</li>`;\r\n\t\t}\r\n\t\tbuf += `<li>${Array.isArray(set.nature) ? set.nature.map(formatNature).join(\" / \") : formatNature(set.nature)} Nature</li>`;\r\n\t\tif (set.ivs) {\r\n\t\t\tbuf += `<li>IVs: `;\r\n\t\t\tconst ivs: string[] = [];\r\n\t\t\tlet iv: string;\r\n\t\t\tfor (iv in set.ivs) {\r\n\t\t\t\tif (set.ivs[iv] === 31) continue;\r\n\t\t\t\tivs.push(`${set.ivs[iv]} ${STAT_NAMES[iv]}`);\r\n\t\t\t}\r\n\t\t\tbuf += `${ivs.join(\" / \")}</li>`;\r\n\t\t}\r\n\t\tfor (const moveid of set.moves) {\r\n\t\t\tbuf += `<li>- ${Array.isArray(moveid) ? moveid.map(formatMove).join(\" / \") : formatMove(moveid)}</li>`;\r\n\t\t}\r\n\t\tbuf += `</ul></details>`;\r\n\t}\r\n\treturn buf;\r\n}\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\trandbats: 'randombattles',\r\n\trandomdoublesbattle: 'randombattles',\r\n\tranddubs: 'randombattles',\r\n\tbabyrandombattle: 'randombattles',\r\n\tbabyrands: 'randombattles',\r\n\t// randombattlenodmax: 'randombattles',\r\n\t// randsnodmax: 'randombattles',\r\n\trandombattles(target, room, user, connection, cmd) {\r\n\t\tif (!this.runBroadcast()) return;\r\n\t\tconst battle = room?.battle;\r\n\t\tlet isDoubles = cmd === 'randomdoublesbattle' || cmd === 'randdubs';\r\n\t\tlet isBaby = cmd === 'babyrandombattle' || cmd === 'babyrands';\r\n\t\tlet isNoDMax = cmd.includes('nodmax');\r\n\t\tif (battle) {\r\n\t\t\tif (battle.format.includes('nodmax')) isNoDMax = true;\r\n\t\t\tif (battle.format.includes('doubles') || battle.gameType === 'freeforall') isDoubles = true;\r\n\t\t\tif (battle.format.includes('baby')) isBaby = true;\r\n\t\t}\r\n\r\n\t\tconst args = target.split(',');\r\n\t\tif (!args[0]) return this.parse(`/help randombattles`);\r\n\r\n\t\tconst { dex } = this.splitFormat(target, true);\r\n\t\tconst isLetsGo = (dex.currentMod === 'gen7letsgo');\r\n\r\n\t\tconst searchResults = dex.dataSearch(args[0], ['Pokedex']);\r\n\r\n\t\tif (!searchResults?.length) {\r\n\t\t\tthrow new Chat.ErrorMessage(`No Pok\\u00e9mon named '${args[0]}' was found${Dex.gen > dex.gen ? ` in Gen ${dex.gen}` : \"\"}. (Check your spelling?)`);\r\n\t\t}\r\n\r\n\t\tlet inexactMsg = '';\r\n\t\tif (searchResults[0].isInexact) {\r\n\t\t\tinexactMsg = `No Pok\\u00e9mon named '${args[0]}' was found${Dex.gen > dex.gen ? ` in Gen ${dex.gen}` : \"\"}. Searching for '${searchResults[0].name}' instead.`;\r\n\t\t}\r\n\t\tconst species = dex.species.get(searchResults[0].name);\r\n\t\tconst extraFormatModifier = isLetsGo ? 'letsgo' : (dex.currentMod === 'gen8bdsp' ? 'bdsp' : '');\r\n\t\tconst babyModifier = isBaby ? 'baby' : '';\r\n\t\tconst doublesModifier = isDoubles ? 'doubles' : '';\r\n\t\tconst noDMaxModifier = isNoDMax ? 'nodmax' : '';\r\n\t\tconst formatName = `gen${dex.gen}${extraFormatModifier}${babyModifier}random${doublesModifier}battle${noDMaxModifier}`;\r\n\t\tconst format = dex.formats.get(formatName);\r\n\r\n\t\tconst movesets = [];\r\n\t\tlet setCount = 0;\r\n\t\tif (dex.gen === 1) {\r\n\t\t\tconst rbyMoves = getRBYMoves(species);\r\n\t\t\tif (!rbyMoves) {\r\n\t\t\t\tthis.sendReply(inexactMsg);\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Error: ${species.name} has no Random Battle data in ${GEN_NAMES[toID(args[1])]}`);\r\n\t\t\t}\r\n\t\t\tmovesets.push(`<span class=\"gray\">Moves for ${species.name} in ${format.name}:</span>${rbyMoves}`);\r\n\t\t\tsetCount = 1;\r\n\t\t} else if (isLetsGo) {\r\n\t\t\tconst lgpeMoves = getLetsGoMoves(species);\r\n\t\t\tif (!lgpeMoves) {\r\n\t\t\t\tthis.sendReply(inexactMsg);\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Error: ${species.name} has no Random Battle data in [Gen 7 Let's Go]`);\r\n\t\t\t}\r\n\t\t\tmovesets.push(`<span class=\"gray\">Moves for ${species.name} in ${format.name}:</span><br />${lgpeMoves}`);\r\n\t\t\tsetCount = 1;\r\n\t\t} else {\r\n\t\t\tconst setsToCheck = [species];\r\n\t\t\tif (dex.gen >= 8 && !isNoDMax) setsToCheck.push(dex.species.get(`${args[0]}gmax`));\r\n\t\t\tif (species.otherFormes) setsToCheck.push(...species.otherFormes.map(pkmn => dex.species.get(pkmn)));\r\n\t\t\tif ([2, 3, 4, 5, 6, 7, 9].includes(dex.gen)) {\r\n\t\t\t\tfor (const pokemon of setsToCheck) {\r\n\t\t\t\t\tconst data = getSets(pokemon, format.id);\r\n\t\t\t\t\tif (!data) continue;\r\n\t\t\t\t\tconst sets = data.sets;\r\n\t\t\t\t\tconst level = data.level || getLevel(pokemon, format);\r\n\t\t\t\t\tlet buf = `<span class=\"gray\">Moves for ${pokemon.name} in ${format.name}:</span><br/>`;\r\n\t\t\t\t\tbuf += `<b>Level</b>: ${level}`;\r\n\t\t\t\t\tfor (const set of sets) {\r\n\t\t\t\t\t\tbuf += `<details class=\"details\"><summary>${set.role}</summary>`;\r\n\t\t\t\t\t\tif (dex.gen === 9) {\r\n\t\t\t\t\t\t\tbuf += `<b>Tera Type${Chat.plural(set.teraTypes)}</b>: ${set.teraTypes.join(', ')}<br/>`;\r\n\t\t\t\t\t\t} else if (([2, 3, 4, 5, 6, 7].includes(dex.gen)) && set.preferredTypes) {\r\n\t\t\t\t\t\t\tbuf += `<b>Preferred Type${Chat.plural(set.preferredTypes)}</b>: ${set.preferredTypes.join(', ')}<br/>`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbuf += `<b>Moves</b>: ${set.movepool.sort().map(formatMove).join(', ')}<br/>`;\r\n\t\t\t\t\t\tif (set.abilities) {\r\n\t\t\t\t\t\t\tbuf += `<b>Abilit${Chat.plural(set.abilities, 'ies', 'y')}</b>: ${set.abilities.sort().join(', ')}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbuf += '</details>';\r\n\t\t\t\t\t\tsetCount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmovesets.push(buf);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (let pokemon of setsToCheck) {\r\n\t\t\t\t\tlet data = getData(pokemon, format.name);\r\n\t\t\t\t\tif (!data && isNoDMax) {\r\n\t\t\t\t\t\tpokemon = dex.species.get(pokemon.id + 'gmax');\r\n\t\t\t\t\t\tdata = getData(pokemon, format.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!data) continue;\r\n\t\t\t\t\tif (!data.moves || pokemon.isNonstandard === 'Future') continue;\r\n\t\t\t\t\tlet randomMoves = data.moves;\r\n\t\t\t\t\tconst level = data.level || getLevel(pokemon, format);\r\n\t\t\t\t\tif (isDoubles && data.doublesMoves) randomMoves = data.doublesMoves;\r\n\t\t\t\t\tif (isNoDMax && data.noDynamaxMoves) randomMoves = data.noDynamaxMoves;\r\n\t\t\t\t\tconst m = randomMoves.slice().sort().map(formatMove);\r\n\t\t\t\t\tmovesets.push(\r\n\t\t\t\t\t\t`<details class=\"details\">` +\r\n\t\t\t\t\t\t`<summary><span class=\"gray\">Moves for ${pokemon.name} in ${format.name}:</span></summary>` +\r\n\t\t\t\t\t\t(level ? `<b>Level</b>: ${level}<br>` : '') +\r\n\t\t\t\t\t\t`${m.join(`, `)}</details>`\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsetCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!movesets.length) {\r\n\t\t\tthis.sendReply(inexactMsg);\r\n\t\t\tthrow new Chat.ErrorMessage(`Error: ${species.name} has no Random Battle data in ${format.name}`);\r\n\t\t}\r\n\t\tlet buf = movesets.join('<hr/>');\r\n\t\tif (setCount <= 2) {\r\n\t\t\tbuf = buf.replace(/<details>/g, '<details open>');\r\n\t\t}\r\n\t\tthis.sendReply(inexactMsg);\r\n\t\tthis.sendReplyBox(buf);\r\n\t},\r\n\trandombattleshelp: [\r\n\t\t`/randombattles OR /randbats [pokemon], [gen] - Displays a Pok\\u00e9mon's Random Battle Moves. Defaults to Gen 9. If used in a battle, defaults to the gen of that battle.`,\r\n\t\t`/randomdoublesbattle OR /randdubs [pokemon], [gen] - Same as above, but instead displays Random Doubles Battle moves.`,\r\n\t],\r\n\r\n\tbssfactory: 'battlefactory',\r\n\tbattlefactory(target, room, user, connection, cmd) {\r\n\t\tif (!this.runBroadcast()) return;\r\n\t\tconst isBSS = cmd === 'bssfactory';\r\n\t\tif (isBSS) {\r\n\t\t\tconst args = target.split(',');\r\n\t\t\tif (!args[0]) return this.parse(`/help battlefactory`);\r\n\t\t\tconst species = Dex.species.get(args[0]);\r\n\t\t\tif (!species.exists) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Error: Pok\\u00e9mon '${args[0].trim()}' not found.`);\r\n\t\t\t}\r\n\t\t\tlet mod = 'gen9';\r\n\t\t\tif (args[1] && toID(args[1]) in Dex.dexes && Dex.dexes[toID(args[1])].gen >= 7) mod = toID(args[1]);\r\n\t\t\tconst bssSets = battleFactorySets(species, null, mod, true);\r\n\t\t\tif (!bssSets) return this.parse(`/help battlefactory`);\r\n\t\t\treturn this.sendReplyBox(bssSets);\r\n\t\t} else {\r\n\t\t\tconst args = target.split(',');\r\n\t\t\tif (!args[0]) return this.parse(`/help battlefactory`);\r\n\t\t\tconst species = Dex.species.get(args[0]);\r\n\t\t\tif (!species.exists) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Error: Pok\\u00e9mon '${args[0].trim()}' not found.`);\r\n\t\t\t}\r\n\t\t\tlet tier = '';\r\n\t\t\tif (args[1] && toID(args[1]) in TIERS) {\r\n\t\t\t\ttier = TIERS[toID(args[1])];\r\n\t\t\t} else {\r\n\t\t\t\ttier = 'ou';\r\n\t\t\t}\r\n\t\t\tconst mod = args[2] || 'gen9';\r\n\t\t\tlet bfSets;\r\n\t\t\tif (species.name === 'Necrozma-Ultra') {\r\n\t\t\t\tbfSets = battleFactorySets(Dex.species.get('necrozma-dawnwings'), tier, mod);\r\n\t\t\t\tif (bfSets) {\r\n\t\t\t\t\tbfSets += battleFactorySets(Dex.species.get('necrozma-duskmane'), tier, mod)!;\r\n\t\t\t\t}\r\n\t\t\t} else if (species.name === 'Zygarde-Complete') {\r\n\t\t\t\tbfSets = battleFactorySets(Dex.species.get('zygarde'), tier, mod);\r\n\t\t\t\tif (bfSets) {\r\n\t\t\t\t\tbfSets += battleFactorySets(Dex.species.get('zygarde-10'), tier, mod)!;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tbfSets = battleFactorySets(species, tier, mod);\r\n\t\t\t}\r\n\t\t\tif (!bfSets) return this.parse(`/help battlefactory`);\r\n\t\t\treturn this.sendReplyBox(bfSets);\r\n\t\t}\r\n\t},\r\n\tbattlefactoryhelp: [\r\n\t\t`/battlefactory [pokemon], [tier], [gen] - Displays a Pok\\u00e9mon's Battle Factory sets. Supports Gens 6-8. Defaults to Gen 8. If no tier is provided, defaults to OU.`,\r\n\t\t`- Supported tiers: OU, Ubers, UU, RU, NU, PU, Monotype (Gen 7 only), LC (Gen 7 only)`,\r\n\t\t`/bssfactory [pokemon], [gen] - Displays a Pok\\u00e9mon's BSS Factory sets. Supports Gen 7-9. Defaults to Gen 9.`,\r\n\t],\r\n\r\n\tcap1v1(target, room, user) {\r\n\t\tif (!this.runBroadcast()) return;\r\n\t\tif (!target) return this.parse(`/help cap1v1`);\r\n\t\tconst species = Dex.species.get(target);\r\n\t\tif (!species.exists) throw new Chat.ErrorMessage(`Error: Pok\\u00e9mon '${target.trim()}' not found.`);\r\n\t\tconst cap1v1Set = CAP1v1Sets(species);\r\n\t\tif (!cap1v1Set) return this.parse(`/help cap1v1`);\r\n\t\tif (typeof cap1v1Set !== 'string') {\r\n\t\t\tthis.errorReply(`Error: ${cap1v1Set.e}`);\r\n\t\t\tif (cap1v1Set.parse) this.parse(cap1v1Set.parse);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn this.sendReplyBox(cap1v1Set);\r\n\t},\r\n\tcap1v1help: [\r\n\t\t`/cap1v1 [pokemon] - Displays a Pok\\u00e9mon's CAP 1v1 sets.`,\r\n\t],\r\n\r\n\tsetodds: 'randombattlesetprobabilities',\r\n\trandbatsodds: 'randombattlesetprobabilities',\r\n\trandbatsprobabilities: 'randombattlesetprobabilities',\r\n\trandombattlesetprobabilities(target, room, user) {\r\n\t\t// Restricted to global staff and randbats room auth\r\n\t\tconst randbatsRoom = Rooms.get('randombattles');\r\n\t\tif (!randbatsRoom?.auth.has(user.id)) {\r\n\t\t\tthis.checkCan('lock');\r\n\t\t}\r\n\r\n\t\tif (!target) return this.parse(`/help randombattlesetprobabilities`);\r\n\t\tthis.runBroadcast();\r\n\r\n\t\tconst args = target.split(',');\r\n\t\tif (args.length < 2) return this.parse(`/help randombattlesetprobabilities`);\r\n\r\n\t\t// Optional format\r\n\t\tlet format = Dex.formats.get('gen9randombattle');\r\n\t\tlet formatOrSpecies = args.shift();\r\n\t\tconst possibleFormat = Dex.formats.get(formatOrSpecies);\r\n\t\tif (possibleFormat.exists) {\r\n\t\t\tif (!possibleFormat.team) {\r\n\t\t\t\tthrow new Chat.ErrorMessage(`${possibleFormat.name} does not have randomly-generated teams.`);\r\n\t\t\t}\r\n\t\t\tformat = possibleFormat;\r\n\t\t\tformatOrSpecies = args.shift();\r\n\t\t}\r\n\t\tconst dex = Dex.forFormat(format);\r\n\r\n\t\t// Species\r\n\t\tconst species = dex.species.get(formatOrSpecies);\r\n\t\tif (!species.exists) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Species ${species.name} does not exist in the specified format.`);\r\n\t\t}\r\n\r\n\t\tlet setExists: boolean;\r\n\t\tif ([2, 3, 4, 5, 6, 7, 9].includes(dex.gen)) {\r\n\t\t\tsetExists = !!getSets(species, format);\r\n\t\t} else {\r\n\t\t\tconst data = getData(species, format);\r\n\t\t\tif (!data) {\r\n\t\t\t\tsetExists = false;\r\n\t\t\t} else if (format.gameType === 'doubles' || format.gameType === 'freeforall') {\r\n\t\t\t\tsetExists = !!data.doublesMoves;\r\n\t\t\t} else {\r\n\t\t\t\tsetExists = !!data.moves;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!setExists) {\r\n\t\t\tthrow new Chat.ErrorMessage(`${species.name} does not have random battle moves in ${format.name}.`);\r\n\t\t}\r\n\r\n\t\t// Criteria\r\n\t\tconst criteria: SetCriteria = {\r\n\t\t\tmoves: { mustHave: [], mustNotHave: [] },\r\n\t\t\titem: { mustNotHave: [] },\r\n\t\t\tability: { mustNotHave: [] },\r\n\t\t\tnature: { mustNotHave: [] },\r\n\t\t\tteraType: { mustNotHave: [] },\r\n\t\t};\r\n\r\n\t\tif (args.length < 1) {\r\n\t\t\tthis.errorReply(`You must specify at least one condition.`);\r\n\t\t\treturn this.parse(`/help randombattlesetprobabilities`);\r\n\t\t}\r\n\r\n\t\tfor (const arg of args) {\r\n\t\t\tlet [key, value] = arg.split('=');\r\n\t\t\tkey = toID(key);\r\n\t\t\tif (!value || !key) {\r\n\t\t\t\tthis.errorReply(`Invalid condition format: ${arg}`);\r\n\t\t\t\treturn this.parse(`/help randombattlesetprobabilities`);\r\n\t\t\t}\r\n\r\n\t\t\tswitch (key) {\r\n\t\t\tcase 'moves':\r\n\t\t\t\tfor (const rawMove of value.split('&')) {\r\n\t\t\t\t\tconst move = dex.moves.get(rawMove);\r\n\t\t\t\t\tif (!move.exists) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`\"${rawMove}\" is not a move in the specified format.`);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst isNegation = rawMove.trim().startsWith('!');\r\n\t\t\t\t\tif (isNegation) {\r\n\t\t\t\t\t\tcriteria.moves.mustNotHave.push(move);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcriteria.moves.mustHave.push(move);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'item':\r\n\t\t\t\tconst item = dex.items.get(value);\r\n\t\t\t\tif (!item.exists) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`\"${value}\" is not an item in the specified format.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst itemNegation = value.trim().startsWith('!');\r\n\t\t\t\tif (itemNegation) {\r\n\t\t\t\t\tcriteria.item.mustNotHave.push(item);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (criteria.item.mustHave) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Impossible situation: two items (${criteria.item.mustHave.name} and ${item.name}) are required.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcriteria.item.mustHave = item;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tconst ability = dex.abilities.get(value);\r\n\t\t\t\tif (!ability.exists) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`\"${value}\" is not an ability in the specified format.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst abilityNegation = value.trim().startsWith('!');\r\n\t\t\t\tif (abilityNegation) {\r\n\t\t\t\t\tcriteria.ability.mustNotHave.push(ability);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (criteria.ability.mustHave) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Impossible situation: two abilities (${criteria.ability.mustHave.name} and ${ability.name}) are required.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcriteria.ability.mustHave = ability;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'nature':\r\n\t\t\t\tconst nature = dex.natures.get(value);\r\n\t\t\t\tif (!nature.exists) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`\"${value}\" is not a nature in the specified format.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst natureNegation = value.trim().startsWith('!');\r\n\t\t\t\tif (natureNegation) {\r\n\t\t\t\t\tcriteria.nature.mustNotHave.push(nature);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (criteria.nature.mustHave) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Impossible situation: two natures (${criteria.nature.mustHave.name} and ${nature.name}) are required.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcriteria.nature.mustHave = nature;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tera': case 'teratype':\r\n\t\t\t\tif (dex.gen < 9) throw new Chat.ErrorMessage(\"Tera Types do not exist in the specified format.\");\r\n\t\t\t\tconst type = dex.types.get(value);\r\n\t\t\t\tif (!type.exists) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`\"${value}\" is not a type in the specified format.`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst typeNegation = value.trim().startsWith('!');\r\n\t\t\t\tif (typeNegation) {\r\n\t\t\t\t\tcriteria.teraType.mustNotHave.push(type);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (criteria.teraType.mustHave) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Impossible situation: two Tera Types (${criteria.teraType.mustHave.name} and ${type.name}) are required.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcriteria.teraType.mustHave = type;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Chat.ErrorMessage(`Invalid criterion: ${key}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst results = setProbability(species, format, criteria);\r\n\t\tconst percentage = Math.round((results.matches / results.rounds) * 100);\r\n\t\treturn this.sendReplyBox(\r\n\t\t\tUtils.html`Generated ${results.rounds} sets for <strong>${species.name}</strong> in ${format.name}:<br />` +\r\n\t\t\t`Approximately <strong>${percentage}%</strong> (${results.matches} sets) ${getHTMLCriteriaDescription(criteria)}.`\r\n\t\t);\r\n\t},\r\n\trandombattlesetprobabilitieshelp() {\r\n\t\treturn this.sendReplyBox(\r\n\t\t\t`<code>/randombattlesetprobabilities [optional format], [species], [conditions]</code>: Gives the probability of a set matching the conditions appearing for the given species.<br />` +\r\n\t\t\t`<code>[conditions]</code> is a comma-separated list of conditions of the form <code>[component]=[matching value]</code>, where <code>[component]</code> can be any of the following: ` +\r\n\t\t\t`<ul>` +\r\n\t\t\t`<li><code>moves</code>: matches all generated sets that contain every move specified. <code>[matching value]</code> should be a list of moves separated with <code>&amp;</code>.` +\r\n\t\t\t`<li><code>item</code>: matches all generated sets that have the specified item. <code>[matching value]</code> should be an item name.` +\r\n\t\t\t`<li><code>ability</code>: matches all generated sets with the specified ability. <code>[matching value]</code> should be an ability name.` +\r\n\t\t\t`<li><code>nature</code>: matches all generated sets with the specified nature. <code>[matching value]</code> should be a nature name.` +\r\n\t\t\t`<li><code>tera</code>: matches all generated sets with the specified Tera Type. <code>[matching value]</code> should be a type. Gen 9 only.` +\r\n\t\t\t`</ul>` +\r\n\t\t\t`The given probability is for a set that matches EVERY provided condition. ` +\r\n\t\t\t`Conditions can be negated by prefixing the <code>[matching value]</code> with <code>!</code>.<br />` +\r\n\t\t\t`Requires: % @ # ~ (globally or in the Random Battles room)`\r\n\t\t);\r\n\t},\r\n\r\n\tgenteam: 'generateteam',\r\n\tgenerateteam(target, room, user) {\r\n\t\tif (!Rooms.get('randombattles')?.auth.has(user.id)) this.checkCan('lock');\r\n\t\tthis.runBroadcast(true);\r\n\r\n\t\tif (!target) return this.parse('/help generateteam');\r\n\t\tconst format = Dex.formats.get(target);\r\n\t\tif (format.effectType !== 'Format') throw new Chat.ErrorMessage(`\"${target}\" is not a recognized format.`);\r\n\t\tif (!format.team) throw new Chat.ErrorMessage(`\"${format.name}\" requires you to bring your own team.`);\r\n\r\n\t\tconst team = Teams.getGenerator(format).getTeam();\r\n\t\tconst dex = Dex.forFormat(format);\r\n\t\tconst teamHTML = team\r\n\t\t\t.map((set: PokemonSet) => {\r\n\t\t\t\t// moves are sometimes given as IDs\r\n\t\t\t\tset.moves = set.moves.map(m => dex.moves.get(m).name);\r\n\t\t\t\tset.item = dex.items.get(set.item).name;\r\n\t\t\t\treturn `<details class=\"details\"><summary>${set.name}</summary>${Utils.escapeHTML(Teams.exportSet(set))}<br /></details>`;\r\n\t\t\t})\r\n\t\t\t.join('');\r\n\t\treturn this.sendReplyBox(`<strong>Team for ${format.name}</strong>:` + teamHTML);\r\n\t},\r\n\tgenerateteamhelp: [`/genteam [format] - Generates a team for the given format. Requires: % @ ~ or Random Battles room auth`],\r\n};\r\n"],
  "mappings": "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",
  "names": ["buf"]
}
