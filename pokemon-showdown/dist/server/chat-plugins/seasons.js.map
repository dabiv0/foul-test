{
  "version": 3,
  "sources": ["../../../server/chat-plugins/seasons.ts"],
  "sourcesContent": ["/**\r\n * @author mia-pi-git\r\n */\r\n\r\nimport { FS, Net, Utils } from '../../lib';\r\n\r\nexport const SEASONS_PER_YEAR = 4;\r\nexport const FORMATS_PER_SEASON = 4;\r\nexport const BADGE_THRESHOLDS: Record<string, number> = {\r\n\tgold: 3,\r\n\tsilver: 30,\r\n\tbronze: 100,\r\n};\r\nexport const FIXED_FORMATS = ['randombattle', 'ou'];\r\nexport const FORMAT_POOL = ['ubers', 'uu', 'ru', 'nu', 'pu', 'lc', 'doublesou', 'monotype'];\r\nexport const PUBLIC_PHASE_LENGTH = 3;\r\n\r\ninterface SeasonData {\r\n\tcurrent: { period: number, year: number, formatsGeneratedAt: number, season: number };\r\n\tbadgeholders: { [period: string]: { [format: string]: { [badgeType: string]: string[] } } };\r\n\tformatSchedule: Record<string, string[]>;\r\n}\r\n\r\nexport let data: SeasonData;\r\n\r\ntry {\r\n\tdata = JSON.parse(FS('config/chat-plugins/seasons.json').readSync());\r\n} catch {\r\n\tdata = {\r\n\t\t// force a reroll\r\n\t\tcurrent: { season: null!, year: null!, formatsGeneratedAt: null!, period: null! },\r\n\t\tformatSchedule: {},\r\n\t\tbadgeholders: {},\r\n\t};\r\n}\r\n\r\nexport function getBadges(user: User, curFormat: string) {\r\n\tlet userBadges: { type: string, format: string }[] = [];\r\n\tconst season = data.current.season; // don't factor in old badges\r\n\tfor (const format in data.badgeholders[season]) {\r\n\t\tconst badges = data.badgeholders[season][format];\r\n\t\tfor (const type in badges) {\r\n\t\t\tif (badges[type].includes(user.id)) {\r\n\t\t\t\t// ex badge-bronze-gen9ou-250-1-2024\r\n\t\t\t\tuserBadges.push({ type, format });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// find which ones we should prioritize showing - badge of current tier/season, then top badges of other formats for this season\r\n\tlet curFormatBadge;\r\n\tfor (const [i, badge] of userBadges.entries()) {\r\n\t\tif (badge.format === curFormat) {\r\n\t\t\tuserBadges.splice(i, 1);\r\n\t\t\tcurFormatBadge = badge;\r\n\t\t}\r\n\t}\r\n\t// now - sort by highest levels\r\n\tuserBadges = Utils.sortBy(userBadges, x => Object.keys(BADGE_THRESHOLDS).indexOf(x.type))\r\n\t\t.slice(0, 2);\r\n\tif (curFormatBadge) userBadges.unshift(curFormatBadge);\r\n\t// format and return\r\n\treturn userBadges;\r\n}\r\n\r\nfunction getUserHTML(user: User, format: string) {\r\n\tconst buf = `<username>${user.name}</username>`;\r\n\tconst badgeType = getBadges(user, format).find(x => x.format === format)?.type;\r\n\tif (badgeType) {\r\n\t\tlet formatType = format.split(/gen\\d+/)[1];\r\n\t\tif (!['ou', 'randombattle'].includes(formatType)) formatType = 'rotating';\r\n\t\treturn `<img src=\"https://${Config.routes.client}/sprites/misc/${formatType}_${badgeType}.png\" />` + buf;\r\n\t}\r\n\treturn buf;\r\n}\r\n\r\nexport function setFormatSchedule() {\r\n\t// guard heavily against this being overwritten\r\n\tif (data.current.formatsGeneratedAt === getYear()) return;\r\n\tdata.current.formatsGeneratedAt = getYear();\r\n\tconst formats = generateFormatSchedule();\r\n\tfor (const [i, formatList] of formats.entries()) {\r\n\t\tdata.formatSchedule[i + 1] = FIXED_FORMATS.concat(formatList.slice());\r\n\t}\r\n\tsaveData();\r\n}\r\n\r\nclass ScheduleGenerator {\r\n\tformats: string[][];\r\n\titems = new Map<string, number>();\r\n\tconstructor() {\r\n\t\tthis.formats = new Array(SEASONS_PER_YEAR).fill(null).map(() => [] as string[]);\r\n\t\tfor (const format of FORMAT_POOL) this.items.set(format, 0);\r\n\t}\r\n\tgenerate() {\r\n\t\tfor (let i = 0; i < this.formats.length; i++) {\r\n\t\t\tthis.step([i, 0]);\r\n\t\t}\r\n\t\tfor (let i = 1; i < SEASONS_PER_YEAR; i++) {\r\n\t\t\tthis.step([0, i]);\r\n\t\t}\r\n\t\treturn this.formats;\r\n\t}\r\n\tswap(x: number, y: number) {\r\n\t\tconst item = this.formats[x][y];\r\n\t\tfor (let i = 0; i < SEASONS_PER_YEAR; i++) {\r\n\t\t\tif (this.formats[i].includes(item)) continue;\r\n\t\t\tfor (const [j, cur] of this.formats[i].entries()) {\r\n\t\t\t\tif (cur === item) continue;\r\n\t\t\t\tif (this.formats[x].includes(cur)) continue;\r\n\t\t\t\tthis.formats[i][j] = item;\r\n\t\t\t\treturn cur;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"Couldn't find swap target for \" + item + \": \" + JSON.stringify(this.formats));\r\n\t}\r\n\tselect(x: number, y: number): string {\r\n\t\tconst items = Array.from(this.items).filter(entry => entry[1] < 2);\r\n\t\tconst item = Utils.randomElement(items);\r\n\t\tif (item[1] >= 2) {\r\n\t\t\tthis.items.delete(item[0]);\r\n\t\t\treturn this.select(x, y);\r\n\t\t}\r\n\t\tthis.items.set(item[0], item[1] + 1);\r\n\t\tif (item[0] && this.formats[x].includes(item[0])) {\r\n\t\t\tthis.formats[x][y] = item[0];\r\n\t\t\treturn this.swap(x, y);\r\n\t\t}\r\n\t\treturn item[0];\r\n\t}\r\n\tstep(start: [number, number]) {\r\n\t\tlet [x, y] = start;\r\n\t\twhile (x < this.formats.length && y < FORMATS_PER_SEASON) {\r\n\t\t\tconst item = this.select(x, y);\r\n\t\t\tthis.formats[x][y] = item;\r\n\t\t\tx++;\r\n\t\t\ty++;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function generateFormatSchedule() {\r\n\treturn new ScheduleGenerator().generate();\r\n}\r\n\r\nexport async function getLadderTop(format: string) {\r\n\ttry {\r\n\t\tconst results = await Net(`https://${Config.routes.root}/ladder/?format=${toID(format)}&json`).get();\r\n\t\tconst reply = JSON.parse(results);\r\n\t\treturn reply.toplist;\r\n\t} catch (e) {\r\n\t\tMonitor.crashlog(e, \"A season ladder request\");\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport async function updateBadgeholders() {\r\n\trollSeason();\r\n\tconst period = `${data.current.season}`;\r\n\tif (!data.badgeholders[period]) {\r\n\t\tdata.badgeholders[period] = {};\r\n\t}\r\n\tfor (const formatName of data.formatSchedule[findPeriod()]) {\r\n\t\tconst formatid = `gen${Dex.gen}${formatName}`;\r\n\t\tconst response = await getLadderTop(formatid);\r\n\t\tif (!response) continue; // ??\r\n\t\tconst newHolders: Record<string, string[]> = {};\r\n\t\tfor (const [i, row] of response.entries()) {\r\n\t\t\tlet badgeType = null;\r\n\t\t\tfor (const type in BADGE_THRESHOLDS) {\r\n\t\t\t\tif ((i + 1) <= BADGE_THRESHOLDS[type]) {\r\n\t\t\t\t\tbadgeType = type;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!badgeType) break;\r\n\t\t\tif (!newHolders[badgeType]) newHolders[badgeType] = [];\r\n\t\t\tnewHolders[badgeType].push(row.userid);\r\n\t\t}\r\n\t\tdata.badgeholders[period][formatid] = newHolders;\r\n\t}\r\n\tsaveData();\r\n}\r\n\r\nfunction getYear() {\r\n\treturn new Date().getFullYear();\r\n}\r\n\r\nfunction findPeriod(modifier = 0) {\r\n\treturn Math.floor((new Date().getMonth() + modifier) / (SEASONS_PER_YEAR - 1)) + 1;\r\n}\r\n\r\n/** Are we in the last three days of the month (the public phase, where badged battles are public and the room is active?) */\r\nfunction checkPublicPhase() {\r\n\tconst daysInCurrentMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate();\r\n\t// last 3 days of the month, and next month is a new season\r\n\treturn new Date().getDate() >= (daysInCurrentMonth - PUBLIC_PHASE_LENGTH) && findPeriod() !== findPeriod(1);\r\n}\r\n\r\nexport function saveData() {\r\n\tFS('config/chat-plugins/seasons.json').writeUpdate(() => JSON.stringify(data));\r\n}\r\n\r\nexport function rollSeason() {\r\n\tconst year = getYear();\r\n\tif (data.current.year !== year) {\r\n\t\tdata.current.year = year;\r\n\t\tsetFormatSchedule();\r\n\t}\r\n\tif (findPeriod() !== data.current.period) {\r\n\t\tdata.current.season++;\r\n\t\tdata.badgeholders[data.current.season] = {};\r\n\t\tfor (const k of data.formatSchedule[findPeriod()]) {\r\n\t\t\tdata.badgeholders[data.current.season][`gen${Dex.gen}${k}`] = {};\r\n\t\t}\r\n\t\tdata.current.period = findPeriod();\r\n\t\tsaveData();\r\n\t}\r\n}\r\n\r\nexport let updateTimeout: NodeJS.Timeout | true | null = null;\r\n\r\nexport function rollTimer() {\r\n\tif (updateTimeout === true) return;\r\n\tif (updateTimeout) {\r\n\t\tclearTimeout(updateTimeout);\r\n\t}\r\n\tupdateTimeout = true;\r\n\tvoid updateBadgeholders();\r\n\tconst time = Date.now();\r\n\tconst next = new Date();\r\n\tnext.setHours(next.getHours() + 1, 0, 0, 0);\r\n\tupdateTimeout = setTimeout(() => rollTimer(), next.getTime() - time);\r\n\r\n\tconst discussionRoom = Rooms.search('seasondiscussion');\r\n\tif (discussionRoom) {\r\n\t\tif (checkPublicPhase() && discussionRoom.settings.isPrivate) {\r\n\t\t\tdiscussionRoom.setPrivate(false);\r\n\t\t\tdiscussionRoom.settings.modchat = 'autoconfirmed';\r\n\t\t\tdiscussionRoom.add(\r\n\t\t\t\t`|html|<div class=\"broadcast-blue\"><strong>The public phase of the month has now started!</strong>` +\r\n\t\t\t\t`<br /> Badged battles are now forced public, and this room is open for use.</div>`\r\n\t\t\t).update();\r\n\t\t} else if (!checkPublicPhase() && !discussionRoom.settings.isPrivate) {\r\n\t\t\tdiscussionRoom.setPrivate('unlisted');\r\n\t\t\tdiscussionRoom.add(\r\n\t\t\t\t`|html|<div class=\"broadcast-blue\">The public phase of the month has ended.</div>`\r\n\t\t\t).update();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function destroy() {\r\n\tif (updateTimeout && typeof updateTimeout !== 'boolean') {\r\n\t\tclearTimeout(updateTimeout);\r\n\t}\r\n}\r\n\r\nrollTimer();\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tseasonschedule: 'seasons',\r\n\tseasons() {\r\n\t\treturn this.parse(`/join view-seasonschedule`);\r\n\t},\r\n};\r\n\r\nexport const pages: Chat.PageTable = {\r\n\tseasonschedule() {\r\n\t\tthis.checkCan('globalban');\r\n\t\tlet buf = `<div class=\"pad\"><h2>Season schedule for ${getYear()}</h2><br />`;\r\n\t\tbuf += `<div class=\"ladder pad\"><table><tr><th>Season #</th><th>Formats</th></tr>`;\r\n\t\tfor (const period in data.formatSchedule) {\r\n\t\t\tconst match = findPeriod() === Number(period);\r\n\t\t\tconst formatString = data.formatSchedule[period]\r\n\t\t\t\t.sort()\r\n\t\t\t\t.map(x => Dex.formats.get(x).name.replace(`[Gen ${Dex.gen}]`, ''))\r\n\t\t\t\t.join(', ');\r\n\t\t\tbuf += `<tr><td>${match ? `<strong>${period}</strong>` : period}</td>`;\r\n\t\t\tbuf += `<td>${match ? `<strong>${formatString}</strong>` : formatString}</td></tr>`;\r\n\t\t}\r\n\t\tbuf += `</tr></table></div>`;\r\n\t\treturn buf;\r\n\t},\r\n\tseasonladder(query, user) {\r\n\t\tconst format = toID(query.shift());\r\n\t\tconst season = toID(query.shift()) || `${data.current.season}`;\r\n\t\tif (!data.badgeholders[season]) {\r\n\t\t\tthrow new Chat.ErrorMessage(`Season ${season} not found.`);\r\n\t\t}\r\n\t\tthis.title = `[Seasons]`;\r\n\t\tlet buf = '<div class=\"pad\">';\r\n\t\tif (!Object.keys(data.badgeholders[season]).includes(format)) {\r\n\t\t\t// fall back to the master list so that people can still access this easily from the ladder page of other formats\r\n\t\t\tthis.title += ` All`;\r\n\t\t\tbuf += `<h2>Season Records</h2>`;\r\n\t\t\tconst seasonsDesc = Utils.sortBy(\r\n\t\t\t\tObject.keys(data.badgeholders),\r\n\t\t\t\ts => s.split('-').map(x => -Number(x))\r\n\t\t\t);\r\n\t\t\tfor (const s of seasonsDesc) {\r\n\t\t\t\tbuf += `<h3>Season ${s}</h3><hr />`;\r\n\t\t\t\tfor (const f in data.badgeholders[s]) {\r\n\t\t\t\t\tbuf += `<a class=\"button\" name=\"send\" target=\"replace\" href=\"/view-seasonladder-${f}-${s}\">${Dex.formats.get(f).name}</a>`;\r\n\t\t\t\t}\r\n\t\t\t\tbuf += `<br />`;\r\n\t\t\t}\r\n\t\t\treturn buf;\r\n\t\t}\r\n\t\tthis.title += ` ${format} [Season ${season}]`;\r\n\t\tconst uppercase = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\r\n\t\tlet formatName = Dex.formats.get(format).name;\r\n\t\t// futureproofing for gen10/etc\r\n\t\tconst room = Rooms.search(Utils.splitFirst(format, /\\d+/)[1] || '');\r\n\t\tif (room) {\r\n\t\t\tformatName = `<a href=\"/${room.roomid}\">${formatName}</a>`;\r\n\t\t}\r\n\t\tbuf += `<h2>Season results for ${formatName} [${season}]</h2>`;\r\n\t\tbuf += `<small><a target=\"replace\" href=\"/view-seasonladder\">View past seasons</a></small>`;\r\n\t\tlet i = 0;\r\n\t\tfor (const badgeType in data.badgeholders[season][format]) {\r\n\t\t\tbuf += `<div class=\"ladder pad\"><table>`;\r\n\t\t\tlet formatType = format.split(/gen\\d+/)[1];\r\n\t\t\tif (!['ou', 'randombattle'].includes(formatType)) formatType = 'rotating';\r\n\t\t\tbuf += `<tr><h2><img src=\"https://${Config.routes.client}/sprites/misc/${formatType}_${badgeType}.png\" /> ${uppercase(badgeType)}</h2></tr>`;\r\n\t\t\tfor (const userid of data.badgeholders[season][format][badgeType]) {\r\n\t\t\t\ti++;\r\n\t\t\t\tbuf += `<tr><td>${i}</td><td><a href=\"https://${Config.routes.root}/users/${userid}\">${userid}</a></td></tr>`;\r\n\t\t\t}\r\n\t\t\tbuf += `</table></div>`;\r\n\t\t}\r\n\t\treturn buf;\r\n\t},\r\n};\r\n\r\nexport const handlers: Chat.Handlers = {\r\n\tonBattleStart(user, room) {\r\n\t\tif (!room.battle) return; // should never happen, just sating TS\r\n\t\t// now first verify they have a badge\r\n\t\tconst badges = getBadges(user, room.battle.format);\r\n\t\tif (!badges.length) return;\r\n\t\tconst slot = room.battle.playerTable[user.id]?.slot;\r\n\t\tif (!slot) return; // not in battle fsr? wack\r\n\t\tfor (const badge of badges) {\r\n\t\t\troom.add(`|badge|${slot}|${badge.type}|${badge.format}|${BADGE_THRESHOLDS[badge.type]}-${data.current.season}`);\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tcheckPublicPhase() && !room.battle.forcedSettings.privacy &&\r\n\t\t\tbadges.filter(x => x.format === room.battle!.format).length && room.battle.rated\r\n\t\t) {\r\n\t\t\troom.battle.forcedSettings.privacy = 'medal';\r\n\t\t\troom.add(\r\n\t\t\t\t`|html|<div class=\"broadcast-red\"><strong>This battle is required to be public due to one or more player having a season medal.</strong><br />` +\r\n\t\t\t\t`During the public phase, you can discuss the state of the ladder <a href=\"/seasondiscussion\">in a special chatroom.</a></div>`\r\n\t\t\t);\r\n\t\t\troom.setPrivate(false);\r\n\t\t\tconst seasonRoom = Rooms.search('seasondiscussion');\r\n\t\t\tif (seasonRoom) {\r\n\t\t\t\tconst p1html = getUserHTML(user, room.battle.format);\r\n\t\t\t\tconst otherPlayer = user.id === room.battle.p1.id ? room.battle.p2 : room.battle.p1;\r\n\t\t\t\tconst otherUser = otherPlayer.getUser();\r\n\t\t\t\tconst p2html = otherUser ? getUserHTML(otherUser, room.battle.format) : `<username>${otherPlayer.name}</username>`;\r\n\t\t\t\tconst formatName = Dex.formats.get(room.battle.format).name;\r\n\t\t\t\tseasonRoom.add(\r\n\t\t\t\t\t`|raw|<a href=\"/${room.roomid}\" class=\"ilink\">${formatName} battle started between ` +\r\n\t\t\t\t\t`${p1html} and ${p2html}. (rating: ${Math.floor(room.battle.rated)})</a>`\r\n\t\t\t\t).update();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\troom.add(\r\n\t\t\t`|uhtml|medal-msg|<div class=\"broadcast-blue\">Curious what those medals under the avatar are? PS now has Ladder Seasons!` +\r\n\t\t\t` For more information, check out the <a href=\"https://www.smogon.com/forums/threads/3740067/\">thread on Smogon.</a></div>`\r\n\t\t);\r\n\t\troom.update();\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
