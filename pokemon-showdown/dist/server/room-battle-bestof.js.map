{
  "version": 3,
  "sources": ["../../server/room-battle-bestof.ts"],
  "sourcesContent": ["import { Utils } from '../lib';\r\nimport { RoomGamePlayer, RoomGame } from \"./room-game\";\r\nimport type { RoomBattlePlayerOptions, RoomBattleOptions } from './room-battle';\r\nimport type { PrivacySetting, RoomSettings } from './rooms';\r\n\r\nconst BEST_OF_IN_BETWEEN_TIME = 40;\r\n\r\nexport class BestOfPlayer extends RoomGamePlayer<BestOfGame> {\r\n\twins = 0;\r\n\tready: boolean | null = null;\r\n\toptions: Omit<RoomBattlePlayerOptions, 'user'> & { user: null };\r\n\tdcAutoloseTime: number | null = null;\r\n\tconstructor(user: User | null, game: BestOfGame, num: number, options: RoomBattlePlayerOptions) {\r\n\t\tsuper(user, game, num);\r\n\t\tthis.options = { ...options, user: null };\r\n\t}\r\n\tavatar() {\r\n\t\tlet avatar = Users.get(this.id)?.avatar;\r\n\t\tif (!avatar || typeof avatar === 'number') avatar = 'unknownf';\r\n\t\tconst url = Chat.plugins.avatars?.Avatars.src(avatar) ||\r\n\t\t\t`https://${Config.routes.client}/sprites/trainers/${avatar}.png`;\r\n\t\treturn url;\r\n\t}\r\n\tupdateReadyButton() {\r\n\t\tconst user = this.getUser();\r\n\t\tif (!user?.connected) return;\r\n\r\n\t\tthis.dcAutoloseTime = null;\r\n\t\tconst room = this.game.room;\r\n\t\tconst battleRoom = this.game.games[this.game.games.length - 1]?.room as Room | undefined;\r\n\t\tconst gameNum = this.game.games.length + 1;\r\n\r\n\t\tif (this.ready === false) {\r\n\t\t\tconst notification = `|tempnotify|choice|Next game|It's time for game ${gameNum} in your best-of-${this.game.bestOf}!`;\r\n\t\t\tif (battleRoom && user.inRooms.has(battleRoom.roomid)) {\r\n\t\t\t\tbattleRoom.send(notification);\r\n\t\t\t} else {\r\n\t\t\t\tthis.sendRoom(notification);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst notification = `|tempnotifyoff|choice`;\r\n\t\t\tbattleRoom?.sendUser(user, notification);\r\n\t\t\tthis.sendRoom(notification);\r\n\t\t}\r\n\r\n\t\tif (this.ready === null) {\r\n\t\t\tconst button = `|c|~|/uhtml controls,`;\r\n\t\t\tthis.sendRoom(button);\r\n\t\t\tbattleRoom?.sendUser(user, button);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst cmd = `/msgroom ${room.roomid},/confirmready`;\r\n\t\tconst button = `|c|~|/uhtml controls,<div class=\"infobox\"><p style=\"margin:6px\">Are you ready for game ${gameNum}, ${this.name}?</p><p style=\"margin:6px\">` +\r\n\t\t\t(this.ready ?\r\n\t\t\t\t`<button class=\"button\" disabled><i class=\"fa fa-check\"></i> I'm ready!</button> &ndash; waiting for opponent...` :\r\n\t\t\t\t`<button class=\"button notifying\" name=\"send\" value=\"${cmd}\">I'm ready!</button>`\r\n\t\t\t) +\r\n\t\t\t`</p></div>`;\r\n\t\tthis.sendRoom(button);\r\n\t\tbattleRoom?.sendUser(user, button);\r\n\t}\r\n}\r\n\r\nexport class BestOfGame extends RoomGame<BestOfPlayer> {\r\n\toverride readonly gameid = 'bestof' as ID;\r\n\toverride allowRenames = false;\r\n\toverride room!: GameRoom;\r\n\tbestOf: number;\r\n\tformat: Format;\r\n\twinThreshold: number;\r\n\toptions: Omit<RoomBattleOptions, 'players'> & { parent: Room, players: null };\r\n\tforcedSettings: { modchat?: string | null, privacy?: string | null } = {};\r\n\tties = 0;\r\n\tgames: { room: GameRoom, winner: BestOfPlayer | null | undefined, rated: number }[] = [];\r\n\tplayerNum = 0;\r\n\t/** null = tie, undefined = not ended */\r\n\twinner: BestOfPlayer | null | undefined = undefined;\r\n\t/** when waiting between battles, this is the just-ended battle room, the one with the |tempnotify| */\r\n\twaitingBattle: GameRoom | null = null;\r\n\tnextBattleTimerEnd: number | null = null;\r\n\tnextBattleTimer: NodeJS.Timeout | null = null;\r\n\t/** Does NOT control bestof's own timer, which is always-on. Controls timers in sub-battles. */\r\n\tneedsTimer = false;\r\n\tscore: number[] | null = null;\r\n\tconstructor(room: GameRoom, options: RoomBattleOptions) {\r\n\t\tsuper(room);\r\n\t\tthis.gameid = 'bestof' as ID;\r\n\t\tthis.format = Dex.formats.get(options.format);\r\n\t\tthis.bestOf = Number(Dex.formats.getRuleTable(this.format).valueRules.get('bestof'))!;\r\n\t\tthis.winThreshold = Math.floor(this.bestOf / 2) + 1;\r\n\t\tthis.title = this.format.name;\r\n\t\tif (!toID(this.title).includes('bestof')) {\r\n\t\t\tthis.title += ` (Best-of-${this.bestOf})`;\r\n\t\t}\r\n\t\tthis.room.bestOf = this;\r\n\t\tthis.options = {\r\n\t\t\t...options,\r\n\t\t\tisBestOfSubBattle: true,\r\n\t\t\tparent: this.room,\r\n\t\t\tallowRenames: false,\r\n\t\t\tplayers: null,\r\n\t\t};\r\n\t\tfor (const playerOpts of options.players) {\r\n\t\t\tthis.addPlayer(playerOpts.user, playerOpts);\r\n\t\t}\r\n\t\tprocess.nextTick(() => this.nextGame());\r\n\t}\r\n\toverride onConnect(user: User) {\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tplayer?.sendRoom('|cantleave|');\r\n\t\tplayer?.updateReadyButton();\r\n\t}\r\n\toverride makePlayer(user: User | null, options: RoomBattlePlayerOptions): BestOfPlayer {\r\n\t\treturn new BestOfPlayer(user, this, ++this.playerNum, options);\r\n\t}\r\n\toverride addPlayer(user: User, options: RoomBattlePlayerOptions) {\r\n\t\tconst player = super.addPlayer(user, options);\r\n\t\tif (!player) throw new Error(`Failed to make player ${user} in ${this.roomid}`);\r\n\t\tthis.room.auth.set(user.id, Users.PLAYER_SYMBOL);\r\n\t\treturn player;\r\n\t}\r\n\tcheckPrivacySettings(options: RoomBattleOptions & Partial<RoomSettings>) {\r\n\t\tlet inviteOnly = false;\r\n\t\tconst privacySetter = new Set<ID>([]);\r\n\t\tfor (const p of options.players) {\r\n\t\t\tif (p.user) {\r\n\t\t\t\tif (p.inviteOnly) {\r\n\t\t\t\t\tinviteOnly = true;\r\n\t\t\t\t\tprivacySetter.add(p.user.id);\r\n\t\t\t\t} else if (p.hidden) {\r\n\t\t\t\t\tprivacySetter.add(p.user.id);\r\n\t\t\t\t}\r\n\t\t\t\tthis.checkForcedUserSettings(p.user);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (privacySetter.size) {\r\n\t\t\tconst room = this.room;\r\n\t\t\tif (this.forcedSettings.privacy) {\r\n\t\t\t\troom.setPrivate(false);\r\n\t\t\t\troom.settings.modjoin = null;\r\n\t\t\t\troom.add(`|raw|<div class=\"broadcast-blue\"><strong>This best-of set is required to be public due to a player having a name starting with '${this.forcedSettings.privacy}'.</div>`);\r\n\t\t\t} else if (!options.tour || (room.tour?.allowModjoin)) {\r\n\t\t\t\troom.setPrivate('hidden');\r\n\t\t\t\tif (inviteOnly) room.settings.modjoin = '%';\r\n\t\t\t\troom.privacySetter = privacySetter;\r\n\t\t\t\tif (inviteOnly) {\r\n\t\t\t\t\troom.settings.modjoin = '%';\r\n\t\t\t\t\troom.add(`|raw|<div class=\"broadcast-red\"><strong>This best-of set is invite-only!</strong><br />Users must be invited with <code>/invite</code> (or be staff) to join</div>`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcheckForcedUserSettings(user: User) {\r\n\t\tthis.forcedSettings = {\r\n\t\t\tmodchat: this.forcedSettings.modchat || Rooms.RoomBattle.battleForcedSetting(user, 'modchat'),\r\n\t\t\tprivacy: this.forcedSettings.privacy || Rooms.RoomBattle.battleForcedSetting(user, 'privacy'),\r\n\t\t};\r\n\t\tif (\r\n\t\t\tthis.players.some(p => p.getUser()?.battleSettings.special) ||\r\n\t\t\t(this.options.rated && this.forcedSettings.modchat)\r\n\t\t) {\r\n\t\t\tthis.room.settings.modchat = '\\u2606';\r\n\t\t}\r\n\t}\r\n\tsetPrivacyOfGames(privacy: PrivacySetting) {\r\n\t\tfor (let i = 0; i < this.games.length; i++) {\r\n\t\t\tconst room = this.games[i].room;\r\n\t\t\tconst prevRoom = this.games[i - 1]?.room;\r\n\t\t\tconst gameNum = i + 1;\r\n\r\n\t\t\troom.setPrivate(privacy);\r\n\t\t\tthis.room.add(`|uhtmlchange|game${gameNum}|<a href=\"/${room.roomid}\">${room.title}</a>`);\r\n\t\t\troom.add(`|uhtmlchange|bestof|<h2><strong>Game ${gameNum}</strong> of <a href=\"/${this.roomid}\">a best-of-${this.bestOf}</a></h2>`).update();\r\n\t\t\tif (prevRoom) {\r\n\t\t\t\tprevRoom.add(`|uhtmlchange|next|Next: <a href=\"/${room.roomid}\"><strong>Game ${gameNum} of ${this.bestOf}</strong></a>`).update();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateDisplay();\r\n\t}\r\n\tclearWaiting() {\r\n\t\tthis.waitingBattle = null;\r\n\t\tfor (const player of this.players) {\r\n\t\t\tplayer.ready = null;\r\n\t\t\tplayer.updateReadyButton();\r\n\t\t}\r\n\t\tif (this.nextBattleTimer) {\r\n\t\t\tclearInterval(this.nextBattleTimer);\r\n\t\t\tthis.nextBattleTimerEnd = null;\r\n\t\t}\r\n\t\tthis.nextBattleTimerEnd = null;\r\n\t\tthis.nextBattleTimer = null;\r\n\t}\r\n\tgetOptions(): RoomBattleOptions | null {\r\n\t\tconst players = this.players.map(player => ({\r\n\t\t\t...player.options,\r\n\t\t\tuser: player.getUser()!,\r\n\t\t}));\r\n\t\tif (players.some(p => !p.user)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...this.options,\r\n\t\t\tplayers,\r\n\t\t};\r\n\t}\r\n\tnextGame() {\r\n\t\tconst prevBattleRoom = this.waitingBattle;\r\n\t\tif (!prevBattleRoom && this.games.length) return; // should never happen\r\n\t\tthis.clearWaiting();\r\n\r\n\t\tconst options = this.getOptions();\r\n\t\tif (!options) {\r\n\t\t\tfor (const p of this.players) {\r\n\t\t\t\tif (!p.getUser()) {\r\n\t\t\t\t\t// tbc this isn't just being offline, it's changing name or being offline for 15 minutes\r\n\t\t\t\t\tthis.forfeitPlayer(p, ` lost by being unavailable at the start of a game.`);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`Failed to get options for ${this.roomid}`);\r\n\t\t}\r\n\t\tconst battleRoom = Rooms.createBattle(options);\r\n\t\t// shouldn't happen even in lockdown\r\n\t\tif (!battleRoom) throw new Error(\"Failed to create battle for \" + this.title);\r\n\t\tthis.games.push({\r\n\t\t\troom: battleRoom,\r\n\t\t\twinner: undefined,\r\n\t\t\trated: battleRoom.rated,\r\n\t\t});\r\n\t\t// the absolute result is what counts for rating\r\n\t\tbattleRoom.rated = 0;\r\n\t\tif (this.needsTimer) {\r\n\t\t\tbattleRoom.battle?.timer.start();\r\n\t\t}\r\n\t\tconst gameNum = this.games.length;\r\n\t\tconst p1 = this.players[0];\r\n\t\tconst p2 = this.players[1];\r\n\t\tbattleRoom.add(\r\n\t\t\tUtils.html`|html|<table width=\"100%\"><tr><td align=\"left\">${p1.name}</td><td align=\"right\">${p2.name}</tr>` +\r\n\t\t\t`<tr><td align=\"left\">${this.renderWins(p1)}</td><td align=\"right\">${this.renderWins(p2)}</tr></table>`\r\n\t\t);\r\n\t\tbattleRoom.add(\r\n\t\t\t`|uhtml|bestof|<h2><strong>Game ${gameNum}</strong> of <a href=\"/${this.roomid}\">a best-of-${this.bestOf}</a></h2>`\r\n\t\t).update();\r\n\r\n\t\tthis.room.add(`|html|<h2>Game ${gameNum}</h2>`);\r\n\t\tthis.room.add(Utils.html`|uhtml|game${gameNum}|<a href=\"/${battleRoom.roomid}\">${battleRoom.title}</a>`);\r\n\t\tthis.updateDisplay();\r\n\r\n\t\tprevBattleRoom?.add(\r\n\t\t\t`|uhtml|next|Next: <a href=\"/${battleRoom.roomid}\"><strong>Game ${gameNum} of ${this.bestOf}</strong></a>`\r\n\t\t).update();\r\n\t}\r\n\trenderWins(player: BestOfPlayer) {\r\n\t\tconst wins = this.games.filter(game => game.winner === player).length;\r\n\t\tconst winBuf = `<i class=\"fa fa-circle\"></i> `.repeat(wins);\r\n\t\tconst restBuf = `<i class=\"fa fa-circle-o\"></i> `.repeat(this.winThreshold - wins);\r\n\t\treturn player.num === 1 ? winBuf + restBuf : restBuf + winBuf;\r\n\t}\r\n\tupdateDisplay() {\r\n\t\tconst p1name = this.players[0].name;\r\n\t\tconst p2name = this.players[1].name;\r\n\t\tlet buf = Utils.html`<br /><strong>${p1name} and ${p2name}'s Best-of-${this.bestOf} progress:</strong><br />`;\r\n\t\tbuf += '<table>';\r\n\t\tfor (const p of this.players) {\r\n\t\t\tbuf += Utils.html`<tr><td>${p.name}: </td><td>`;\r\n\t\t\tfor (let i = 0; i < this.bestOf; i++) {\r\n\t\t\t\tif (this.games[i]?.winner === p) {\r\n\t\t\t\t\tbuf += `<i class=\"fa fa-circle\"></i>`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbuf += `<i class=\"fa fa-circle-o\"></i>`;\r\n\t\t\t\t}\r\n\t\t\t\tif (i !== this.bestOf - 1) {\r\n\t\t\t\t\tbuf += ` `;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbuf += `</td></tr>`;\r\n\t\t}\r\n\t\tbuf += `</table><br /><br />`;\r\n\t\tbuf += `<table><tr>`;\r\n\r\n\t\tfor (const i of [0, null, 1]) {\r\n\t\t\tif (i === null) {\r\n\t\t\t\tbuf += `<td></td>`;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tbuf += Utils.html`<td><center><strong>${this.players[i].name}</strong></center></td>`;\r\n\t\t}\r\n\r\n\t\tbuf += `</tr><tr>`;\r\n\r\n\t\tfor (const i of [0, null, 1]) {\r\n\t\t\tif (i === null) {\r\n\t\t\t\tbuf += `<td></td>`;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst p = this.players[i];\r\n\t\t\tconst mirrorLeftPlayer = !i ? ' style=\"transform: scaleX(-1)\"' : \"\";\r\n\t\t\tbuf += `<td><center>`;\r\n\t\t\tbuf += `<img class=\"trainersprite\"${mirrorLeftPlayer} src=\"${p.avatar()}\" />`;\r\n\t\t\tbuf += `</center></td>`;\r\n\t\t}\r\n\r\n\t\tbuf += `</tr><tr>`;\r\n\r\n\t\tfor (const i of [0, null, 1]) {\r\n\t\t\tif (i === null) {\r\n\t\t\t\tbuf += `<td> vs </td>`;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst team = Teams.unpack(this.players[i].options.team || \"\");\r\n\t\t\tif (!team || !Dex.formats.getRuleTable(this.format).has('teampreview')) {\r\n\t\t\t\tbuf += `<td>`;\r\n\t\t\t\tbuf += `<psicon pokemon=\"unknown\" /> `.repeat(3);\r\n\t\t\t\tbuf += `<br />`;\r\n\t\t\t\tbuf += `<psicon pokemon=\"unknown\" /> `.repeat(3);\r\n\t\t\t\tbuf += `</td>`;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst mirrorLeftPlayer = !i ? ' style=\"transform: scaleX(-1)\"' : \"\";\r\n\t\t\tbuf += `<td>`;\r\n\t\t\tfor (const [j, set] of team.entries()) {\r\n\t\t\t\tif (j % 3 === 0 && j > 1) buf += `<br />`;\r\n\t\t\t\tbuf += `<psicon pokemon=\"${set.species}\"${mirrorLeftPlayer} />`;\r\n\t\t\t}\r\n\t\t\tbuf += `</td>`;\r\n\t\t}\r\n\t\tbuf += `</tr></table>`;\r\n\t\tthis.room.add(`|fieldhtml|<center>${buf}</center>`);\r\n\r\n\t\tbuf = this.games.map(({ room, winner }, index) => {\r\n\t\t\tlet progress = `being played`;\r\n\t\t\tif (winner) progress = Utils.html`won by ${winner.name}`;\r\n\t\t\tif (winner === null) progress = `tied`;\r\n\t\t\treturn Utils.html`<p>Game ${index + 1}: <a href=\"/${room.roomid}\"><strong>${progress}</strong></a></p>`;\r\n\t\t}).join('');\r\n\t\tif (this.winner) {\r\n\t\t\tbuf += Utils.html`<p>${this.winner.name} won!</p>`;\r\n\t\t} else if (this.winner === null) {\r\n\t\t\tbuf += `<p>The battle was tied.</p>`;\r\n\t\t}\r\n\t\tthis.room.add(`|controlshtml|<center>${buf}</center>`);\r\n\t\tthis.room.update();\r\n\t}\r\n\r\n\toverride startTimer() {\r\n\t\tthis.needsTimer = true;\r\n\t\tfor (const { room } of this.games) {\r\n\t\t\troom.battle?.timer.start();\r\n\t\t}\r\n\t}\r\n\r\n\toverride onBattleWin(room: Room, winnerid: ID) {\r\n\t\tif (this.ended) return; // can happen if the bo3 is destroyed fsr\r\n\r\n\t\tconst winner = winnerid ? this.playerTable[winnerid] : null;\r\n\t\tthis.games[this.games.length - 1].winner = winner;\r\n\t\tif (winner) {\r\n\t\t\twinner.wins++;\r\n\t\t\tconst loserPlayer = room.battle!.players.find(p => p.num !== winner.num);\r\n\t\t\tif (loserPlayer && loserPlayer.dcSecondsLeft <= 0) { // disconnection means opp wins the set\r\n\t\t\t\treturn this.forfeit(loserPlayer.name, ` lost the series due to inactivity.`);\r\n\t\t\t}\r\n\t\t\tthis.room.add(Utils.html`|html|${winner.name} won game ${this.games.length}!`).update();\r\n\t\t\tif (winner.wins >= this.winThreshold) {\r\n\t\t\t\treturn this.end(winner.id);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.ties++;\r\n\t\t\tthis.winThreshold = Math.floor((this.bestOf - this.ties) / 2) + 1;\r\n\t\t\tthis.room.add(`|html|Game ${this.games.length} was a tie.`).update();\r\n\t\t}\r\n\t\tif (this.games.length >= this.bestOf) {\r\n\t\t\treturn this.end(''); // overall tie\r\n\t\t}\r\n\r\n\t\t// no one has won, skip onwards\r\n\t\tthis.promptNextGame(room);\r\n\t}\r\n\tpromptNextGame(room: Room) {\r\n\t\tif (!room.battle || this.winner) return; // ???\r\n\t\tthis.updateDisplay();\r\n\t\tthis.waitingBattle = room;\r\n\t\tconst now = Date.now();\r\n\t\tthis.nextBattleTimerEnd = now + BEST_OF_IN_BETWEEN_TIME * 1000;\r\n\t\tfor (const player of this.players) {\r\n\t\t\tplayer.ready = false;\r\n\t\t\tconst dcAutoloseTime = now + room.battle.players[player.num - 1].dcSecondsLeft * 1000;\r\n\t\t\tif (dcAutoloseTime < this.nextBattleTimerEnd) {\r\n\t\t\t\tplayer.dcAutoloseTime = dcAutoloseTime;\r\n\t\t\t}\r\n\t\t\tplayer.updateReadyButton();\r\n\t\t}\r\n\t\tthis.nextBattleTimer = setInterval(() => this.pokeNextBattleTimer(), 10000);\r\n\t}\r\n\tpokeNextBattleTimer() {\r\n\t\tif (!this.nextBattleTimerEnd || !this.nextBattleTimer) return; // ??\r\n\t\tif (Date.now() >= this.nextBattleTimerEnd) {\r\n\t\t\treturn this.nextGame();\r\n\t\t}\r\n\t\tfor (const p of this.players) {\r\n\t\t\tif (!p.ready) {\r\n\t\t\t\tconst now = Date.now() - 100; // fudge to make rounding work better\r\n\t\t\t\tif (p.dcAutoloseTime && now > p.dcAutoloseTime) {\r\n\t\t\t\t\treturn this.forfeit(p.name, ` lost the series due to inactivity.`);\r\n\t\t\t\t}\r\n\t\t\t\tconst message = (p.dcAutoloseTime ?\r\n\t\t\t\t\t`|inactive|${p.name} has ${Chat.toDurationString(p.dcAutoloseTime - now)} to reconnect!` :\r\n\t\t\t\t\t`|inactive|${p.name} has ${Chat.toDurationString(this.nextBattleTimerEnd - now)} to confirm battle start!`\r\n\t\t\t\t);\r\n\t\t\t\tthis.waitingBattle?.add(message);\r\n\t\t\t\tthis.room.add(message);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.waitingBattle?.update();\r\n\t\tthis.room.update();\r\n\t}\r\n\tconfirmReady(user: User) {\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tif (!player) {\r\n\t\t\tthrow new Chat.ErrorMessage(\"You aren't a player in this best-of set.\");\r\n\t\t}\r\n\t\tif (!this.waitingBattle) {\r\n\t\t\tthrow new Chat.ErrorMessage(\"The battle is not currently waiting for ready confirmation.\");\r\n\t\t}\r\n\r\n\t\tplayer.ready = true;\r\n\t\tplayer.updateReadyButton();\r\n\t\tconst readyMsg = `||${player.name} is ready for game ${this.games.length + 1}.`;\r\n\t\tthis.waitingBattle.add(readyMsg).update();\r\n\t\tthis.room.add(readyMsg).update();\r\n\t\tif (this.players.every(p => p.ready)) {\r\n\t\t\tthis.nextGame();\r\n\t\t}\r\n\t}\r\n\toverride setEnded() {\r\n\t\tthis.clearWaiting();\r\n\t\tsuper.setEnded();\r\n\t}\r\n\tend(winnerid: ID) {\r\n\t\tif (this.ended) return;\r\n\t\tthis.setEnded();\r\n\t\tthis.room.add(`|allowleave|`).update();\r\n\t\tconst winner = winnerid ? this.playerTable[winnerid] : null;\r\n\t\tthis.winner = winner;\r\n\t\tif (winner) {\r\n\t\t\tthis.room.add(`|win|${winner.name}`);\r\n\t\t} else {\r\n\t\t\tthis.room.add(`|tie`);\r\n\t\t}\r\n\t\tthis.updateDisplay();\r\n\t\tthis.room.update();\r\n\t\tconst p1 = this.players[0];\r\n\t\tconst p2 = this.players[1];\r\n\t\tthis.score = this.players.map(p => p.wins);\r\n\t\tthis.room.parent?.game?.onBattleWin?.(this.room, winnerid);\r\n\t\t// run elo stuff here\r\n\t\tlet p1score = 0.5;\r\n\t\tif (winner === p1) {\r\n\t\t\tp1score = 1;\r\n\t\t} else if (winner === p2) {\r\n\t\t\tp1score = 0;\r\n\t\t}\r\n\r\n\t\tconst { rated, room } = this.games[this.games.length - 1];\r\n\t\tif (rated) {\r\n\t\t\tvoid room.battle?.updateLadder(p1score, winnerid);\r\n\t\t}\r\n\t}\r\n\toverride forfeit(user: User | string, message = '') {\r\n\t\tconst userid = (typeof user !== 'string') ? user.id : toID(user);\r\n\r\n\t\tconst loser = this.playerTable[userid];\r\n\t\tif (loser) this.forfeitPlayer(loser, message);\r\n\t}\r\n\tforfeitPlayer(loser: BestOfPlayer, message = '') {\r\n\t\tif (this.ended || this.winner) return false;\r\n\r\n\t\tthis.winner = this.players.find(p => p !== loser)!;\r\n\t\tthis.room.add(`||${loser.name}${message || ' forfeited.'}`);\r\n\t\tthis.end(this.winner.id);\r\n\r\n\t\tconst lastBattle = this.games[this.games.length - 1].room.battle;\r\n\t\tif (lastBattle && !lastBattle.ended) lastBattle.forfeit(loser.id, message);\r\n\t\treturn true;\r\n\t}\r\n\toverride destroy() {\r\n\t\tthis.setEnded();\r\n\t\tfor (const { room } of this.games) room.expire();\r\n\t\tthis.games = [];\r\n\t\tfor (const p of this.players) p.destroy();\r\n\t\tthis.players = [];\r\n\t\tthis.playerTable = {};\r\n\t\tthis.winner = null;\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["button"]
}
