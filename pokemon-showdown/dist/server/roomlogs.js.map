{
  "version": 3,
  "sources": ["../../server/roomlogs.ts"],
  "sourcesContent": ["/**\r\n * Roomlogs\r\n * Pokemon Showdown - http://pokemonshowdown.com/\r\n *\r\n * This handles data storage for rooms.\r\n *\r\n * @license MIT\r\n */\r\n\r\nimport { FS, Utils, type Streams } from '../lib';\r\nimport { PGDatabase, SQL, type SQLStatement } from '../lib/database';\r\nimport type { PartialModlogEntry } from './modlog';\r\n\r\ninterface RoomlogOptions {\r\n\tisMultichannel?: boolean;\r\n\tnoAutoTruncate?: boolean;\r\n\tnoLogTimes?: boolean;\r\n}\r\n\r\ninterface RoomlogRow {\r\n\ttype: string;\r\n\troomid: string;\r\n\tuserid: string | null;\r\n\ttime: Date;\r\n\tlog: string;\r\n\t// tsvector, really don't use\r\n\tcontent: string | null;\r\n}\r\n\r\nexport const roomlogDB = (() => {\r\n\tif (!global.Config || !Config.replaysdb || Config.disableroomlogdb) return null;\r\n\treturn new PGDatabase(Config.replaysdb);\r\n})();\r\nexport const roomlogTable = roomlogDB?.getTable<RoomlogRow>('roomlogs');\r\n\r\n/**\r\n * Most rooms have three logs:\r\n * - scrollback\r\n * - roomlog\r\n * - modlog\r\n * This class keeps track of all three.\r\n *\r\n * The scrollback is stored in memory, and is the log you get when you\r\n * join the room. It does not get moderator messages.\r\n *\r\n * The modlog is stored in\r\n * `logs/modlog/modlog_<ROOMID>.txt`\r\n * It contains moderator messages, formatted for ease of search.\r\n * Direct modlog access is handled in server/modlog/; this file is just\r\n * a wrapper to make other code more readable.\r\n *\r\n * The roomlog is stored in\r\n * `logs/chat/<ROOMID>/<YEAR>-<MONTH>/<YEAR>-<MONTH>-<DAY>.txt`\r\n * It contains (nearly) everything.\r\n */\r\nexport class Roomlog {\r\n\t/**\r\n\t * Battle rooms are multichannel, which means their logs are split\r\n\t * into four channels, public, p1, p2, full.\r\n\t */\r\n\treadonly isMultichannel: boolean;\r\n\t/**\r\n\t * Chat rooms auto-truncate, which means it only stores the recent\r\n\t * messages, if there are more.\r\n\t */\r\n\treadonly noAutoTruncate: boolean;\r\n\t/**\r\n\t * Chat rooms include timestamps.\r\n\t */\r\n\treadonly noLogTimes: boolean;\r\n\troomid: RoomID;\r\n\t/**\r\n\t * Scrollback log\r\n\t */\r\n\tlog: string[];\r\n\tvisibleMessageCount = 0;\r\n\tbroadcastBuffer: string[];\r\n\t/**\r\n\t * undefined = uninitialized,\r\n\t * null = disabled\r\n\t */\r\n\troomlogStream?: Streams.WriteStream | null;\r\n\t/**\r\n\t * Takes precedence over roomlogStream if it exists.\r\n\t */\r\n\troomlogTable: typeof roomlogTable;\r\n\troomlogFilename: string;\r\n\r\n\tnumTruncatedLines: number;\r\n\tconstructor(room: BasicRoom, options: RoomlogOptions = {}) {\r\n\t\tthis.roomid = room.roomid;\r\n\r\n\t\tthis.isMultichannel = !!options.isMultichannel;\r\n\t\tthis.noAutoTruncate = !!options.noAutoTruncate;\r\n\t\tthis.noLogTimes = !!options.noLogTimes;\r\n\r\n\t\tthis.log = [];\r\n\t\tthis.broadcastBuffer = [];\r\n\r\n\t\tthis.roomlogStream = undefined;\r\n\t\tthis.roomlogFilename = '';\r\n\r\n\t\tthis.numTruncatedLines = 0;\r\n\r\n\t\tthis.setupRoomlogStream();\r\n\t}\r\n\tgetScrollback(channel = 0) {\r\n\t\tlet log = this.log;\r\n\t\tif (!this.noLogTimes) log = [`|:|${~~(Date.now() / 1000)}`].concat(log);\r\n\t\tif (!this.isMultichannel) {\r\n\t\t\treturn log.join('\\n') + '\\n';\r\n\t\t}\r\n\t\tlog = [];\r\n\t\tfor (let i = 0; i < this.log.length; ++i) {\r\n\t\t\tconst line = this.log[i];\r\n\t\t\tconst split = /\\|split\\|p(\\d)/g.exec(line);\r\n\t\t\tif (split) {\r\n\t\t\t\tconst canSeePrivileged = (channel === Number(split[1]) || channel === -1);\r\n\t\t\t\tconst ownLine = this.log[i + (canSeePrivileged ? 1 : 2)];\r\n\t\t\t\tif (ownLine) log.push(ownLine);\r\n\t\t\t\ti += 2;\r\n\t\t\t} else {\r\n\t\t\t\tlog.push(line);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn log.join('\\n') + '\\n';\r\n\t}\r\n\tsetupRoomlogStream() {\r\n\t\tif (this.roomlogStream === null) return;\r\n\t\tif (!Config.logchat || this.roomid.startsWith('battle-') || this.roomid.startsWith('game-')) {\r\n\t\t\tthis.roomlogStream = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (roomlogTable) {\r\n\t\t\tthis.roomlogTable = roomlogTable;\r\n\t\t\tthis.roomlogStream = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst date = new Date();\r\n\t\tconst dateString = Chat.toTimestamp(date).split(' ')[0];\r\n\t\tconst monthString = dateString.split('-', 2).join('-');\r\n\t\tconst basepath = `chat/${this.roomid}/`;\r\n\t\tconst relpath = `${monthString}/${dateString}.txt`;\r\n\r\n\t\tif (relpath === this.roomlogFilename) return;\r\n\r\n\t\tMonitor.logPath(basepath + monthString).mkdirpSync();\r\n\t\tthis.roomlogFilename = relpath;\r\n\t\tif (this.roomlogStream) void this.roomlogStream.writeEnd();\r\n\t\tthis.roomlogStream = Monitor.logPath(basepath + relpath).createAppendStream();\r\n\t\t// Create a symlink to today's lobby log.\r\n\t\t// These operations need to be synchronous, but it's okay\r\n\t\t// because this code is only executed once every 24 hours.\r\n\t\tconst link0 = basepath + 'today.txt.0';\r\n\t\tMonitor.logPath(link0).unlinkIfExistsSync();\r\n\t\ttry {\r\n\t\t\tMonitor.logPath(link0).symlinkToSync(relpath); // intentionally a relative link\r\n\t\t\tMonitor.logPath(link0).renameSync(basepath + 'today.txt');\r\n\t\t} catch {} // OS might not support symlinks or atomic rename\r\n\t\tif (!Roomlogs.rollLogTimer) Roomlogs.rollLogs();\r\n\t}\r\n\tadd(message: string) {\r\n\t\tthis.roomlog(message);\r\n\t\t// |uhtml gets both uhtml and uhtmlchange\r\n\t\t// which are visible and so should be counted\r\n\t\tif (['|c|', '|c:|', '|raw|', '|html|', '|uhtml'].some(k => message.startsWith(k))) {\r\n\t\t\tthis.visibleMessageCount++;\r\n\t\t}\r\n\t\tmessage = this.withTimestamp(message);\r\n\t\tthis.log.push(message);\r\n\t\tthis.broadcastBuffer.push(message);\r\n\t\treturn this;\r\n\t}\r\n\tprivate withTimestamp(message: string) {\r\n\t\tif (!this.noLogTimes && message.startsWith('|c|')) {\r\n\t\t\treturn `|c:|${Math.trunc(Date.now() / 1000)}|${message.slice(3)}`;\r\n\t\t} else {\r\n\t\t\treturn message;\r\n\t\t}\r\n\t}\r\n\thasUsername(username: string) {\r\n\t\tconst userid = toID(username);\r\n\t\tfor (const line of this.log) {\r\n\t\t\tif (line.startsWith('|c:|')) {\r\n\t\t\t\tconst curUserid = toID(line.split('|', 4)[3]);\r\n\t\t\t\tif (curUserid === userid) return true;\r\n\t\t\t} else if (line.startsWith('|c|')) {\r\n\t\t\t\tconst curUserid = toID(line.split('|', 3)[2]);\r\n\t\t\t\tif (curUserid === userid) return true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tclearText(userids: ID[], lineCount = 0) {\r\n\t\tconst cleared: ID[] = [];\r\n\t\tconst clearAll = (lineCount === 0);\r\n\t\tthis.log = this.log.reverse().filter(line => {\r\n\t\t\tconst parsed = this.parseChatLine(line);\r\n\t\t\tif (parsed) {\r\n\t\t\t\tconst userid = toID(parsed.user);\r\n\t\t\t\tif (userids.includes(userid)) {\r\n\t\t\t\t\tif (!cleared.includes(userid)) cleared.push(userid);\r\n\t\t\t\t\t// Don't remove messages in battle rooms to preserve evidence\r\n\t\t\t\t\tif (!this.roomlogStream && !this.roomlogTable) return true;\r\n\t\t\t\t\tif (clearAll) return false;\r\n\t\t\t\t\tif (lineCount > 0) {\r\n\t\t\t\t\t\tlineCount--;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}).reverse();\r\n\t\treturn cleared;\r\n\t}\r\n\tuhtmlchange(name: string, message: string) {\r\n\t\tconst originalStart = '|uhtml|' + name + '|';\r\n\t\tconst fullMessage = originalStart + message;\r\n\t\tfor (const [i, line] of this.log.entries()) {\r\n\t\t\tif (line.startsWith(originalStart)) {\r\n\t\t\t\tthis.log[i] = fullMessage;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.broadcastBuffer.push(fullMessage);\r\n\t}\r\n\tattributedUhtmlchange(user: User, name: string, message: string) {\r\n\t\tconst start = `/uhtmlchange ${name},`;\r\n\t\tconst fullMessage = this.withTimestamp(`|c|${user.getIdentity()}|${start}${message}`);\r\n\t\tlet matched = false;\r\n\t\tfor (const [i, line] of this.log.entries()) {\r\n\t\t\tif (this.parseChatLine(line)?.message.startsWith(start)) {\r\n\t\t\t\tthis.log[i] = fullMessage;\r\n\t\t\t\tmatched = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!matched) this.log.push(fullMessage);\r\n\t\tthis.broadcastBuffer.push(fullMessage);\r\n\t}\r\n\tparseChatLine(line: string) {\r\n\t\tconst prefixes: [string, number][] = [['|c:|', 4], ['|c|', 3]];\r\n\t\tfor (const [messageStart, section] of prefixes) {\r\n\t\t\t// const messageStart = !this.noLogTimes ? '|c:|' : '|c|';\r\n\t\t\t// const section = !this.noLogTimes ? 4 : 3; // ['', 'c' timestamp?, author, message]\r\n\t\t\tif (line.startsWith(messageStart)) {\r\n\t\t\t\tconst parts = Utils.splitFirst(line, '|', section);\r\n\t\t\t\treturn { user: parts[section - 1], message: parts[section] };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\troomlog(message: string, date = new Date()) {\r\n\t\tif (!Config.logchat) return;\r\n\t\tmessage = message.replace(/<img[^>]* src=\"data:image\\/png;base64,[^\">]+\"[^>]*>/g, '[img]');\r\n\t\tif (this.roomlogTable) {\r\n\t\t\tconst chatData = this.parseChatLine(message);\r\n\t\t\tconst type = message.split('|')[1] || \"\";\r\n\t\t\tvoid this.insertLog(SQL`INSERT INTO roomlogs (${{\r\n\t\t\t\ttype,\r\n\t\t\t\troomid: this.roomid,\r\n\t\t\t\tuserid: toID(chatData?.user) || null,\r\n\t\t\t\ttime: SQL`now()`,\r\n\t\t\t\tlog: message,\r\n\t\t\t}})`);\r\n\r\n\t\t\tconst dateStr = Chat.toTimestamp(date).split(' ')[0];\r\n\t\t\tvoid this.insertLog(SQL`INSERT INTO roomlog_dates (${{\r\n\t\t\t\troomid: this.roomid,\r\n\t\t\t\tmonth: dateStr.slice(0, -3),\r\n\t\t\t\tdate: dateStr,\r\n\t\t\t}}) ON CONFLICT (roomid, date) DO NOTHING;`);\r\n\t\t} else if (this.roomlogStream) {\r\n\t\t\tconst timestamp = Chat.toTimestamp(date).split(' ')[1] + ' ';\r\n\t\t\tvoid this.roomlogStream.write(timestamp + message + '\\n');\r\n\t\t}\r\n\t}\r\n\tprivate async insertLog(query: SQLStatement, ignoreFailure = false, retries = 3): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait this.roomlogTable?.query(query);\r\n\t\t} catch (e: any) {\r\n\t\t\tif (e?.code === '42P01') { // table not found\r\n\t\t\t\tawait roomlogDB!._query(FS('databases/schemas/roomlogs.sql').readSync(), []);\r\n\t\t\t\treturn this.insertLog(query, ignoreFailure, retries);\r\n\t\t\t}\r\n\t\t\t// connection terminated / transient errors\r\n\t\t\tif (\r\n\t\t\t\t!ignoreFailure &&\r\n\t\t\t\tretries > 0 &&\r\n\t\t\t\te.message?.includes('Connection terminated unexpectedly')\r\n\t\t\t) {\r\n\t\t\t\t// delay before retrying\r\n\t\t\t\tawait new Promise(resolve => { setTimeout(resolve, 2000); });\r\n\t\t\t\treturn this.insertLog(query, ignoreFailure, retries - 1);\r\n\t\t\t}\r\n\t\t\t// crashlog for all other errors\r\n\t\t\tconst [q, vals] = roomlogDB!._resolveSQL(query);\r\n\t\t\tMonitor.crashlog(e, 'a roomlog database query', {\r\n\t\t\t\tquery: q, values: vals,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tmodlog(entry: PartialModlogEntry, overrideID?: string) {\r\n\t\tvoid Rooms.Modlog.write(this.roomid, entry, overrideID);\r\n\t}\r\n\tasync rename(newID: RoomID): Promise<true> {\r\n\t\tawait Rooms.Modlog.rename(this.roomid, newID);\r\n\t\tconst roomlogStreamExisted = this.roomlogStream !== null;\r\n\t\tawait this.destroy();\r\n\t\tif (this.roomlogTable) {\r\n\t\t\tawait this.roomlogTable.updateAll({ roomid: newID })`WHERE roomid = ${this.roomid}`;\r\n\t\t} else {\r\n\t\t\tconst roomlogPath = `chat`;\r\n\t\t\tconst [roomlogExists, newRoomlogExists] = await Promise.all([\r\n\t\t\t\tMonitor.logPath(roomlogPath + `/${this.roomid}`).exists(),\r\n\t\t\t\tMonitor.logPath(roomlogPath + `/${newID}`).exists(),\r\n\t\t\t]);\r\n\t\t\tif (roomlogExists && !newRoomlogExists) {\r\n\t\t\t\tawait Monitor.logPath(roomlogPath + `/${this.roomid}`).rename(Monitor.logPath(roomlogPath + `/${newID}`).path);\r\n\t\t\t}\r\n\t\t\tif (roomlogStreamExisted) {\r\n\t\t\t\tthis.roomlogStream = undefined;\r\n\t\t\t\tthis.roomlogFilename = \"\";\r\n\t\t\t\tthis.setupRoomlogStream();\r\n\t\t\t}\r\n\t\t}\r\n\t\tRoomlogs.roomlogs.set(newID, this);\r\n\t\tthis.roomid = newID;\r\n\t\treturn true;\r\n\t}\r\n\tstatic rollLogs(this: void) {\r\n\t\tif (Roomlogs.rollLogTimer === true) return;\r\n\t\tif (Roomlogs.rollLogTimer) {\r\n\t\t\tclearTimeout(Roomlogs.rollLogTimer);\r\n\t\t}\r\n\t\tRoomlogs.rollLogTimer = true;\r\n\t\tfor (const log of Roomlogs.roomlogs.values()) {\r\n\t\t\tlog.setupRoomlogStream();\r\n\t\t}\r\n\t\tconst time = Date.now();\r\n\t\tconst nextMidnight = new Date();\r\n\t\tnextMidnight.setHours(24, 0, 0, 0);\r\n\t\tRoomlogs.rollLogTimer = setTimeout(() => Roomlog.rollLogs(), nextMidnight.getTime() - time);\r\n\t}\r\n\ttruncate() {\r\n\t\tif (this.noAutoTruncate) return;\r\n\t\tif (this.log.length > 100) {\r\n\t\t\tconst truncationLength = this.log.length - 100;\r\n\t\t\tthis.log.splice(0, truncationLength);\r\n\t\t\tthis.numTruncatedLines += truncationLength;\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Returns the total number of lines in the roomlog, including truncated lines.\r\n\t */\r\n\tgetLineCount(onlyVisible = true) {\r\n\t\treturn (onlyVisible ? this.visibleMessageCount : this.log.length) + this.numTruncatedLines;\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tconst promises = [];\r\n\t\tif (this.roomlogStream) {\r\n\t\t\tpromises.push(this.roomlogStream.writeEnd());\r\n\t\t\tthis.roomlogStream = null;\r\n\t\t}\r\n\t\tRoomlogs.roomlogs.delete(this.roomid);\r\n\t\treturn Promise.all(promises);\r\n\t}\r\n}\r\n\r\nconst roomlogs = new Map<string, Roomlog>();\r\n\r\nfunction createRoomlog(room: BasicRoom, options = {}) {\r\n\tlet roomlog = Roomlogs.roomlogs.get(room.roomid);\r\n\tif (roomlog) throw new Error(`Roomlog ${room.roomid} already exists`);\r\n\r\n\troomlog = new Roomlog(room, options);\r\n\tRoomlogs.roomlogs.set(room.roomid, roomlog);\r\n\treturn roomlog;\r\n}\r\n\r\nexport const Roomlogs = {\r\n\tcreate: createRoomlog,\r\n\tRoomlog,\r\n\troomlogs,\r\n\tdb: roomlogDB,\r\n\ttable: roomlogTable,\r\n\r\n\trollLogs: Roomlog.rollLogs,\r\n\r\n\trollLogTimer: null as NodeJS.Timeout | true | null,\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
