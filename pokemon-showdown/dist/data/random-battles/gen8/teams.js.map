{
  "version": 3,
  "sources": ["../../../../data/random-battles/gen8/teams.ts"],
  "sourcesContent": ["import { Dex, toID } from '../../../sim/dex';\r\nimport { Utils } from '../../../lib';\r\nimport { PRNG, type PRNGSeed } from '../../../sim/prng';\r\nimport { type RuleTable } from '../../../sim/dex-formats';\r\nimport { Tags } from './../../tags';\r\n\r\nexport interface TeamData {\r\n\ttypeCount: { [k: string]: number };\r\n\ttypeComboCount: { [k: string]: number };\r\n\tbaseFormes: { [k: string]: number };\r\n\tmegaCount?: number;\r\n\tzCount?: number;\r\n\thas: { [k: string]: number };\r\n\tforceResult: boolean;\r\n\tweaknesses: { [k: string]: number };\r\n\tresistances: { [k: string]: number };\r\n\tweather?: string;\r\n\teeveeLimCount?: number;\r\n\tgigantamax?: boolean;\r\n}\r\nexport interface BattleFactorySpecies {\r\n\tflags: { limEevee?: 1 };\r\n\tsets: BattleFactorySet[];\r\n}\r\nexport interface OldRandomBattleSpecies {\r\n\tlevel?: number;\r\n\tmoves?: ID[];\r\n\tdoublesLevel?: number;\r\n\tdoublesMoves?: ID[];\r\n\tnoDynamaxMoves?: ID[];\r\n}\r\ninterface BattleFactorySet {\r\n\tspecies: string;\r\n\titem: string;\r\n\tability: string;\r\n\tnature: string;\r\n\tmoves: string[];\r\n\tevs?: Partial<StatsTable>;\r\n\tivs?: Partial<StatsTable>;\r\n}\r\nexport class MoveCounter extends Utils.Multiset<string> {\r\n\tdamagingMoves: Set<Move>;\r\n\tsetupType: string;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.damagingMoves = new Set();\r\n\t\tthis.setupType = '';\r\n\t}\r\n}\r\n\r\ntype MoveEnforcementChecker = (\r\n\tmovePool: string[], moves: Set<string>, abilities: string[], types: Set<string>,\r\n\tcounter: MoveCounter, species: Species, teamDetails: RandomTeamsTypes.TeamDetails\r\n) => boolean;\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\r\n];\r\n// Moves that drop stats:\r\nconst CONTRARY_MOVES = [\r\n\t'closecombat', 'leafstorm', 'overheat', 'superpower', 'vcreate',\r\n];\r\n// Moves that boost Attack:\r\nconst PHYSICAL_SETUP = [\r\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'screech', 'swordsdance',\r\n];\r\n// Moves which boost Special Attack:\r\nconst SPECIAL_SETUP = [\r\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow',\r\n];\r\n// Moves that boost Attack AND Special Attack:\r\nconst MIXED_SETUP = [\r\n\t'clangoroussoul', 'growth', 'happyhour', 'holdhands', 'noretreat', 'shellsmash', 'workup',\r\n];\r\n// Some moves that only boost Speed:\r\nconst SPEED_SETUP = [\r\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish',\r\n];\r\n// Moves that shouldn't be the only STAB moves:\r\nconst NO_STAB = [\r\n\t'accelerock', 'aquajet', 'beakblast', 'bounce', 'breakingswipe', 'chatter', 'clearsmog', 'dragontail', 'eruption', 'explosion',\r\n\t'fakeout', 'firstimpression', 'flamecharge', 'flipturn', 'iceshard', 'icywind', 'incinerate', 'machpunch',\r\n\t'meteorbeam', 'pluck', 'pursuit', 'quickattack', 'reversal', 'selfdestruct', 'skydrop', 'snarl', 'suckerpunch', 'uturn', 'watershuriken',\r\n\t'vacuumwave', 'voltswitch', 'waterspout',\r\n];\r\n// Hazard-setting moves\r\nconst HAZARDS = [\r\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\r\n];\r\n\r\nfunction sereneGraceBenefits(move: Move) {\r\n\treturn move.secondary?.chance && move.secondary.chance >= 20 && move.secondary.chance < 100;\r\n}\r\n\r\nexport class RandomGen8Teams {\r\n\treadonly dex: ModdedDex;\r\n\tgen: number;\r\n\tfactoryTier: string;\r\n\tformat: Format;\r\n\tprng: PRNG;\r\n\tnoStab: string[];\r\n\tpriorityPokemon: string[];\r\n\treadonly maxTeamSize: number;\r\n\treadonly adjustLevel: number | null;\r\n\treadonly maxMoveCount: number;\r\n\treadonly forceMonotype: string | undefined;\r\n\r\n\trandomData: { [species: string]: OldRandomBattleSpecies } = require('./data.json');\r\n\r\n\t/**\r\n\t * Checkers for move enforcement based on a Pok\u00E9mon's types or other factors\r\n\t *\r\n\t * returns true to reject one of its other moves to try to roll the forced move, false otherwise.\r\n\t */\r\n\tmoveEnforcementCheckers: { [k: string]: MoveEnforcementChecker };\r\n\r\n\t/** Used by .getPools() */\r\n\tprivate poolsCacheKey: [string | undefined, number | undefined, RuleTable | undefined, boolean] | undefined;\r\n\tprivate cachedPool: number[] | undefined;\r\n\tprivate cachedSpeciesPool: Species[] | undefined;\r\n\r\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\r\n\t\tformat = Dex.formats.get(format);\r\n\t\tthis.dex = Dex.forFormat(format);\r\n\t\tthis.gen = this.dex.gen;\r\n\t\tthis.noStab = NO_STAB;\r\n\t\tthis.priorityPokemon = [];\r\n\r\n\t\tconst ruleTable = Dex.formats.getRuleTable(format);\r\n\t\tthis.maxTeamSize = ruleTable.maxTeamSize;\r\n\t\tthis.adjustLevel = ruleTable.adjustLevel;\r\n\t\tthis.maxMoveCount = ruleTable.maxMoveCount;\r\n\t\tconst forceMonotype = ruleTable.valueRules.get('forcemonotype');\r\n\t\tthis.forceMonotype = forceMonotype && this.dex.types.get(forceMonotype).exists ?\r\n\t\t\tthis.dex.types.get(forceMonotype).name : undefined;\r\n\r\n\t\tthis.factoryTier = '';\r\n\t\tthis.format = format;\r\n\t\tthis.prng = PRNG.get(prng);\r\n\r\n\t\tthis.moveEnforcementCheckers = {\r\n\t\t\tscreens: (movePool, moves, abilities, types, counter, species, teamDetails) => {\r\n\t\t\t\tif (teamDetails.screens) return false;\r\n\t\t\t\treturn (\r\n\t\t\t\t\t(moves.has('lightscreen') && movePool.includes('reflect')) ||\r\n\t\t\t\t\t(moves.has('reflect') && movePool.includes('lightscreen'))\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\trecovery: (movePool, moves, abilities, types, counter, species, teamDetails) => (\r\n\t\t\t\t!!counter.get('Status') &&\r\n\t\t\t\t!counter.setupType &&\r\n\t\t\t\t['morningsun', 'recover', 'roost', 'slackoff', 'softboiled'].some(moveid => movePool.includes(moveid)) &&\r\n\t\t\t\t['healingwish', 'switcheroo', 'trick', 'trickroom'].every(moveid => !moves.has(moveid))\r\n\t\t\t),\r\n\t\t\tmisc: (movePool, moves, abilities, types, counter, species, teamDetails) => {\r\n\t\t\t\tif (movePool.includes('milkdrink') || movePool.includes('quiverdance')) return true;\r\n\t\t\t\treturn movePool.includes('stickyweb') && !counter.setupType && !teamDetails.stickyWeb;\r\n\t\t\t},\r\n\t\t\tlead: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\tmovePool.includes('stealthrock') &&\r\n\t\t\t\t!!counter.get('Status') &&\r\n\t\t\t\t!counter.setupType &&\r\n\t\t\t\t!counter.get('speedsetup') &&\r\n\t\t\t\t!moves.has('substitute')\r\n\t\t\t),\r\n\t\t\tleechseed: (movePool, moves) => (\r\n\t\t\t\t!moves.has('calmmind') &&\r\n\t\t\t\t['protect', 'substitute', 'spikyshield'].some(m => movePool.includes(m))\r\n\t\t\t),\r\n\t\t\tBug: movePool => movePool.includes('megahorn'),\r\n\t\t\tDark: (movePool, moves, abilities, types, counter) => {\r\n\t\t\t\tif (!counter.get('Dark')) return true;\r\n\t\t\t\treturn moves.has('suckerpunch') && (movePool.includes('knockoff') || movePool.includes('wickedblow'));\r\n\t\t\t},\r\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Dragon') &&\r\n\t\t\t\t!moves.has('dragonascent') &&\r\n\t\t\t\t!moves.has('substitute') &&\r\n\t\t\t\t!(moves.has('rest') && moves.has('sleeptalk'))\r\n\t\t\t),\r\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric') || movePool.includes('thunder'),\r\n\t\t\tFairy: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Fairy') &&\r\n\t\t\t\t['dazzlinggleam', 'moonblast', 'fleurcannon', 'playrough', 'strangesteam'].some(moveid => movePool.includes(moveid))\r\n\t\t\t),\r\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting') || !counter.get('stab'),\r\n\t\t\tFire: (movePool, moves, abilities, types, counter, species) => {\r\n\t\t\t\t// Entei should never reject Extreme Speed even if Flare Blitz could be rolled instead\r\n\t\t\t\tconst enteiException = moves.has('extremespeed') && species.id === 'entei';\r\n\t\t\t\treturn !moves.has('bellydrum') && (!counter.get('Fire') || (!enteiException && movePool.includes('flareblitz')));\r\n\t\t\t},\r\n\t\t\tFlying: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Flying') && !types.has('Dragon') && [\r\n\t\t\t\t\t'airslash', 'bravebird', 'dualwingbeat', 'oblivionwing',\r\n\t\t\t\t].some(moveid => movePool.includes(moveid))\r\n\t\t\t),\r\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => {\r\n\t\t\t\tif (moves.has('nightshade')) return false;\r\n\t\t\t\tif (!counter.get('Ghost') && !types.has('Dark')) return true;\r\n\t\t\t\tif (movePool.includes('poltergeist')) return true;\r\n\t\t\t\treturn movePool.includes('spectralthief') && !counter.get('Dark');\r\n\t\t\t},\r\n\t\t\tGrass: (movePool, moves, abilities, types, counter, species) => {\r\n\t\t\t\tif (movePool.includes('leafstorm') || movePool.includes('grassyglide')) return true;\r\n\t\t\t\treturn !counter.get('Grass') && species.baseStats.atk >= 100;\r\n\t\t\t},\r\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\r\n\t\t\tIce: (movePool, moves, abilities, types, counter) => {\r\n\t\t\t\tif (!counter.get('Ice')) return true;\r\n\t\t\t\tif (movePool.includes('iciclecrash')) return true;\r\n\t\t\t\treturn abilities.includes('Snow Warning') && movePool.includes('blizzard');\r\n\t\t\t},\r\n\t\t\tNormal: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t(abilities.includes('Guts') && movePool.includes('facade')) ||\r\n\t\t\t\t(abilities.includes('Pixilate') && !counter.get('Normal'))\r\n\t\t\t),\r\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => {\r\n\t\t\t\tif (counter.get('Poison')) return false;\r\n\t\t\t\treturn types.has('Ground') || types.has('Psychic') || types.has('Grass') || !!counter.setupType || movePool.includes('gunkshot');\r\n\t\t\t},\r\n\t\t\tPsychic: (movePool, moves, abilities, types, counter) => {\r\n\t\t\t\tif (counter.get('Psychic')) return false;\r\n\t\t\t\tif (types.has('Ghost') || types.has('Steel')) return false;\r\n\t\t\t\treturn abilities.includes('Psychic Surge') || !!counter.setupType || movePool.includes('psychicfangs');\r\n\t\t\t},\r\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => !counter.get('Rock') && species.baseStats.atk >= 80,\r\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species) => {\r\n\t\t\t\tif (species.baseStats.atk < 95) return false;\r\n\t\t\t\tif (movePool.includes('meteormash')) return true;\r\n\t\t\t\treturn !counter.get('Steel');\r\n\t\t\t},\r\n\t\t\tWater: (movePool, moves, abilities, types, counter, species) => {\r\n\t\t\t\tif (!counter.get('Water') && !moves.has('hypervoice')) return true;\r\n\t\t\t\tif (['hypervoice', 'liquidation', 'surgingstrikes'].some(m => movePool.includes(m))) return true;\r\n\t\t\t\treturn abilities.includes('Huge Power') && movePool.includes('aquajet');\r\n\t\t\t},\r\n\t\t};\r\n\t\tthis.poolsCacheKey = undefined;\r\n\t\tthis.cachedPool = undefined;\r\n\t\tthis.cachedSpeciesPool = undefined;\r\n\t}\r\n\r\n\tsetSeed(prng?: PRNG | PRNGSeed) {\r\n\t\tthis.prng = PRNG.get(prng);\r\n\t}\r\n\r\n\tgetTeam(options?: PlayerOptions | null): PokemonSet[] {\r\n\t\tconst generatorName = (\r\n\t\t\ttypeof this.format.team === 'string' && this.format.team.startsWith('random')\r\n\t\t) ? this.format.team + 'Team' : '';\r\n\t\t// @ts-expect-error property access\r\n\t\treturn this[generatorName || 'randomTeam'](options);\r\n\t}\r\n\r\n\trandomChance(numerator: number, denominator: number) {\r\n\t\treturn this.prng.randomChance(numerator, denominator);\r\n\t}\r\n\r\n\tsample<T>(items: readonly T[]): T {\r\n\t\treturn this.prng.sample(items);\r\n\t}\r\n\r\n\tsampleIfArray<T>(item: T | T[]): T {\r\n\t\tif (Array.isArray(item)) {\r\n\t\t\treturn this.sample(item);\r\n\t\t}\r\n\t\treturn item;\r\n\t}\r\n\r\n\trandom(m?: number, n?: number) {\r\n\t\treturn this.prng.random(m, n);\r\n\t}\r\n\r\n\t/**\r\n\t * Remove an element from an unsorted array significantly faster\r\n\t * than .splice\r\n\t */\r\n\tfastPop(list: any[], index: number) {\r\n\t\t// If an array doesn't need to be in order, replacing the\r\n\t\t// element at the given index with the removed element\r\n\t\t// is much, much faster than using list.splice(index, 1).\r\n\t\tconst length = list.length;\r\n\t\tif (index < 0 || index >= list.length) {\r\n\t\t\t// sanity check\r\n\t\t\tthrow new Error(`Index ${index} out of bounds for given array`);\r\n\t\t}\r\n\r\n\t\tconst element = list[index];\r\n\t\tlist[index] = list[length - 1];\r\n\t\tlist.pop();\r\n\t\treturn element;\r\n\t}\r\n\r\n\t/**\r\n\t * Remove a random element from an unsorted array and return it.\r\n\t * Uses the battle's RNG if in a battle.\r\n\t */\r\n\tsampleNoReplace(list: any[]) {\r\n\t\tconst length = list.length;\r\n\t\tif (length === 0) return null;\r\n\t\tconst index = this.random(length);\r\n\t\treturn this.fastPop(list, index);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes n random elements from an unsorted array and returns them.\r\n\t * If n is less than the array's length, randomly removes and returns all the elements\r\n\t * in the array (so the returned array could have length < n).\r\n\t */\r\n\tmultipleSamplesNoReplace<T>(list: T[], n: number): T[] {\r\n\t\tconst samples = [];\r\n\t\twhile (samples.length < n && list.length) {\r\n\t\t\tsamples.push(this.sampleNoReplace(list));\r\n\t\t}\r\n\r\n\t\treturn samples;\r\n\t}\r\n\r\n\t/**\r\n\t * Check if user has directly tried to ban/unban/restrict things in a custom battle.\r\n\t * Doesn't count bans nested inside other formats/rules.\r\n\t */\r\n\tprivate hasDirectCustomBanlistChanges() {\r\n\t\tif (!this.format.customRules) return false;\r\n\t\tfor (const rule of this.format.customRules) {\r\n\t\t\tfor (const banlistOperator of ['-', '+', '*']) {\r\n\t\t\t\tif (rule.startsWith(banlistOperator)) return true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Inform user when custom bans are unsupported in a team generator.\r\n\t */\r\n\tprotected enforceNoDirectCustomBanlistChanges() {\r\n\t\tif (this.hasDirectCustomBanlistChanges()) {\r\n\t\t\tthrow new Error(`Custom bans are not currently supported in ${this.format.name}.`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inform user when complex bans are unsupported in a team generator.\r\n\t */\r\n\tprotected enforceNoDirectComplexBans() {\r\n\t\tif (!this.format.customRules) return false;\r\n\t\tfor (const rule of this.format.customRules) {\r\n\t\t\tif (rule.includes('+') && !rule.startsWith('+')) {\r\n\t\t\t\tthrow new Error(`Complex bans are not currently supported in ${this.format.name}.`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validate set element pool size is sufficient to support size requirements after simple bans.\r\n\t */\r\n\tprivate enforceCustomPoolSizeNoComplexBans(\r\n\t\teffectTypeName: string,\r\n\t\tbasicEffectPool: BasicEffect[],\r\n\t\trequiredCount: number,\r\n\t\trequiredCountExplanation: string\r\n\t) {\r\n\t\tif (basicEffectPool.length >= requiredCount) return;\r\n\t\tthrow new Error(`Legal ${effectTypeName} count is insufficient to support ${requiredCountExplanation} (${basicEffectPool.length} / ${requiredCount}).`);\r\n\t}\r\n\r\n\tunrejectableMovesInSingles(move: Move) {\r\n\t\t// These moves cannot be rejected in favor of a forced move in singles\r\n\t\treturn (move.category !== 'Status' || !move.flags.heal) && ![\r\n\t\t\t'facade', 'leechseed', 'lightscreen', 'reflect', 'sleeptalk', 'spore', 'substitute', 'switcheroo',\r\n\t\t\t'teleport', 'toxic', 'trick',\r\n\t\t].includes(move.id);\r\n\t}\r\n\r\n\tunrejectableMovesInDoubles(move: Move) {\r\n\t\t// These moves cannot be rejected in favor of a forced move in doubles\r\n\t\treturn move.id !== 'bodypress';\r\n\t}\r\n\r\n\trandomCCTeam(): RandomTeamsTypes.RandomSet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst dex = this.dex;\r\n\t\tconst team = [];\r\n\r\n\t\tconst natures = this.dex.natures.all();\r\n\t\tconst items = this.dex.items.all();\r\n\r\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined, undefined, true);\r\n\r\n\t\tfor (let forme of randomN) {\r\n\t\t\tlet species = dex.species.get(forme);\r\n\t\t\tif (species.isNonstandard) species = dex.species.get(species.baseSpecies);\r\n\r\n\t\t\t// Random legal item\r\n\t\t\tlet item = '';\r\n\t\t\tif (this.gen >= 2) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\titem = this.sample(items).name;\r\n\t\t\t\t} while (this.dex.items.get(item).gen > this.gen || this.dex.items.get(item).isNonstandard);\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure forme is legal\r\n\t\t\tif (species.battleOnly) {\r\n\t\t\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t\t\tspecies = dex.species.get(species.battleOnly);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tspecies = dex.species.get(this.sample(species.battleOnly));\r\n\t\t\t\t}\r\n\t\t\t\tforme = species.name;\r\n\t\t\t} else if (species.requiredItems && !species.requiredItems.some(req => toID(req) === item)) {\r\n\t\t\t\tif (!species.changesFrom) throw new Error(`${species.name} needs a changesFrom value`);\r\n\t\t\t\tspecies = dex.species.get(species.changesFrom);\r\n\t\t\t\tforme = species.name;\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that a base forme does not hold any forme-modifier items.\r\n\t\t\tlet itemData = this.dex.items.get(item);\r\n\t\t\tif (itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\titemData = this.sample(items);\r\n\t\t\t\t\titem = itemData.name;\r\n\t\t\t\t} while (\r\n\t\t\t\t\titemData.gen > this.gen ||\r\n\t\t\t\t\titemData.isNonstandard ||\r\n\t\t\t\t\t(itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// Random legal ability\r\n\t\t\tconst abilities = Object.values(species.abilities).filter(a => this.dex.abilities.get(a).gen <= this.gen);\r\n\t\t\tconst ability: string = this.gen <= 2 ? 'No Ability' : this.sample(abilities);\r\n\r\n\t\t\t// Four random unique moves from the movepool\r\n\t\t\tlet pool = ['struggle'];\r\n\t\t\tif (forme === 'Smeargle') {\r\n\t\t\t\tpool = this.dex.moves.all()\r\n\t\t\t\t\t.filter(move => !(move.isNonstandard || move.isZ || move.isMax || move.realMove))\r\n\t\t\t\t\t.map(m => m.id);\r\n\t\t\t} else {\r\n\t\t\t\tpool = [...this.dex.species.getMovePool(species.id)];\r\n\t\t\t}\r\n\r\n\t\t\tconst moves = this.multipleSamplesNoReplace(pool, this.maxMoveCount);\r\n\r\n\t\t\t// Random EVs\r\n\t\t\tconst evs: StatsTable = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };\r\n\t\t\tconst s: StatID[] = [\"hp\", \"atk\", \"def\", \"spa\", \"spd\", \"spe\"];\r\n\t\t\tlet evpool = 510;\r\n\t\t\tdo {\r\n\t\t\t\tconst x = this.sample(s);\r\n\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\r\n\t\t\t\tevs[x] += y;\r\n\t\t\t\tevpool -= y;\r\n\t\t\t} while (evpool > 0);\r\n\r\n\t\t\t// Random IVs\r\n\t\t\tconst ivs = {\r\n\t\t\t\thp: this.random(32),\r\n\t\t\t\tatk: this.random(32),\r\n\t\t\t\tdef: this.random(32),\r\n\t\t\t\tspa: this.random(32),\r\n\t\t\t\tspd: this.random(32),\r\n\t\t\t\tspe: this.random(32),\r\n\t\t\t};\r\n\r\n\t\t\t// Random nature\r\n\t\t\tconst nature = this.sample(natures).name;\r\n\r\n\t\t\t// Level balance--calculate directly from stats rather than using some silly lookup table\r\n\t\t\tconst mbstmin = 1307; // Sunkern has the lowest modified base stat total, and that total is 807\r\n\r\n\t\t\tlet stats = species.baseStats;\r\n\t\t\t// If Wishiwashi, use the school-forme's much higher stats\r\n\t\t\tif (species.baseSpecies === 'Wishiwashi') stats = Dex.species.get('wishiwashischool').baseStats;\r\n\r\n\t\t\t// Modified base stat total assumes 31 IVs, 85 EVs in every stat\r\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 31 + 21 + 100) + 10;\r\n\t\t\tmbst += (stats[\"atk\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"def\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spa\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spd\"] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats[\"spe\"] * 2 + 31 + 21 + 100) + 5;\r\n\r\n\t\t\tlet level;\r\n\t\t\tif (this.adjustLevel) {\r\n\t\t\t\tlevel = this.adjustLevel;\r\n\t\t\t} else {\r\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\r\n\r\n\t\t\t\twhile (level < 100) {\r\n\t\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 31 + 21 + 100) * level / 100 + 10);\r\n\t\t\t\t\t// Since damage is roughly proportional to level\r\n\t\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\r\n\t\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\t\tlevel++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random happiness\r\n\t\t\tconst happiness = this.random(256);\r\n\r\n\t\t\t// Random shininess\r\n\t\t\tconst shiny = this.randomChance(1, 1024);\r\n\r\n\t\t\tconst set: RandomTeamsTypes.RandomSet = {\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tgender: species.gender,\r\n\t\t\t\titem,\r\n\t\t\t\tability,\r\n\t\t\t\tmoves,\r\n\t\t\t\tevs,\r\n\t\t\t\tivs,\r\n\t\t\t\tnature,\r\n\t\t\t\tlevel,\r\n\t\t\t\thappiness,\r\n\t\t\t\tshiny,\r\n\t\t\t};\r\n\t\t\tif (this.gen === 9) {\r\n\t\t\t\t// Tera type\r\n\t\t\t\tset.teraType = this.sample(this.dex.types.names());\r\n\t\t\t}\r\n\t\t\tteam.push(set);\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\r\n\tprivate getPools(requiredType?: string, minSourceGen?: number, ruleTable?: RuleTable, requireMoves = false) {\r\n\t\t// Memoize pool and speciesPool because, at least during tests, they are constructed with the same parameters\r\n\t\t// hundreds of times and are expensive to compute.\r\n\t\tconst isNotCustom = !ruleTable;\r\n\t\tlet pool: number[] = [];\r\n\t\tlet speciesPool: Species[] = [];\r\n\t\tconst ck = this.poolsCacheKey;\r\n\t\tif (ck && this.cachedPool && this.cachedSpeciesPool &&\r\n\t\t\tck[0] === requiredType && ck[1] === minSourceGen && ck[2] === ruleTable && ck[3] === requireMoves) {\r\n\t\t\tspeciesPool = this.cachedSpeciesPool.slice();\r\n\t\t\tpool = this.cachedPool.slice();\r\n\t\t} else if (isNotCustom) {\r\n\t\t\tspeciesPool = [...this.dex.species.all()];\r\n\t\t\tfor (const species of speciesPool) {\r\n\t\t\t\tif (species.isNonstandard && species.isNonstandard !== 'Unobtainable') continue;\r\n\t\t\t\tif (requireMoves) {\r\n\t\t\t\t\tconst hasMovesInCurrentGen = this.dex.species.getMovePool(species.id).size;\r\n\t\t\t\t\tif (!hasMovesInCurrentGen) continue;\r\n\t\t\t\t}\r\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\r\n\t\t\t\tif (minSourceGen && species.gen < minSourceGen) continue;\r\n\t\t\t\tconst num = species.num;\r\n\t\t\t\tif (num <= 0 || pool.includes(num)) continue;\r\n\t\t\t\tpool.push(num);\r\n\t\t\t}\r\n\t\t\tthis.poolsCacheKey = [requiredType, minSourceGen, ruleTable, requireMoves];\r\n\t\t\tthis.cachedPool = pool.slice();\r\n\t\t\tthis.cachedSpeciesPool = speciesPool.slice();\r\n\t\t} else {\r\n\t\t\tconst EXISTENCE_TAG = ['past', 'future', 'lgpe', 'unobtainable', 'cap', 'custom', 'nonexistent'];\r\n\t\t\tconst nonexistentBanReason = ruleTable.check('nonexistent');\r\n\t\t\t// Assume tierSpecies does not differ from species here (mega formes can be used without their stone, etc)\r\n\t\t\tfor (const species of this.dex.species.all()) {\r\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\r\n\r\n\t\t\t\tlet banReason = ruleTable.check('pokemon:' + species.id);\r\n\t\t\t\tif (banReason) continue;\r\n\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\tif (species.isMega && ruleTable.check('pokemontag:mega')) continue;\r\n\r\n\t\t\t\t\tbanReason = ruleTable.check('basepokemon:' + toID(species.baseSpecies));\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '' || this.dex.species.get(species.baseSpecies).isNonstandard !== species.isNonstandard) {\r\n\t\t\t\t\t\tconst nonexistentCheck = Tags.nonexistent.genericFilter!(species) && nonexistentBanReason;\r\n\t\t\t\t\t\tlet tagWhitelisted = false;\r\n\t\t\t\t\t\tlet tagBlacklisted = false;\r\n\t\t\t\t\t\tfor (const ruleid of ruleTable.tagRules) {\r\n\t\t\t\t\t\t\tif (ruleid.startsWith('*')) continue;\r\n\t\t\t\t\t\t\tconst tagid = ruleid.slice(12) as ID;\r\n\t\t\t\t\t\t\tconst tag = Tags[tagid];\r\n\t\t\t\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) {\r\n\t\t\t\t\t\t\t\tconst existenceTag = EXISTENCE_TAG.includes(tagid);\r\n\t\t\t\t\t\t\t\tif (ruleid.startsWith('+')) {\r\n\t\t\t\t\t\t\t\t\tif (!existenceTag && nonexistentCheck) continue;\r\n\t\t\t\t\t\t\t\t\ttagWhitelisted = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttagBlacklisted = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (tagBlacklisted) continue;\r\n\t\t\t\t\t\tif (!tagWhitelisted) {\r\n\t\t\t\t\t\t\tif (ruleTable.check('pokemontag:allpokemon')) continue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tspeciesPool.push(species);\r\n\t\t\t\tconst num = species.num;\r\n\t\t\t\tif (pool.includes(num)) continue;\r\n\t\t\t\tpool.push(num);\r\n\t\t\t}\r\n\t\t\tthis.poolsCacheKey = [requiredType, minSourceGen, ruleTable, requireMoves];\r\n\t\t\tthis.cachedPool = pool.slice();\r\n\t\t\tthis.cachedSpeciesPool = speciesPool.slice();\r\n\t\t}\r\n\t\treturn { pool, speciesPool };\r\n\t}\r\n\r\n\trandomNPokemon(n: number, requiredType?: string, minSourceGen?: number, ruleTable?: RuleTable, requireMoves = false) {\r\n\t\t// Picks `n` random pokemon--no repeats, even among formes\r\n\t\t// Also need to either normalize for formes or select formes at random\r\n\t\t// Unreleased are okay but no CAP\r\n\t\tif (requiredType && !this.dex.types.get(requiredType).exists) {\r\n\t\t\tthrow new Error(`\"${requiredType}\" is not a valid type.`);\r\n\t\t}\r\n\r\n\t\tconst { pool, speciesPool } = this.getPools(requiredType, minSourceGen, ruleTable, requireMoves);\r\n\t\tconst isNotCustom = !ruleTable;\r\n\r\n\t\tconst hasDexNumber: { [k: string]: number } = {};\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tconst num = this.sampleNoReplace(pool);\r\n\t\t\thasDexNumber[num] = i;\r\n\t\t}\r\n\r\n\t\tconst formes: string[][] = [];\r\n\t\tfor (const species of speciesPool) {\r\n\t\t\tif (!(species.num in hasDexNumber)) continue;\r\n\t\t\tif (isNotCustom && (species.gen > this.gen ||\r\n\t\t\t\t(species.isNonstandard && species.isNonstandard !== 'Unobtainable'))) continue;\r\n\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\r\n\t\t\tif (!formes[hasDexNumber[species.num]]) formes[hasDexNumber[species.num]] = [];\r\n\t\t\tformes[hasDexNumber[species.num]].push(species.name);\r\n\t\t}\r\n\r\n\t\tif (formes.length < n) {\r\n\t\t\tthrow new Error(`Legal Pokemon forme count insufficient to support Max Team Size: (${formes.length} / ${n}).`);\r\n\t\t}\r\n\r\n\t\tconst nPokemon = [];\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tif (!formes[i].length) {\r\n\t\t\t\tthrow new Error(`Invalid pokemon gen ${this.gen}: ${JSON.stringify(formes)} numbers ${JSON.stringify(hasDexNumber)}`);\r\n\t\t\t}\r\n\t\t\tnPokemon.push(this.sample(formes[i]));\r\n\t\t}\r\n\t\treturn nPokemon;\r\n\t}\r\n\r\n\trandomHCTeam(): PokemonSet[] {\r\n\t\tconst hasCustomBans = this.hasDirectCustomBanlistChanges();\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst hasNonexistentBan = hasCustomBans && ruleTable.check('nonexistent');\r\n\t\tconst hasNonexistentWhitelist = hasCustomBans && (hasNonexistentBan === '');\r\n\r\n\t\tif (hasCustomBans) {\r\n\t\t\tthis.enforceNoDirectComplexBans();\r\n\t\t}\r\n\r\n\t\t// Item Pool\r\n\t\tconst doItemsExist = this.gen > 1;\r\n\t\tlet itemPool: Item[] = [];\r\n\t\tif (doItemsExist) {\r\n\t\t\tif (!hasCustomBans) {\r\n\t\t\t\titemPool = [...this.dex.items.all()].filter(item => (item.gen <= this.gen && !item.isNonstandard));\r\n\t\t\t} else {\r\n\t\t\t\tconst hasAllItemsBan = ruleTable.check('pokemontag:allitems');\r\n\t\t\t\tfor (const item of this.dex.items.all()) {\r\n\t\t\t\t\tlet banReason = ruleTable.check('item:' + item.id);\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '' && item.id) {\r\n\t\t\t\t\t\tif (hasAllItemsBan) continue;\r\n\t\t\t\t\t\tif (item.isNonstandard) {\r\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(item.isNonstandard));\r\n\t\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\t\tif (banReason !== '' && item.isNonstandard !== 'Unobtainable') {\r\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemPool.push(item);\r\n\t\t\t\t}\r\n\t\t\t\tif (ruleTable.check('item:noitem')) {\r\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('item', itemPool, this.maxTeamSize, 'Max Team Size');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ability Pool\r\n\t\tconst doAbilitiesExist = (this.gen > 2) && (this.dex.currentMod !== 'gen7letsgo');\r\n\t\tlet abilityPool: Ability[] = [];\r\n\t\tif (doAbilitiesExist) {\r\n\t\t\tif (!hasCustomBans) {\r\n\t\t\t\tabilityPool = [...this.dex.abilities.all()].filter(ability => (ability.gen <= this.gen && !ability.isNonstandard));\r\n\t\t\t} else {\r\n\t\t\t\tconst hasAllAbilitiesBan = ruleTable.check('pokemontag:allabilities');\r\n\t\t\t\tfor (const ability of this.dex.abilities.all()) {\r\n\t\t\t\t\tlet banReason = ruleTable.check('ability:' + ability.id);\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\t\tif (hasAllAbilitiesBan) continue;\r\n\t\t\t\t\t\tif (ability.isNonstandard) {\r\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(ability.isNonstandard));\r\n\t\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tabilityPool.push(ability);\r\n\t\t\t\t}\r\n\t\t\t\tif (ruleTable.check('ability:noability')) {\r\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('ability', abilityPool, this.maxTeamSize, 'Max Team Size');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Move Pool\r\n\t\tconst setMoveCount = ruleTable.maxMoveCount;\r\n\t\tlet movePool: Move[] = [];\r\n\t\tif (!hasCustomBans) {\r\n\t\t\tmovePool = [...this.dex.moves.all()].filter(move =>\r\n\t\t\t\t(move.gen <= this.gen && !move.isNonstandard && !move.name.startsWith('Hidden Power ')));\r\n\t\t} else {\r\n\t\t\tconst hasAllMovesBan = ruleTable.check('pokemontag:allmoves');\r\n\t\t\tfor (const move of this.dex.moves.all()) {\r\n\t\t\t\t// Legality of specific HP types can't be altered in built formats anyway\r\n\t\t\t\tif (move.name.startsWith('Hidden Power ')) continue;\r\n\t\t\t\tlet banReason = ruleTable.check('move:' + move.id);\r\n\t\t\t\tif (banReason) continue;\r\n\t\t\t\tif (banReason !== '') {\r\n\t\t\t\t\tif (hasAllMovesBan) continue;\r\n\t\t\t\t\tif (move.isNonstandard) {\r\n\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(move.isNonstandard));\r\n\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\tif (banReason !== '' && move.isNonstandard !== 'Unobtainable') {\r\n\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmovePool.push(move);\r\n\t\t\t}\r\n\t\t\tthis.enforceCustomPoolSizeNoComplexBans('move', movePool, this.maxTeamSize * setMoveCount, 'Max Team Size * Max Move Count');\r\n\t\t}\r\n\r\n\t\t// Nature Pool\r\n\t\tconst doNaturesExist = this.gen > 2;\r\n\t\tlet naturePool: Nature[] = [];\r\n\t\tif (doNaturesExist) {\r\n\t\t\tif (!hasCustomBans) {\r\n\t\t\t\tnaturePool = [...this.dex.natures.all()];\r\n\t\t\t} else {\r\n\t\t\t\tconst hasAllNaturesBan = ruleTable.check('pokemontag:allnatures');\r\n\t\t\t\tfor (const nature of this.dex.natures.all()) {\r\n\t\t\t\t\tlet banReason = ruleTable.check('nature:' + nature.id);\r\n\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\tif (banReason !== '' && nature.id) {\r\n\t\t\t\t\t\tif (hasAllNaturesBan) continue;\r\n\t\t\t\t\t\tif (nature.isNonstandard) {\r\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(nature.isNonstandard));\r\n\t\t\t\t\t\t\tif (banReason) continue;\r\n\t\t\t\t\t\t\tif (banReason !== '' && nature.isNonstandard !== 'Unobtainable') {\r\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\r\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnaturePool.push(nature);\r\n\t\t\t\t}\r\n\t\t\t\t// There is no 'nature:nonature' rule so do not constrain pool size\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined,\r\n\t\t\thasCustomBans ? ruleTable : undefined);\r\n\r\n\t\tconst team = [];\r\n\t\tfor (const forme of randomN) {\r\n\t\t\t// Choose forme\r\n\t\t\tconst species = this.dex.species.get(forme);\r\n\r\n\t\t\t// Random unique item\r\n\t\t\tlet item = '';\r\n\t\t\tlet itemData;\r\n\t\t\tif (doItemsExist) {\r\n\t\t\t\titemData = this.sampleNoReplace(itemPool);\r\n\t\t\t\titem = itemData?.name;\r\n\t\t\t}\r\n\r\n\t\t\t// Random unique ability\r\n\t\t\tlet ability = 'No Ability';\r\n\t\t\tlet abilityData;\r\n\t\t\tif (doAbilitiesExist) {\r\n\t\t\t\tabilityData = this.sampleNoReplace(abilityPool);\r\n\t\t\t\tability = abilityData?.name;\r\n\t\t\t}\r\n\r\n\t\t\t// Random unique moves\r\n\t\t\tconst m = [];\r\n\t\t\tdo {\r\n\t\t\t\tconst move = this.sampleNoReplace(movePool);\r\n\t\t\t\tm.push(move.id);\r\n\t\t\t} while (m.length < setMoveCount);\r\n\r\n\t\t\t// Random EVs\r\n\t\t\tconst evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };\r\n\t\t\tif (this.gen === 6) {\r\n\t\t\t\tlet evpool = 510;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tconst x = this.sample(Dex.stats.ids());\r\n\t\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\r\n\t\t\t\t\tevs[x] += y;\r\n\t\t\t\t\tevpool -= y;\r\n\t\t\t\t} while (evpool > 0);\r\n\t\t\t} else {\r\n\t\t\t\tfor (const x of Dex.stats.ids()) {\r\n\t\t\t\t\tevs[x] = this.random(256);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random IVs\r\n\t\t\tconst ivs: StatsTable = {\r\n\t\t\t\thp: this.random(32),\r\n\t\t\t\tatk: this.random(32),\r\n\t\t\t\tdef: this.random(32),\r\n\t\t\t\tspa: this.random(32),\r\n\t\t\t\tspd: this.random(32),\r\n\t\t\t\tspe: this.random(32),\r\n\t\t\t};\r\n\r\n\t\t\t// Random nature\r\n\t\t\tlet nature = '';\r\n\t\t\tif (doNaturesExist && (naturePool.length > 0)) {\r\n\t\t\t\tnature = this.sample(naturePool).name;\r\n\t\t\t}\r\n\r\n\t\t\t// Level balance\r\n\t\t\tconst mbstmin = 1307;\r\n\t\t\tconst stats = species.baseStats;\r\n\t\t\tlet mbst = (stats['hp'] * 2 + 31 + 21 + 100) + 10;\r\n\t\t\tmbst += (stats['atk'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['def'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['spa'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['spd'] * 2 + 31 + 21 + 100) + 5;\r\n\t\t\tmbst += (stats['spe'] * 2 + 31 + 21 + 100) + 5;\r\n\r\n\t\t\tlet level;\r\n\t\t\tif (this.adjustLevel) {\r\n\t\t\t\tlevel = this.adjustLevel;\r\n\t\t\t} else {\r\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst);\r\n\t\t\t\twhile (level < 100) {\r\n\t\t\t\t\tmbst = Math.floor((stats['hp'] * 2 + 31 + 21 + 100) * level / 100 + 10);\r\n\t\t\t\t\tmbst += Math.floor(((stats['atk'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats['def'] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor(((stats['spa'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\r\n\t\t\t\t\tmbst += Math.floor((stats['spd'] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tmbst += Math.floor((stats['spe'] * 2 + 31 + 21 + 100) * level / 100 + 5);\r\n\t\t\t\t\tif (mbst >= mbstmin) break;\r\n\t\t\t\t\tlevel++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Random happiness\r\n\t\t\tconst happiness = this.random(256);\r\n\r\n\t\t\t// Random shininess\r\n\t\t\tconst shiny = this.randomChance(1, 1024);\r\n\r\n\t\t\tconst set: PokemonSet = {\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tgender: species.gender,\r\n\t\t\t\titem,\r\n\t\t\t\tability,\r\n\t\t\t\tmoves: m,\r\n\t\t\t\tevs,\r\n\t\t\t\tivs,\r\n\t\t\t\tnature,\r\n\t\t\t\tlevel,\r\n\t\t\t\thappiness,\r\n\t\t\t\tshiny,\r\n\t\t\t};\r\n\t\t\tif (this.gen === 9) {\r\n\t\t\t\t// Random Tera type\r\n\t\t\t\tset.teraType = this.sample(this.dex.types.names());\r\n\t\t\t}\r\n\t\t\tteam.push(set);\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\r\n\tqueryMoves(\r\n\t\tmoves: Set<string> | null,\r\n\t\ttypes: string[],\r\n\t\tabilities: string[],\r\n\t\tmovePool: string[] = []\r\n\t): MoveCounter {\r\n\t\t// This is primarily a helper function for random setbuilder functions.\r\n\t\tconst counter = new MoveCounter();\r\n\r\n\t\tif (!moves?.size) return counter;\r\n\r\n\t\tconst categories = { Physical: 0, Special: 0, Status: 0 };\r\n\r\n\t\t// Iterate through all moves we've chosen so far and keep track of what they do:\r\n\t\tfor (const moveid of moves) {\r\n\t\t\tlet move = this.dex.moves.get(moveid);\r\n\t\t\tif (move.id === 'naturepower') {\r\n\t\t\t\tif (this.gen === 5) move = this.dex.moves.get('earthquake');\r\n\t\t\t}\r\n\r\n\t\t\tlet moveType = move.type;\r\n\t\t\tif (['judgment', 'multiattack', 'revelationdance'].includes(moveid)) moveType = types[0];\r\n\t\t\tif (move.damage || move.damageCallback) {\r\n\t\t\t\t// Moves that do a set amount of damage:\r\n\t\t\t\tcounter.add('damage');\r\n\t\t\t\tcounter.damagingMoves.add(move);\r\n\t\t\t} else {\r\n\t\t\t\t// Are Physical/Special/Status moves:\r\n\t\t\t\tcategories[move.category]++;\r\n\t\t\t}\r\n\t\t\t// Moves that have a low base power:\r\n\t\t\tif (moveid === 'lowkick' || (move.basePower && move.basePower <= 60 && moveid !== 'rapidspin')) {\r\n\t\t\t\tcounter.add('technician');\r\n\t\t\t}\r\n\t\t\t// Moves that hit up to 5 times:\r\n\t\t\tif (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5) counter.add('skilllink');\r\n\t\t\tif (move.recoil || move.hasCrashDamage) counter.add('recoil');\r\n\t\t\tif (move.drain) counter.add('drain');\r\n\t\t\t// Moves which have a base power, but aren't super-weak like Rapid Spin:\r\n\t\t\tif (move.basePower > 30 || move.multihit || move.basePowerCallback || moveid === 'infestation') {\r\n\t\t\t\tcounter.add(moveType);\r\n\t\t\t\tif (types.includes(moveType)) {\r\n\t\t\t\t\t// STAB:\r\n\t\t\t\t\t// Certain moves aren't acceptable as a Pokemon's only STAB attack\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (!moveid.startsWith('hiddenpower') || types.length === 1)) {\r\n\t\t\t\t\t\tcounter.add('stab');\r\n\t\t\t\t\t\t// Ties between Physical and Special setup should broken in favor of STABs\r\n\t\t\t\t\t\tcategories[move.category] += 0.1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (\r\n\t\t\t\t\t// Less obvious forms of STAB\r\n\t\t\t\t\t(moveType === 'Normal' && (['Aerilate', 'Galvanize', 'Pixilate', 'Refrigerate'].some(a => abilities.includes(a)))) ||\r\n\t\t\t\t\t(move.priority === 0 && (['Libero', 'Protean'].some(a => abilities.includes(a))) && !this.noStab.includes(moveid)) ||\r\n\t\t\t\t\t(moveType === 'Steel' && abilities.includes('Steelworker'))\r\n\t\t\t\t) {\r\n\t\t\t\t\tcounter.add('stab');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (move.flags['bite']) counter.add('strongjaw');\r\n\t\t\t\tif (move.flags['punch']) counter.add('ironfist');\r\n\t\t\t\tif (move.flags['sound']) counter.add('sound');\r\n\t\t\t\tif (move.priority !== 0 || (moveid === 'grassyglide' && abilities.includes('Grassy Surge'))) {\r\n\t\t\t\t\tcounter.add('priority');\r\n\t\t\t\t}\r\n\t\t\t\tcounter.damagingMoves.add(move);\r\n\t\t\t}\r\n\t\t\t// Moves with secondary effects:\r\n\t\t\tif (move.secondary) {\r\n\t\t\t\tcounter.add('sheerforce');\r\n\t\t\t\tif (sereneGraceBenefits(move)) {\r\n\t\t\t\t\tcounter.add('serenegrace');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Moves with low accuracy:\r\n\t\t\tif (move.accuracy && move.accuracy !== true && move.accuracy < 90) counter.add('inaccurate');\r\n\r\n\t\t\t// Moves that change stats:\r\n\t\t\tif (RECOVERY_MOVES.includes(moveid)) counter.add('recovery');\r\n\t\t\tif (CONTRARY_MOVES.includes(moveid)) counter.add('contrary');\r\n\t\t\tif (PHYSICAL_SETUP.includes(moveid)) {\r\n\t\t\t\tcounter.add('physicalsetup');\r\n\t\t\t\tcounter.setupType = 'Physical';\r\n\t\t\t} else if (SPECIAL_SETUP.includes(moveid)) {\r\n\t\t\t\tcounter.add('specialsetup');\r\n\t\t\t\tcounter.setupType = 'Special';\r\n\t\t\t}\r\n\r\n\t\t\tif (MIXED_SETUP.includes(moveid)) counter.add('mixedsetup');\r\n\t\t\tif (SPEED_SETUP.includes(moveid)) counter.add('speedsetup');\r\n\t\t\tif (HAZARDS.includes(moveid)) counter.add('hazards');\r\n\t\t}\r\n\r\n\t\t// Keep track of the available moves\r\n\t\tfor (const moveid of movePool) {\r\n\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\tif (move.damageCallback) continue;\r\n\t\t\tif (move.category === 'Physical') counter.add('physicalpool');\r\n\t\t\tif (move.category === 'Special') counter.add('specialpool');\r\n\t\t}\r\n\r\n\t\t// Choose a setup type:\r\n\t\tif (counter.get('mixedsetup')) {\r\n\t\t\tcounter.setupType = 'Mixed';\r\n\t\t} else if (counter.get('physicalsetup') && counter.get('specialsetup')) {\r\n\t\t\tconst pool = {\r\n\t\t\t\tPhysical: categories['Physical'] + counter.get('physicalpool'),\r\n\t\t\t\tSpecial: categories['Special'] + counter.get('specialpool'),\r\n\t\t\t};\r\n\t\t\tif (pool.Physical === pool.Special) {\r\n\t\t\t\tif (categories['Physical'] > categories['Special']) counter.setupType = 'Physical';\r\n\t\t\t\tif (categories['Special'] > categories['Physical']) counter.setupType = 'Special';\r\n\t\t\t} else {\r\n\t\t\t\tcounter.setupType = pool.Physical > pool.Special ? 'Physical' : 'Special';\r\n\t\t\t}\r\n\t\t} else if (counter.setupType === 'Physical') {\r\n\t\t\tif (\r\n\t\t\t\t(categories['Physical'] < 2 && (!counter.get('stab') || !counter.get('physicalpool'))) &&\r\n\t\t\t\t!(moves.has('rest') && moves.has('sleeptalk')) &&\r\n\t\t\t\t!moves.has('batonpass')\r\n\t\t\t) {\r\n\t\t\t\tcounter.setupType = '';\r\n\t\t\t}\r\n\t\t} else if (counter.setupType === 'Special') {\r\n\t\t\tif (\r\n\t\t\t\t(categories['Special'] < 2 && (!counter.get('stab') || !counter.get('specialpool'))) &&\r\n\t\t\t\t!moves.has('quiverdance') &&\r\n\t\t\t\t!(moves.has('rest') && moves.has('sleeptalk')) &&\r\n\t\t\t\t!(moves.has('wish') && moves.has('protect')) &&\r\n\t\t\t\t!moves.has('batonpass')\r\n\t\t\t) {\r\n\t\t\t\tcounter.setupType = '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcounter.set('Physical', Math.floor(categories['Physical']));\r\n\t\tcounter.set('Special', Math.floor(categories['Special']));\r\n\t\tcounter.set('Status', categories['Status']);\r\n\r\n\t\treturn counter;\r\n\t}\r\n\r\n\tshouldCullMove(\r\n\t\tmove: Move,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tisNoDynamax: boolean,\r\n\t): { cull: boolean, isSetup?: boolean } {\r\n\t\tif (isDoubles && species.baseStats.def >= 140 && movePool.includes('bodypress')) {\r\n\t\t\t// In Doubles, Pok\u00E9mon with Defense stats >= 140 should always have body press\r\n\t\t\treturn { cull: true };\r\n\t\t}\r\n\t\tif (\r\n\t\t\t(species.id === 'doublade' && movePool.includes('swordsdance')) ||\r\n\t\t\t(species.id === 'entei' && movePool.includes('extremespeed')) ||\r\n\t\t\t(species.id === 'genesectdouse' && movePool.includes('technoblast')) ||\r\n\t\t\t(species.id === 'golisopod' && movePool.includes('leechlife') && movePool.includes('firstimpression'))\r\n\t\t) {\r\n\t\t\t// Entei should always have Extreme Speed, and Genesect-Douse should always have Techno Blast\r\n\t\t\t// Golisopod should always have one of its bug moves (Leech Life or First Impression)\r\n\t\t\treturn { cull: true };\r\n\t\t}\r\n\r\n\t\tconst hasRestTalk = moves.has('rest') && moves.has('sleeptalk');\r\n\r\n\t\t// Reject moves that need support\r\n\t\tswitch (move.id) {\r\n\t\tcase 'acrobatics': case 'junglehealing':\r\n\t\t\t// Special case to prevent lead Acrobatics Rillaboom\r\n\t\t\treturn { cull: (species.id.startsWith('rillaboom') && isLead) || (!isDoubles && !counter.setupType) };\r\n\t\tcase 'dualwingbeat': case 'fly':\r\n\t\t\treturn { cull: !types.has(move.type) && !counter.setupType && !!counter.get('Status') };\r\n\t\tcase 'healbell':\r\n\t\t\treturn { cull: movePool.includes('protect') || movePool.includes('wish') };\r\n\t\tcase 'fireblast':\r\n\t\t\t// Special case for Togekiss, which always wants Aura Sphere\r\n\t\t\treturn { cull: abilities.includes('Serene Grace') && (!moves.has('trick') || counter.get('Status') > 1) };\r\n\t\tcase 'firepunch':\r\n\t\t\t// Special case for Darmanitan-Zen-Galar, which doesn't always want Fire Punch\r\n\t\t\treturn { cull: movePool.includes('bellydrum') || (moves.has('earthquake') && movePool.includes('substitute')) };\r\n\t\tcase 'flamecharge':\r\n\t\t\treturn { cull: movePool.includes('swordsdance') };\r\n\t\tcase 'hypervoice':\r\n\t\t\t// Special case for Heliolisk, which always wants Thunderbolt\r\n\t\t\treturn { cull: types.has('Electric') && movePool.includes('thunderbolt') };\r\n\t\tcase 'payback': case 'psychocut':\r\n\t\t\t// Special case for Type: Null and Malamar, which don't want these + RestTalk\r\n\t\t\treturn { cull: !counter.get('Status') || hasRestTalk };\r\n\t\tcase 'rest':\r\n\t\t\tconst bulkySetup = !moves.has('sleeptalk') && ['bulkup', 'calmmind', 'coil', 'curse'].some(m => movePool.includes(m));\r\n\t\t\t// Registeel would otherwise get Curse sets without Rest, which are very bad generally\r\n\t\t\treturn { cull: species.id !== 'registeel' && (movePool.includes('sleeptalk') || bulkySetup) };\r\n\t\tcase 'sleeptalk':\r\n\t\t\tif (!moves.has('rest')) return { cull: true };\r\n\t\t\tif (movePool.length > 1 && !abilities.includes('Contrary')) {\r\n\t\t\t\tconst rest = movePool.indexOf('rest');\r\n\t\t\t\tif (rest >= 0) this.fastPop(movePool, rest);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'storedpower':\r\n\t\t\treturn { cull: !counter.setupType };\r\n\t\tcase 'switcheroo': case 'trick':\r\n\t\t\treturn { cull: counter.get('Physical') + counter.get('Special') < 3 || moves.has('rapidspin') };\r\n\t\tcase 'trickroom':\r\n\t\t\tconst webs = !!teamDetails.stickyWeb;\r\n\t\t\treturn { cull:\r\n\t\t\t\tisLead || webs || !!counter.get('speedsetup') ||\r\n\t\t\t\tcounter.damagingMoves.size < 2 || movePool.includes('nastyplot'),\r\n\t\t\t};\r\n\t\tcase 'zenheadbutt':\r\n\t\t\t// Special case for Victini, which should prefer Bolt Strike to Zen Headbutt\r\n\t\t\treturn { cull: movePool.includes('boltstrike') || (species.id === 'eiscue' && moves.has('substitute')) };\r\n\r\n\t\t// Set up once and only if we have the moves for it\r\n\t\tcase 'bellydrum': case 'bulkup': case 'coil': case 'curse': case 'dragondance': case 'honeclaws': case 'swordsdance':\r\n\t\t\tif (counter.setupType !== 'Physical') return { cull: true }; // if we're not setting up physically this is pointless\r\n\t\t\tif (counter.get('Physical') + counter.get('physicalpool') < 2 && !hasRestTalk) return { cull: true };\r\n\r\n\t\t\t// First Impression + setup is undesirable in Doubles\r\n\t\t\tif (isDoubles && moves.has('firstimpression')) return { cull: true };\r\n\t\t\tif (move.id === 'swordsdance' && moves.has('dragondance')) return { cull: true }; // Dragon Dance is judged as better\r\n\r\n\t\t\treturn { cull: false, isSetup: true };\r\n\t\tcase 'calmmind': case 'nastyplot':\r\n\t\t\tif (species.id === 'togekiss') return { cull: false };\r\n\t\t\tif (counter.setupType !== 'Special') return { cull: true };\r\n\t\t\tif (\r\n\t\t\t\t(counter.get('Special') + counter.get('specialpool')) < 2 &&\r\n\t\t\t\t!hasRestTalk &&\r\n\t\t\t\t!(moves.has('wish') && moves.has('protect'))\r\n\t\t\t) return { cull: true };\r\n\t\t\tif (moves.has('healpulse') || move.id === 'calmmind' && moves.has('trickroom')) return { cull: true };\r\n\t\t\treturn { cull: false, isSetup: true };\r\n\t\tcase 'quiverdance':\r\n\t\t\treturn { cull: false, isSetup: true };\r\n\t\tcase 'clangoroussoul': case 'shellsmash': case 'workup':\r\n\t\t\tif (counter.setupType !== 'Mixed') return { cull: true };\r\n\t\t\tif (counter.damagingMoves.size + counter.get('physicalpool') + counter.get('specialpool') < 2) return { cull: true };\r\n\t\t\treturn { cull: false, isSetup: true };\r\n\t\tcase 'agility': case 'autotomize': case 'rockpolish': case 'shiftgear':\r\n\t\t\tif (counter.damagingMoves.size < 2 || moves.has('rest')) return { cull: true };\r\n\t\t\tif (movePool.includes('calmmind') || movePool.includes('nastyplot')) return { cull: true };\r\n\t\t\treturn { cull: false, isSetup: !counter.setupType };\r\n\r\n\t\t// Bad after setup\r\n\t\tcase 'coaching': case 'counter': case 'reversal':\r\n\t\t\t// Counter: special case for Alakazam, which doesn't want Counter + Nasty Plot\r\n\t\t\treturn { cull: !!counter.setupType };\r\n\t\tcase 'bulletpunch': case 'extremespeed': case 'rockblast':\r\n\t\t\treturn { cull: (\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\t(!isDoubles && moves.has('dragondance')) ||\r\n\t\t\t\tcounter.damagingMoves.size < 2\r\n\t\t\t) };\r\n\t\tcase 'closecombat': case 'flashcannon': case 'pollenpuff':\r\n\t\t\tconst substituteCullCondition = (\r\n\t\t\t\t(moves.has('substitute') && !types.has('Fighting')) ||\r\n\t\t\t\t(moves.has('toxic') && movePool.includes('substitute'))\r\n\t\t\t);\r\n\t\t\tconst preferHJKOverCCCullCondition = (\r\n\t\t\t\tmove.id === 'closecombat' &&\r\n\t\t\t\t!counter.setupType &&\r\n\t\t\t\t(moves.has('highjumpkick') || movePool.includes('highjumpkick'))\r\n\t\t\t);\r\n\t\t\treturn { cull: substituteCullCondition || preferHJKOverCCCullCondition };\r\n\t\tcase 'defog':\r\n\t\t\treturn { cull: !!counter.setupType || moves.has('healbell') || moves.has('toxicspikes') || !!teamDetails.defog };\r\n\t\tcase 'fakeout':\r\n\t\t\treturn { cull: !!counter.setupType || ['protect', 'rapidspin', 'substitute', 'uturn'].some(m => moves.has(m)) };\r\n\t\tcase 'firstimpression': case 'glare': case 'icywind': case 'tailwind': case 'waterspout':\r\n\t\t\treturn { cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('rest') };\r\n\t\tcase 'healingwish': case 'memento':\r\n\t\t\treturn { cull: !!counter.setupType || !!counter.get('recovery') || moves.has('substitute') || moves.has('uturn') };\r\n\t\tcase 'highjumpkick':\r\n\t\t\t// Special case for Hitmonlee to prevent non-Unburden Curse\r\n\t\t\treturn { cull: moves.has('curse') };\r\n\t\tcase 'partingshot':\r\n\t\t\treturn { cull: !!counter.get('speedsetup') || moves.has('bulkup') || moves.has('uturn') };\r\n\t\tcase 'protect':\r\n\t\t\tif (!isDoubles && ((counter.setupType && !moves.has('wish')) || moves.has('rest'))) return { cull: true };\r\n\t\t\tif (\r\n\t\t\t\t!isDoubles &&\r\n\t\t\t\tcounter.get('Status') < 2 &&\r\n\t\t\t\t['Hunger Switch', 'Speed Boost'].every(m => !abilities.includes(m))\r\n\t\t\t) return { cull: true };\r\n\t\t\tif (movePool.includes('leechseed') || (movePool.includes('toxic') && !moves.has('wish'))) return { cull: true };\r\n\t\t\tif (isDoubles && (\r\n\t\t\t\t['bellydrum', 'fakeout', 'shellsmash', 'spore'].some(m => movePool.includes(m)) ||\r\n\t\t\t\tmoves.has('tailwind') || moves.has('waterspout') || counter.get('recovery')\r\n\t\t\t)) return { cull: true };\r\n\t\t\treturn { cull: false };\r\n\t\tcase 'rapidspin':\r\n\t\t\tconst setup = ['curse', 'nastyplot', 'shellsmash'].some(m => moves.has(m));\r\n\t\t\treturn { cull: !!teamDetails.rapidSpin || setup || (!!counter.setupType && counter.get('Fighting') >= 2) };\r\n\t\tcase 'shadowsneak':\r\n\t\t\tconst sneakIncompatible = ['substitute', 'trickroom', 'dualwingbeat', 'toxic'].some(m => moves.has(m));\r\n\t\t\treturn { cull: hasRestTalk || sneakIncompatible || counter.setupType === 'Special' };\r\n\t\tcase 'spikes':\r\n\t\t\treturn { cull: !!counter.setupType || (!!teamDetails.spikes && teamDetails.spikes > 1) };\r\n\t\tcase 'stealthrock':\r\n\t\t\treturn { cull:\r\n\t\t\t\t!!counter.setupType ||\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\t!!teamDetails.stealthRock ||\r\n\t\t\t\t['rest', 'substitute', 'trickroom', 'teleport'].some(m => moves.has(m)) ||\r\n\t\t\t\t(species.id === 'palossand' && movePool.includes('shoreup')),\r\n\t\t\t};\r\n\t\tcase 'stickyweb':\r\n\t\t\treturn { cull: counter.setupType === 'Special' || !!teamDetails.stickyWeb };\r\n\t\tcase 'taunt':\r\n\t\t\treturn { cull: moves.has('encore') || moves.has('nastyplot') || moves.has('swordsdance') };\r\n\t\tcase 'thunderwave': case 'voltswitch':\r\n\t\t\tconst cullInDoubles = isDoubles && (moves.has('electroweb') || moves.has('nuzzle'));\r\n\t\t\treturn { cull: (\r\n\t\t\t\t!!counter.setupType ||\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\tmoves.has('shiftgear') ||\r\n\t\t\t\tmoves.has('raindance') ||\r\n\t\t\t\tcullInDoubles\r\n\t\t\t) };\r\n\t\tcase 'toxic':\r\n\t\t\treturn { cull: !!counter.setupType || ['sludgewave', 'thunderwave', 'willowisp'].some(m => moves.has(m)) };\r\n\t\tcase 'toxicspikes':\r\n\t\t\treturn { cull: !!counter.setupType || !!teamDetails.toxicSpikes };\r\n\t\tcase 'uturn':\r\n\t\t\tconst bugSwordsDanceCase = types.has('Bug') && counter.get('recovery') && moves.has('swordsdance');\r\n\t\t\treturn { cull: (\r\n\t\t\t\t!!counter.get('speedsetup') ||\r\n\t\t\t\t(counter.setupType && !bugSwordsDanceCase) ||\r\n\t\t\t\t(isDoubles && moves.has('leechlife')) ||\r\n\t\t\t\tmoves.has('shiftgear')\r\n\t\t\t) };\r\n\r\n\t\t/**\r\n\t\t * Ineffective to have both moves together\r\n\t\t *\r\n\t\t * These are sorted in order of:\r\n\t\t * Normal>Fire>Water>Electric>Grass>Ice>Fighting>Poison>Ground>Flying>Psychic>Bug>Rock>Ghost>Dragon>Dark>Fairy\r\n\t\t * and then subsorted alphabetically.\r\n\t\t * This type order is arbitrary and referenced from https://pokemondb.net/type.\r\n\t\t */\r\n\t\tcase 'explosion':\r\n\t\t\t// Rock Blast: Special case for Gigalith to prevent Stone Edge-less Choice Band sets\r\n\t\t\tconst otherMoves = ['curse', 'stompingtantrum', 'rockblast', 'painsplit', 'wish'].some(m => moves.has(m));\r\n\t\t\treturn { cull: !!counter.get('speedsetup') || !!counter.get('recovery') || otherMoves };\r\n\t\tcase 'facade':\r\n\t\t\t// Special case for Snorlax\r\n\t\t\treturn { cull: movePool.includes('doubleedge') };\r\n\t\tcase 'quickattack':\r\n\t\t\t// Diggersby wants U-turn on Choiced sets\r\n\t\t\tconst diggersbyCull = counter.get('Physical') > 3 && movePool.includes('uturn');\r\n\t\t\treturn { cull: !!counter.get('speedsetup') || (types.has('Rock') && !!counter.get('Status')) || diggersbyCull };\r\n\t\tcase 'blazekick':\r\n\t\t\treturn { cull: species.id === 'genesect' && counter.get('Special') >= 1 };\r\n\t\tcase 'blueflare':\r\n\t\t\treturn { cull: moves.has('vcreate') };\r\n\t\tcase 'firefang': case 'flamethrower':\r\n\t\t\t// Fire Fang: Special case for Garchomp, which doesn't want Fire Fang w/o Swords Dance\r\n\t\t\tconst otherFireMoves = ['heatwave', 'overheat'].some(m => moves.has(m));\r\n\t\t\treturn { cull: (moves.has('fireblast') && counter.setupType !== 'Physical') || otherFireMoves };\r\n\t\tcase 'flareblitz':\r\n\t\t\t// Special case for Solgaleo to prevent Flame Charge + Flare Blitz\r\n\t\t\treturn { cull: species.id === 'solgaleo' && moves.has('flamecharge') };\r\n\t\tcase 'overheat':\r\n\t\t\treturn { cull: moves.has('flareblitz') || (isDoubles && moves.has('calmmind')) };\r\n\t\tcase 'aquatail': case 'flipturn':\r\n\t\t\treturn { cull: moves.has('aquajet') || !!counter.get('Status') };\r\n\t\tcase 'hydropump':\r\n\t\t\treturn { cull: moves.has('scald') && (\r\n\t\t\t\t(counter.get('Special') < 4 && !moves.has('uturn')) ||\r\n\t\t\t\t(species.types.length > 1 && counter.get('stab') < 3)\r\n\t\t\t) };\r\n\t\tcase 'muddywater':\r\n\t\t\treturn { cull: moves.has('liquidation') };\r\n\t\tcase 'scald':\r\n\t\t\t// Special case for Clawitzer\r\n\t\t\treturn { cull: moves.has('waterpulse') };\r\n\t\tcase 'thunderbolt':\r\n\t\t\t// Special case for Goodra, which only wants one move to hit Water-types\r\n\t\t\treturn { cull: moves.has('powerwhip') };\r\n\t\tcase 'energyball':\r\n\t\t\t// Special case to prevent Shiinotic with four Grass moves and no Moonblast\r\n\t\t\treturn { cull: species.id === 'shiinotic' && !moves.has('moonblast') };\r\n\t\tcase 'gigadrain':\r\n\t\t\t// Celebi always wants Leaf Storm on its more pivoting-focused non-Nasty Plot sets\r\n\t\t\tconst celebiPreferLeafStorm = species.id === 'celebi' && !counter.setupType && moves.has('uturn');\r\n\t\t\treturn { cull: celebiPreferLeafStorm || (types.has('Poison') && !counter.get('Poison')) };\r\n\t\tcase 'leafblade':\r\n\t\t\t// Special case for Virizion to prevent Leaf Blade on Assault Vest sets\r\n\t\t\treturn { cull: (moves.has('leafstorm') || movePool.includes('leafstorm')) && counter.setupType !== 'Physical' };\r\n\t\tcase 'leafstorm':\r\n\t\t\tconst leafBladePossible = movePool.includes('leafblade') || moves.has('leafblade');\r\n\t\t\treturn { cull:\r\n\t\t\t\t// Virizion should always prefer Leaf Blade to Leaf Storm on Physical sets\r\n\t\t\t\t(counter.setupType === 'Physical' && (species.id === 'virizion' || leafBladePossible)) ||\r\n\t\t\t\t(moves.has('gigadrain') && !!counter.get('Status')) ||\r\n\t\t\t\t(isDoubles && moves.has('energyball')),\r\n\t\t\t};\r\n\t\tcase 'powerwhip':\r\n\t\t\t// Special case for Centiskorch, which doesn't want Assault Vest\r\n\t\t\treturn { cull: moves.has('leechlife') };\r\n\t\tcase 'woodhammer':\r\n\t\t\treturn { cull: moves.has('hornleech') && counter.get('Physical') < 4 };\r\n\t\tcase 'freezedry':\r\n\t\t\tconst betterIceMove = (\r\n\t\t\t\t(moves.has('blizzard') && !!counter.setupType) ||\r\n\t\t\t\t(moves.has('icebeam') && counter.get('Special') < 4)\r\n\t\t\t);\r\n\t\t\tconst preferThunderWave = movePool.includes('thunderwave') && types.has('Electric');\r\n\t\t\treturn { cull: betterIceMove || preferThunderWave || movePool.includes('bodyslam') };\r\n\t\tcase 'bodypress':\r\n\t\t\t// Turtonator never wants Earthquake + Body Press, and wants EQ+Smash or Press+No Smash\r\n\t\t\tconst turtonatorPressCull = species.id === 'turtonator' && moves.has('earthquake') && movePool.includes('shellsmash');\r\n\t\t\tconst pressIncompatible = ['shellsmash', 'mirrorcoat', 'whirlwind'].some(m => moves.has(m));\r\n\t\t\treturn { cull: turtonatorPressCull || pressIncompatible || counter.setupType === 'Special' };\r\n\t\tcase 'circlethrow':\r\n\t\t\t// Part of a special case for Throh to pick one specific Fighting move depending on its set\r\n\t\t\treturn { cull: moves.has('stormthrow') && !moves.has('rest') };\r\n\t\tcase 'drainpunch':\r\n\t\t\treturn { cull: moves.has('closecombat') || (!types.has('Fighting') && movePool.includes('swordsdance')) };\r\n\t\tcase 'dynamicpunch': case 'thunderouskick':\r\n\t\t\t// Dynamic Punch: Special case for Machamp to better split Guts and No Guard sets\r\n\t\t\treturn { cull: moves.has('closecombat') || moves.has('facade') };\r\n\t\tcase 'focusblast':\r\n\t\t\t// Special cases for Blastoise and Regice; Blastoise wants Shell Smash, and Regice wants Thunderbolt\r\n\t\t\treturn { cull: movePool.includes('shellsmash') || hasRestTalk };\r\n\t\tcase 'hammerarm':\r\n\t\t\t// Special case for Kangaskhan, which always wants Sucker Punch\r\n\t\t\treturn { cull: moves.has('fakeout') };\r\n\t\tcase 'stormthrow':\r\n\t\t\t// Part of a special case for Throh to pick one specific Fighting move depending on its set\r\n\t\t\treturn { cull: hasRestTalk };\r\n\t\tcase 'superpower':\r\n\t\t\treturn {\r\n\t\t\t\tcull: moves.has('hydropump') ||\r\n\t\t\t\t\t(counter.get('Physical') >= 4 && movePool.includes('uturn')) ||\r\n\t\t\t\t\t(moves.has('substitute') && !abilities.includes('Contrary')),\r\n\t\t\t\tisSetup: abilities.includes('Contrary'),\r\n\t\t\t};\r\n\t\tcase 'poisonjab':\r\n\t\t\treturn { cull: !types.has('Poison') && counter.get('Status') >= 2 };\r\n\t\tcase 'earthquake':\r\n\t\t\tconst doublesCull = moves.has('earthpower') || moves.has('highhorsepower');\r\n\t\t\t// Turtonator wants Body Press when it doesn't have Shell Smash\r\n\t\t\tconst turtQuakeCull = species.id === 'turtonator' && movePool.includes('bodypress') && movePool.includes('shellsmash');\r\n\t\t\tconst subToxicPossible = moves.has('substitute') && movePool.includes('toxic');\r\n\t\t\treturn { cull: turtQuakeCull || (isDoubles && doublesCull) || subToxicPossible || moves.has('bonemerang') };\r\n\t\tcase 'scorchingsands':\r\n\t\t\t// Special cases for Ninetales and Palossand; prevents status redundancy\r\n\t\t\treturn { cull: (\r\n\t\t\t\tmoves.has('willowisp') ||\r\n\t\t\t\tmoves.has('earthpower') ||\r\n\t\t\t\t(moves.has('toxic') && movePool.includes('earthpower'))\r\n\t\t\t) };\r\n\t\tcase 'airslash':\r\n\t\t\treturn { cull:\r\n\t\t\t\t(species.id === 'naganadel' && moves.has('nastyplot')) ||\r\n\t\t\t\thasRestTalk ||\r\n\t\t\t\t(abilities.includes('Simple') && !!counter.get('recovery')) ||\r\n\t\t\t\tcounter.setupType === 'Physical',\r\n\t\t\t};\r\n\t\tcase 'bravebird':\r\n\t\t\t// Special case for Mew, which only wants Brave Bird with Swords Dance\r\n\t\t\treturn { cull: moves.has('dragondance') };\r\n\t\tcase 'hurricane':\r\n\t\t\treturn { cull: counter.setupType === 'Physical' };\r\n\t\tcase 'futuresight':\r\n\t\t\treturn { cull: moves.has('psyshock') || moves.has('trick') || movePool.includes('teleport') };\r\n\t\tcase 'photongeyser':\r\n\t\t\t// Special case for Necrozma-DM, which always wants Dragon Dance\r\n\t\t\treturn { cull: moves.has('morningsun') };\r\n\t\tcase 'psychic':\r\n\t\t\tconst alcremieCase = species.id === 'alcremiegmax' && counter.get('Status') < 2;\r\n\t\t\treturn { cull: alcremieCase || (moves.has('psyshock') && (!!counter.setupType || isDoubles)) };\r\n\t\tcase 'psychicfangs':\r\n\t\t\t// Special case for Morpeko, which doesn't want 4 attacks Leftovers\r\n\t\t\treturn { cull: moves.has('rapidspin') };\r\n\t\tcase 'psyshock':\r\n\t\t\t// Special case for Sylveon which only wants Psyshock if it gets a Choice item\r\n\t\t\tconst sylveonCase = abilities.includes('Pixilate') && counter.get('Special') < 4;\r\n\t\t\treturn { cull: moves.has('psychic') || (!counter.setupType && sylveonCase) || (isDoubles && moves.has('psychic')) };\r\n\t\tcase 'bugbuzz':\r\n\t\t\treturn { cull: moves.has('uturn') && !counter.setupType };\r\n\t\tcase 'leechlife':\r\n\t\t\treturn { cull:\r\n\t\t\t\t(isDoubles && moves.has('lunge')) ||\r\n\t\t\t\t(moves.has('uturn') && !counter.setupType) ||\r\n\t\t\t\tmovePool.includes('spikes'),\r\n\t\t\t};\r\n\t\tcase 'stoneedge':\r\n\t\t\tconst gutsCullCondition = abilities.includes('Guts') && (!moves.has('dynamicpunch') || moves.has('spikes'));\r\n\t\t\tconst rockSlidePlusStatusPossible = counter.get('Status') && movePool.includes('rockslide');\r\n\t\t\tconst otherRockMove = moves.has('rockblast') || moves.has('rockslide');\r\n\t\t\tconst lucarioCull = species.id === 'lucario' && !!counter.setupType;\r\n\t\t\treturn { cull: gutsCullCondition || (!isDoubles && rockSlidePlusStatusPossible) || otherRockMove || lucarioCull };\r\n\t\tcase 'poltergeist':\r\n\t\t\t// Special case for Dhelmise in Doubles, which doesn't want both\r\n\t\t\treturn { cull: moves.has('knockoff') };\r\n\t\tcase 'shadowball':\r\n\t\t\treturn { cull:\r\n\t\t\t\t(isDoubles && moves.has('phantomforce')) ||\r\n\t\t\t\t// Special case for Sylveon, which never wants Shadow Ball as its only coverage move\r\n\t\t\t\t(abilities.includes('Pixilate') && (!!counter.setupType || counter.get('Status') > 1)) ||\r\n\t\t\t\t(!types.has('Ghost') && movePool.includes('focusblast')),\r\n\t\t\t};\r\n\t\tcase 'shadowclaw':\r\n\t\t\treturn { cull: types.has('Steel') && moves.has('shadowsneak') && counter.get('Physical') < 4 };\r\n\t\tcase 'dragonpulse': case 'spacialrend':\r\n\t\t\treturn { cull: moves.has('dracometeor') && counter.get('Special') < 4 };\r\n\t\tcase 'darkpulse':\r\n\t\t\tconst pulseIncompatible = ['foulplay', 'knockoff'].some(m => moves.has(m)) || (\r\n\t\t\t\tspecies.id === 'shiftry' && (moves.has('defog') || moves.has('suckerpunch'))\r\n\t\t\t);\r\n\t\t\t// Special clause to prevent bugged Shiftry sets with Sucker Punch + Nasty Plot\r\n\t\t\tconst shiftryCase = movePool.includes('nastyplot') && !moves.has('defog');\r\n\t\t\treturn { cull: pulseIncompatible && !shiftryCase && counter.setupType !== 'Special' };\r\n\t\tcase 'suckerpunch':\r\n\t\t\treturn { cull:\r\n\t\t\t\t// Shiftry in No Dynamax would otherwise get Choice Scarf Sucker Punch sometimes.\r\n\t\t\t\t(isNoDynamax && species.id === 'shiftry' && moves.has('defog')) ||\r\n\t\t\t\tmoves.has('rest') ||\r\n\t\t\t\tcounter.damagingMoves.size < 2 ||\r\n\t\t\t\t(counter.setupType === 'Special') ||\r\n\t\t\t\t(counter.get('Dark') > 1 && !types.has('Dark')),\r\n\t\t\t};\r\n\t\tcase 'dazzlinggleam':\r\n\t\t\treturn { cull: ['fleurcannon', 'moonblast', 'petaldance'].some(m => moves.has(m)) };\r\n\r\n\t\t// Status:\r\n\t\tcase 'bodyslam': case 'clearsmog':\r\n\t\t\tconst toxicCullCondition = moves.has('toxic') && !types.has('Normal');\r\n\t\t\treturn { cull: moves.has('sludgebomb') || moves.has('trick') || movePool.includes('recover') || toxicCullCondition };\r\n\t\tcase 'haze':\r\n\t\t\t// Special case for Corsola-Galar, which always wants Will-O-Wisp\r\n\t\t\treturn { cull: !teamDetails.stealthRock && (moves.has('stealthrock') || movePool.includes('stealthrock')) };\r\n\t\tcase 'hypnosis':\r\n\t\t\t// Special case for Xurkitree to properly split Blunder Policy and Choice item sets\r\n\t\t\treturn { cull: moves.has('voltswitch') };\r\n\t\tcase 'willowisp': case 'yawn':\r\n\t\t\t// Swords Dance is a special case for Rapidash\r\n\t\t\treturn { cull: moves.has('thunderwave') || moves.has('toxic') || moves.has('swordsdance') };\r\n\t\tcase 'painsplit': case 'recover': case 'synthesis':\r\n\t\t\treturn { cull: moves.has('rest') || moves.has('wish') || (move.id === 'synthesis' && moves.has('gigadrain')) };\r\n\t\tcase 'roost':\r\n\t\t\treturn { cull:\r\n\t\t\t\tmoves.has('throatchop') ||\r\n\t\t\t\t// Hawlucha doesn't want Roost + 3 attacks\r\n\t\t\t\t(moves.has('stoneedge') && species.id === 'hawlucha') ||\r\n\t\t\t\t// Special cases for Salamence, Dynaless Dragonite, and Scizor to help prevent sets with poor coverage or no setup.\r\n\t\t\t\t(moves.has('dualwingbeat') && (moves.has('outrage') || species.id === 'scizor')),\r\n\t\t\t};\r\n\t\tcase 'reflect': case 'lightscreen':\r\n\t\t\treturn { cull: !!teamDetails.screens };\r\n\t\tcase 'slackoff':\r\n\t\t\t// Special case to prevent Scaldless Slowking\r\n\t\t\treturn { cull: species.id === 'slowking' && !moves.has('scald') };\r\n\t\tcase 'substitute':\r\n\t\t\tconst moveBasedCull = ['bulkup', 'nastyplot', 'painsplit', 'roost', 'swordsdance'].some(m => movePool.includes(m));\r\n\t\t\t// Smaller formes of Gourgeist in Doubles don't want Poltergeist as their only attack\r\n\t\t\tconst doublesGourgeist = isDoubles && movePool.includes('powerwhip');\r\n\t\t\t// Calyrex wants Substitute + Leech Seed not Calm Mind + Leech Seed\r\n\t\t\tconst calmMindCullCondition = !counter.get('recovery') && movePool.includes('calmmind') && species.id !== 'calyrex';\r\n\t\t\t// Eiscue wants to always have Liquidation and Belly Drum\r\n\t\t\tconst eiscue = species.id === 'eiscue' && moves.has('zenheadbutt');\r\n\t\t\treturn { cull: moves.has('rest') || moveBasedCull || doublesGourgeist || calmMindCullCondition || eiscue };\r\n\t\tcase 'helpinghand':\r\n\t\t\t// Special case for Shuckle in Doubles, which doesn't want sets with no method to harm foes\r\n\t\t\treturn { cull: moves.has('acupressure') };\r\n\t\tcase 'wideguard':\r\n\t\t\treturn { cull: moves.has('protect') };\r\n\t\tcase 'grassknot':\r\n\t\t\t// Special case for Raichu and Heliolisk\r\n\t\t\treturn { cull: moves.has('surf') };\r\n\t\tcase 'icepunch':\r\n\t\t\t// Special case for Marshadow\r\n\t\t\treturn { cull: moves.has('rocktomb') };\r\n\t\tcase 'leechseed':\r\n\t\t\t// Special case for Calyrex to prevent Leech Seed + Calm Mind\r\n\t\t\treturn { cull: !!counter.setupType };\r\n\t\t}\r\n\r\n\t\treturn { cull: false };\r\n\t}\r\n\r\n\tshouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t\tisDoubles: boolean,\r\n\t\tisNoDynamax: boolean\r\n\t): boolean {\r\n\t\tif ([\r\n\t\t\t'Flare Boost', 'Hydration', 'Ice Body', 'Immunity', 'Innards Out', 'Insomnia', 'Misty Surge', 'Moody',\r\n\t\t\t'Perish Body', 'Quick Feet', 'Rain Dish', 'Snow Cloak', 'Steadfast', 'Steam Engine',\r\n\t\t].includes(ability)) return true;\r\n\r\n\t\tswitch (ability) {\r\n\t\t// Abilities which are primarily useful for certain moves\r\n\t\tcase 'Contrary': case 'Serene Grace': case 'Skill Link': case 'Strong Jaw':\r\n\t\t\treturn !counter.get(toID(ability));\r\n\t\tcase 'Analytic':\r\n\t\t\treturn (moves.has('rapidspin') || species.nfe || isDoubles);\r\n\t\tcase 'Blaze':\r\n\t\t\treturn (isDoubles && abilities.includes('Solar Power')) || (!isDoubles && !isNoDynamax && species.id === 'charizard');\r\n\t\t// case 'Bulletproof': case 'Overcoat':\r\n\t\t// \treturn !!counter.setupType;\r\n\t\tcase 'Chlorophyll':\r\n\t\t\treturn (species.baseStats.spe > 100 || !counter.get('Fire') && !moves.has('sunnyday') && !teamDetails.sun);\r\n\t\tcase 'Cloud Nine':\r\n\t\t\treturn (!isNoDynamax || species.id !== 'golduck');\r\n\t\tcase 'Competitive':\r\n\t\t\treturn (counter.get('Special') < 2 || (moves.has('rest') && moves.has('sleeptalk')));\r\n\t\tcase 'Compound Eyes': case 'No Guard':\r\n\t\t\treturn !counter.get('inaccurate');\r\n\t\tcase 'Cursed Body':\r\n\t\t\treturn abilities.includes('Infiltrator');\r\n\t\tcase 'Defiant':\r\n\t\t\treturn !counter.get('Physical');\r\n\t\tcase 'Download':\r\n\t\t\treturn (counter.damagingMoves.size < 3 || moves.has('trick'));\r\n\t\tcase 'Early Bird':\r\n\t\t\treturn (types.has('Grass') && isDoubles);\r\n\t\tcase 'Flash Fire':\r\n\t\t\treturn (this.dex.getEffectiveness('Fire', species) < -1 || abilities.includes('Drought'));\r\n\t\tcase 'Gluttony':\r\n\t\t\treturn !moves.has('bellydrum');\r\n\t\tcase 'Guts':\r\n\t\t\treturn (!moves.has('facade') && !moves.has('sleeptalk') && !species.nfe);\r\n\t\tcase 'Harvest':\r\n\t\t\treturn (abilities.includes('Frisk') && !isDoubles);\r\n\t\tcase 'Hustle': case 'Inner Focus':\r\n\t\t\treturn ((species.id !== 'glalie' && counter.get('Physical') < 2) || abilities.includes('Iron Fist'));\r\n\t\tcase 'Infiltrator':\r\n\t\t\treturn (moves.has('rest') && moves.has('sleeptalk')) || (isDoubles && abilities.includes('Clear Body'));\r\n\t\tcase 'Intimidate':\r\n\t\t\tif (species.id === 'salamence' && moves.has('dragondance')) return true;\r\n\t\t\treturn ['bodyslam', 'bounce', 'tripleaxel'].some(m => moves.has(m));\r\n\t\tcase 'Iron Fist':\r\n\t\t\treturn (counter.get('ironfist') < 2 || moves.has('dynamicpunch'));\r\n\t\tcase 'Justified':\r\n\t\t\treturn (isDoubles && abilities.includes('Inner Focus'));\r\n\t\tcase 'Lightning Rod':\r\n\t\t\treturn (species.types.includes('Ground') || (!isNoDynamax && counter.setupType === 'Physical'));\r\n\t\tcase 'Limber':\r\n\t\t\treturn species.types.includes('Electric') || moves.has('facade');\r\n\t\tcase 'Liquid Voice':\r\n\t\t\treturn !moves.has('hypervoice');\r\n\t\tcase 'Magic Guard':\r\n\t\t\t// For Sigilyph\r\n\t\t\treturn (abilities.includes('Tinted Lens') && !counter.get('Status') && !isDoubles);\r\n\t\tcase 'Mold Breaker':\r\n\t\t\treturn (\r\n\t\t\t\tabilities.includes('Adaptability') || abilities.includes('Scrappy') || (abilities.includes('Unburden') && !!counter.setupType) ||\r\n\t\t\t\t(abilities.includes('Sheer Force') && !!counter.get('sheerforce'))\r\n\t\t\t);\r\n\t\tcase 'Moxie':\r\n\t\t\treturn (counter.get('Physical') < 2 || moves.has('stealthrock') || moves.has('defog'));\r\n\t\tcase 'Overgrow':\r\n\t\t\treturn !counter.get('Grass');\r\n\t\tcase 'Own Tempo':\r\n\t\t\treturn !moves.has('petaldance');\r\n\t\tcase 'Power Construct':\r\n\t\t\treturn (species.forme === '10%' && !isDoubles);\r\n\t\tcase 'Prankster':\r\n\t\t\treturn !counter.get('Status');\r\n\t\tcase 'Pressure':\r\n\t\t\treturn (!!counter.setupType || counter.get('Status') < 2 || isDoubles);\r\n\t\tcase 'Refrigerate':\r\n\t\t\treturn !counter.get('Normal');\r\n\t\tcase 'Regenerator':\r\n\t\t\t// For Reuniclus\r\n\t\t\treturn abilities.includes('Magic Guard');\r\n\t\tcase 'Reckless':\r\n\t\t\treturn !counter.get('recoil') || moves.has('curse');\r\n\t\tcase 'Rock Head':\r\n\t\t\treturn !counter.get('recoil');\r\n\t\tcase 'Sand Force': case 'Sand Veil':\r\n\t\t\treturn !teamDetails.sand;\r\n\t\tcase 'Sand Rush':\r\n\t\t\treturn (!teamDetails.sand && (isNoDynamax || !counter.setupType || !counter.get('Rock') || moves.has('rapidspin')));\r\n\t\tcase 'Sap Sipper':\r\n\t\t\t// For Drampa, which wants Berserk with Roost\r\n\t\t\treturn moves.has('roost');\r\n\t\tcase 'Scrappy':\r\n\t\t\treturn (moves.has('earthquake') && species.id === 'miltank');\r\n\t\tcase 'Screen Cleaner':\r\n\t\t\treturn !!teamDetails.screens;\r\n\t\tcase 'Shed Skin':\r\n\t\t\t// For Scrafty\r\n\t\t\treturn moves.has('dragondance');\r\n\t\tcase 'Sheer Force':\r\n\t\t\treturn (!counter.get('sheerforce') || abilities.includes('Guts') || (species.id === 'druddigon' && !isDoubles));\r\n\t\tcase 'Shell Armor':\r\n\t\t\treturn (species.id === 'omastar' && (moves.has('spikes') || moves.has('stealthrock')));\r\n\t\tcase 'Slush Rush':\r\n\t\t\treturn (!teamDetails.hail && !abilities.includes('Swift Swim'));\r\n\t\tcase 'Sniper':\r\n\t\t\t// Inteleon wants Torrent unless it is Gmax\r\n\t\t\treturn (species.name === 'Inteleon' || (counter.get('Water') > 1 && !moves.has('focusenergy')));\r\n\t\tcase 'Solar Power':\r\n\t\t\treturn (isNoDynamax && !teamDetails.sun);\r\n\t\tcase 'Speed Boost':\r\n\t\t\treturn (isNoDynamax && species.id === 'ninjask');\r\n\t\tcase 'Steely Spirit':\r\n\t\t\treturn (moves.has('fakeout') && !isDoubles);\r\n\t\tcase 'Sturdy':\r\n\t\t\treturn (moves.has('bulkup') || !!counter.get('recoil') || (!isNoDynamax && abilities.includes('Solid Rock')));\r\n\t\tcase 'Swarm':\r\n\t\t\treturn (!counter.get('Bug') || !!counter.get('recovery'));\r\n\t\tcase 'Sweet Veil':\r\n\t\t\treturn types.has('Grass');\r\n\t\tcase 'Swift Swim':\r\n\t\t\tif (isNoDynamax) {\r\n\t\t\t\tconst neverWantsSwim = !moves.has('raindance') && [\r\n\t\t\t\t\t'Intimidate', 'Rock Head', 'Water Absorb',\r\n\t\t\t\t].some(m => abilities.includes(m));\r\n\t\t\t\tconst noSwimIfNoRain = !moves.has('raindance') && [\r\n\t\t\t\t\t'Cloud Nine', 'Lightning Rod', 'Intimidate', 'Rock Head', 'Sturdy', 'Water Absorb', 'Weak Armor',\r\n\t\t\t\t].some(m => abilities.includes(m));\r\n\t\t\t\treturn teamDetails.rain ? neverWantsSwim : noSwimIfNoRain;\r\n\t\t\t}\r\n\t\t\treturn (!moves.has('raindance') && (\r\n\t\t\t\t['Intimidate', 'Rock Head', 'Slush Rush', 'Water Absorb'].some(abil => abilities.includes(abil)) ||\r\n\t\t\t\t(abilities.includes('Lightning Rod') && !counter.setupType)\r\n\t\t\t));\r\n\t\tcase 'Synchronize':\r\n\t\t\treturn counter.get('Status') < 3;\r\n\t\tcase 'Technician':\r\n\t\t\treturn (\r\n\t\t\t\t!counter.get('technician') ||\r\n\t\t\t\tmoves.has('tailslap') ||\r\n\t\t\t\tabilities.includes('Punk Rock') ||\r\n\t\t\t\t// For Doubles Alolan Persian\r\n\t\t\t\tmovePool.includes('snarl')\r\n\t\t\t);\r\n\t\tcase 'Tinted Lens':\r\n\t\t\treturn (\r\n\t\t\t\t// For Sigilyph\r\n\t\t\t\tmoves.has('defog') ||\r\n\t\t\t\t// For Butterfree\r\n\t\t\t\t(moves.has('hurricane') && abilities.includes('Compound Eyes')) ||\r\n\t\t\t\t(counter.get('Status') > 2 && !counter.setupType)\r\n\t\t\t);\r\n\t\tcase 'Torrent':\r\n\t\t\t// For Inteleon-Gmax and Primarina\r\n\t\t\treturn (moves.has('focusenergy') || moves.has('hypervoice'));\r\n\t\tcase 'Tough Claws':\r\n\t\t\t// For Perrserker\r\n\t\t\treturn (types.has('Steel') && !moves.has('fakeout'));\r\n\t\tcase 'Unaware':\r\n\t\t\t// For Swoobat and Clefable\r\n\t\t\treturn (!!counter.setupType || moves.has('fireblast'));\r\n\t\tcase 'Unburden':\r\n\t\t\treturn (abilities.includes('Prankster') || !counter.setupType && !isDoubles);\r\n\t\tcase 'Volt Absorb':\r\n\t\t\treturn (this.dex.getEffectiveness('Electric', species) < -1);\r\n\t\tcase 'Water Absorb':\r\n\t\t\treturn (\r\n\t\t\t\tmoves.has('raindance') ||\r\n\t\t\t\t['Drizzle', 'Strong Jaw', 'Unaware', 'Volt Absorb'].some(abil => abilities.includes(abil))\r\n\t\t\t);\r\n\t\tcase 'Weak Armor':\r\n\t\t\t// The Speed less than 50 case is intended for Cursola, but could apply to any slow Pok\u00E9mon.\r\n\t\t\treturn (\r\n\t\t\t\t(!isNoDynamax && species.baseStats.spe > 50) ||\r\n\t\t\t\tspecies.id === 'skarmory' ||\r\n\t\t\t\tmoves.has('shellsmash') || moves.has('rapidspin')\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetAbility(\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t\tisDoubles: boolean,\r\n\t\tisNoDynamax: boolean\r\n\t): string {\r\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\r\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\r\n\r\n\t\tif (abilityData.length <= 1) return abilityData[0].name;\r\n\r\n\t\t// Hard-code abilities here\r\n\r\n\t\t// Lopunny, and other Facade users, don't want Limber, even if other abilities are poorly rated,\r\n\t\t// since paralysis would arguably be good for them.\r\n\t\tif (species.id === 'lopunny' && moves.has('facade')) return 'Cute Charm';\r\n\t\tif (species.id === 'copperajahgmax') return 'Heavy Metal';\r\n\t\tif (abilities.includes('Guts') &&\r\n\t\t\t// for Ursaring in BDSP\r\n\t\t\t!abilities.includes('Quick Feet') && (\r\n\t\t\tspecies.id === 'gurdurr' || species.id === 'throh' ||\r\n\t\t\tmoves.has('facade') || (moves.has('rest') && moves.has('sleeptalk'))\r\n\t\t)) return 'Guts';\r\n\t\tif (abilities.includes('Moxie') && (counter.get('Physical') > 3 || moves.has('bounce')) && !isDoubles) return 'Moxie';\r\n\r\n\t\tif (isDoubles) {\r\n\t\t\tif (abilities.includes('Competitive') && species.id !== 'boltund' && species.id !== 'gothitelle') return 'Competitive';\r\n\t\t\tif (abilities.includes('Friend Guard')) return 'Friend Guard';\r\n\t\t\tif (abilities.includes('Gluttony') && moves.has('recycle')) return 'Gluttony';\r\n\t\t\tif (abilities.includes('Guts')) return 'Guts';\r\n\t\t\tif (abilities.includes('Harvest')) return 'Harvest';\r\n\t\t\tif (abilities.includes('Healer') && (\r\n\t\t\t\tabilities.includes('Natural Cure') ||\r\n\t\t\t\t(abilities.includes('Aroma Veil') && this.randomChance(1, 2))\r\n\t\t\t)) return 'Healer';\r\n\t\t\tif (abilities.includes('Intimidate')) return 'Intimidate';\r\n\t\t\tif (species.id === 'lopunny') return 'Klutz';\r\n\t\t\tif (abilities.includes('Magic Guard') && !abilities.includes('Unaware')) return 'Magic Guard';\r\n\t\t\tif (abilities.includes('Ripen')) return 'Ripen';\r\n\t\t\tif (abilities.includes('Stalwart')) return 'Stalwart';\r\n\t\t\tif (abilities.includes('Storm Drain')) return 'Storm Drain';\r\n\t\t\tif (abilities.includes('Telepathy') && (\r\n\t\t\t\tabilities.includes('Pressure') || abilities.includes('Analytic')\r\n\t\t\t)) return 'Telepathy';\r\n\t\t}\r\n\r\n\t\tlet abilityAllowed: Ability[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilityData) {\r\n\t\t\tif (ability.rating >= 1 && !this.shouldCullAbility(\r\n\t\t\t\tability.name, types, moves, abilities, counter, movePool, teamDetails, species, '', '', isDoubles, isNoDynamax\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If all abilities are rejected, re-allow all abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tfor (const ability of abilityData) {\r\n\t\t\t\tif (ability.rating > 0) abilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t\tif (!abilityAllowed.length) abilityAllowed = abilityData;\r\n\t\t}\r\n\r\n\t\tif (abilityAllowed.length === 1) return abilityAllowed[0].name;\r\n\t\t// Sort abilities by rating with an element of randomness\r\n\t\t// All three abilities can be chosen\r\n\t\tif (abilityAllowed[2] && abilityAllowed[0].rating - 0.5 <= abilityAllowed[2].rating) {\r\n\t\t\tif (abilityAllowed[1].rating <= abilityAllowed[2].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\r\n\t\t\t}\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(2, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Third ability cannot be chosen\r\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t} else if (abilityAllowed[0].rating - 0.5 <= abilityAllowed[1].rating) {\r\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// After sorting, choose the first ability\r\n\t\treturn abilityAllowed[0].name;\r\n\t}\r\n\r\n\tgetHighPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean\r\n\t) {\r\n\t\t// not undefined \u2014 we want \"no item\" not \"go find a different item\"\r\n\t\tif (moves.has('acrobatics') && ability !== 'Ripen') return ability === 'Grassy Surge' ? 'Grassy Seed' : '';\r\n\t\tif (moves.has('geomancy') || moves.has('meteorbeam')) return 'Power Herb';\r\n\t\tif (moves.has('shellsmash')) {\r\n\t\t\tif (ability === 'Sturdy' && !isLead && !isDoubles) return 'Heavy-Duty Boots';\r\n\t\t\t// Shell Smash + Solid Rock is intended for Carracosta, but I think\r\n\t\t\t// any Pok\u00E9mon which can take a SE hit via Solid Rock deserves to have\r\n\t\t\t// its Shell Smash considered a good enough speed setup move for WP.\r\n\t\t\tif (ability === 'Solid Rock') return 'Weakness Policy';\r\n\t\t\treturn 'White Herb';\r\n\t\t}\r\n\t\t// Techno Blast should always be Water-type\r\n\t\tif (moves.has('technoblast')) return 'Douse Drive';\r\n\t\t// Species-specific logic\r\n\t\tif (\r\n\t\t\t['Corsola', 'Garchomp', 'Tangrowth'].includes(species.name) &&\r\n\t\t\tcounter.get('Status') &&\r\n\t\t\t!counter.setupType &&\r\n\t\t\t!isDoubles\r\n\t\t) return 'Rocky Helmet';\r\n\r\n\t\tif (species.name === 'Eternatus' && counter.get('Status') < 2) return 'Metronome';\r\n\t\tif (species.name === 'Farfetch\\u2019d') return 'Leek';\r\n\t\tif (species.name === 'Froslass' && !isDoubles) return 'Wide Lens';\r\n\t\tif (species.name === 'Latios' && counter.get('Special') === 2 && !isDoubles) return 'Soul Dew';\r\n\t\tif (species.name === 'Lopunny') return isDoubles ? 'Iron Ball' : 'Toxic Orb';\r\n\t\tif (species.baseSpecies === 'Marowak') return 'Thick Club';\r\n\t\tif (species.baseSpecies === 'Pikachu') return 'Light Ball';\r\n\t\tif (species.name === 'Regieleki' && !isDoubles) return 'Magnet';\r\n\t\tif (species.name === 'Shedinja') {\r\n\t\t\tconst noSash = !teamDetails.defog && !teamDetails.rapidSpin && !isDoubles;\r\n\t\t\treturn noSash ? 'Heavy-Duty Boots' : 'Focus Sash';\r\n\t\t}\r\n\t\tif (species.name === 'Shuckle' && moves.has('stickyweb')) return 'Mental Herb';\r\n\t\tif (species.name === 'Unfezant' || moves.has('focusenergy')) return 'Scope Lens';\r\n\t\tif (species.name === 'Pincurchin') return 'Shuca Berry';\r\n\t\tif (species.name === 'Wobbuffet' && moves.has('destinybond')) return 'Custap Berry';\r\n\t\tif (species.name === 'Scyther' && counter.damagingMoves.size > 3) return 'Choice Band';\r\n\t\tif (species.name === 'Cinccino' && !moves.has('uturn')) return 'Life Orb';\r\n\t\tif (moves.has('bellydrum') && moves.has('substitute')) return 'Salac Berry';\r\n\r\n\t\t// Misc item generation logic\r\n\t\tconst HDBBetterThanEviolite = (\r\n\t\t\t!isDoubles &&\r\n\t\t\t(!isLead || moves.has('uturn')) &&\r\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 2\r\n\t\t);\r\n\t\tif (species.nfe) return HDBBetterThanEviolite ? 'Heavy-Duty Boots' : 'Eviolite';\r\n\r\n\t\t// Ability based logic and miscellaneous logic\r\n\t\tif (species.name === 'Wobbuffet' || ['Cheek Pouch', 'Harvest', 'Ripen'].includes(ability)) return 'Sitrus Berry';\r\n\t\tif (ability === 'Gluttony') return this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki']) + ' Berry';\r\n\t\tif (\r\n\t\t\tability === 'Imposter' ||\r\n\t\t\t(ability === 'Magnet Pull' && moves.has('bodypress') && !isDoubles)\r\n\t\t) return 'Choice Scarf';\r\n\t\tif (\r\n\t\t\tability === 'Guts' &&\r\n\t\t\t(counter.get('Physical') > 2 || isDoubles)\r\n\t\t) {\r\n\t\t\treturn types.has('Fire') ? 'Toxic Orb' : 'Flame Orb';\r\n\t\t}\r\n\t\tif (ability === 'Magic Guard' && counter.damagingMoves.size > 1) {\r\n\t\t\treturn moves.has('counter') ? 'Focus Sash' : 'Life Orb';\r\n\t\t}\r\n\t\tif (ability === 'Sheer Force' && counter.get('sheerforce')) return 'Life Orb';\r\n\t\tif (ability === 'Unburden') return (moves.has('closecombat') || moves.has('curse')) ? 'White Herb' : 'Sitrus Berry';\r\n\r\n\t\tif (moves.has('trick') || (moves.has('switcheroo') && !isDoubles) || ability === 'Gorilla Tactics') {\r\n\t\t\tif (species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && !counter.get('priority') && ability !== 'Triage') {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (moves.has('rest') && !moves.has('sleeptalk') && ability !== 'Shed Skin') return 'Chesto Berry';\r\n\t\tif (moves.has('hypnosis') && ability === 'Beast Boost') return 'Blunder Policy';\r\n\t\tif (moves.has('bellydrum')) return 'Sitrus Berry';\r\n\r\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 2 && !isDoubles) {\r\n\t\t\treturn 'Heavy-Duty Boots';\r\n\t\t}\r\n\t}\r\n\r\n\t/** Item generation specific to Random Doubles */\r\n\tgetDoublesItem(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t): string | undefined {\r\n\t\tconst defensiveStatTotal = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\r\n\r\n\t\tif (\r\n\t\t\t(['dragonenergy', 'eruption', 'waterspout'].some(m => moves.has(m))) &&\r\n\t\t\tcounter.damagingMoves.size >= 4\r\n\t\t) return 'Choice Scarf';\r\n\t\tif (moves.has('blizzard') && ability !== 'Snow Warning' && !teamDetails.hail) return 'Blunder Policy';\r\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 2 && !types.has('Flying')) return 'Heavy-Duty Boots';\r\n\t\tif (counter.get('Physical') >= 4 && ['fakeout', 'feint', 'rapidspin', 'suckerpunch'].every(m => !moves.has(m)) && (\r\n\t\t\ttypes.has('Dragon') || types.has('Fighting') || types.has('Rock') ||\r\n\t\t\tmoves.has('flipturn') || moves.has('uturn')\r\n\t\t)) {\r\n\t\t\treturn (\r\n\t\t\t\t!counter.get('priority') && !abilities.includes('Speed Boost') &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 100 &&\r\n\t\t\t\tthis.randomChance(1, 2)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\tcounter.get('Special') >= 4 &&\r\n\t\t\t\t(types.has('Dragon') || types.has('Fighting') || types.has('Rock') || moves.has('voltswitch'))\r\n\t\t\t) || (\r\n\t\t\t\t(counter.get('Special') >= 3 && (moves.has('flipturn') || moves.has('uturn'))) &&\r\n\t\t\t\t!moves.has('acidspray') && !moves.has('electroweb')\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn (\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 100 && this.randomChance(1, 2)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\t\t// This one is intentionally below the Choice item checks.\r\n\t\tif ((defensiveStatTotal < 250 && ability === 'Regenerator') || species.name === 'Pheromosa') return 'Life Orb';\r\n\t\tif (counter.damagingMoves.size >= 4 && defensiveStatTotal >= 275) return 'Assault Vest';\r\n\t\tif (\r\n\t\t\tcounter.damagingMoves.size >= 3 &&\r\n\t\t\tspecies.baseStats.spe >= 60 &&\r\n\t\t\tability !== 'Multiscale' && ability !== 'Sturdy' &&\r\n\t\t\t[\r\n\t\t\t\t'acidspray', 'clearsmog', 'electroweb', 'fakeout', 'feint', 'icywind',\r\n\t\t\t\t'incinerate', 'naturesmadness', 'rapidspin', 'snarl', 'uturn',\r\n\t\t\t].every(m => !moves.has(m))\r\n\t\t) return (ability === 'Defeatist' || defensiveStatTotal >= 275) ? 'Sitrus Berry' : 'Life Orb';\r\n\t}\r\n\r\n\tgetMediumPriorityItem(\r\n\t\tability: string,\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tisNoDynamax: boolean\r\n\t): string | undefined {\r\n\t\tconst defensiveStatTotal = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\r\n\r\n\t\t// Choice items\r\n\t\tif (\r\n\t\t\t!isDoubles && counter.get('Physical') >= 4 && ability !== 'Serene Grace' &&\r\n\t\t\t['fakeout', 'flamecharge', 'rapidspin'].every(m => !moves.has(m))\r\n\t\t) {\r\n\t\t\tconst scarfReqs = (\r\n\t\t\t\t(species.baseStats.atk >= 100 || ability === 'Huge Power') &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\tability !== 'Speed Boost' && !counter.get('priority') &&\r\n\t\t\t\t(isNoDynamax || ['bounce', 'dualwingbeat'].every(m => !moves.has(m)))\r\n\t\t\t);\r\n\t\t\treturn (scarfReqs && this.randomChance(2, 3)) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\t\tif (!isDoubles && (\r\n\t\t\t(counter.get('Special') >= 4 && !moves.has('futuresight')) ||\r\n\t\t\t(counter.get('Special') >= 3 && ['flipturn', 'partingshot', 'uturn'].some(m => moves.has(m)))\r\n\t\t)) {\r\n\t\t\tconst scarfReqs = (\r\n\t\t\t\tspecies.baseStats.spa >= 100 &&\r\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\r\n\t\t\t\tability !== 'Tinted Lens' && !counter.get('Physical')\r\n\t\t\t);\r\n\t\t\treturn (scarfReqs && this.randomChance(2, 3)) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t!isDoubles &&\r\n\t\t\tcounter.get('Physical') >= 3 &&\r\n\t\t\t!moves.has('rapidspin') &&\r\n\t\t\t['copycat', 'memento', 'partingshot'].some(m => moves.has(m))\r\n\t\t) return 'Choice Band';\r\n\t\tif (\r\n\t\t\t!isDoubles &&\r\n\t\t\t((counter.get('Physical') >= 3 && moves.has('defog')) || (counter.get('Special') >= 3 && moves.has('healingwish'))) &&\r\n\t\t\t!counter.get('priority') && !moves.has('uturn')\r\n\t\t) return 'Choice Scarf';\r\n\r\n\t\t// Palkia sometimes wants Choice items instead\r\n\t\tif (species.name === 'Palkia') return 'Lustrous Orb';\r\n\r\n\t\t// Other items\r\n\t\tif (\r\n\t\t\tmoves.has('raindance') || moves.has('sunnyday') ||\r\n\t\t\t(ability === 'Speed Boost' && !counter.get('hazards')) ||\r\n\t\t\t(ability === 'Stance Change' && counter.damagingMoves.size >= 3)\r\n\t\t) return 'Life Orb';\r\n\t\tif (\r\n\t\t\t!isDoubles &&\r\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 1 && (\r\n\t\t\t\t['Defeatist', 'Emergency Exit', 'Multiscale'].includes(ability) ||\r\n\t\t\t\t['courtchange', 'defog', 'rapidspin'].some(m => moves.has(m))\r\n\t\t\t)\r\n\t\t) return 'Heavy-Duty Boots';\r\n\t\tif (species.name === 'Necrozma-Dusk-Mane' || (\r\n\t\t\tthis.dex.getEffectiveness('Ground', species) < 2 &&\r\n\t\t\tcounter.get('speedsetup') &&\r\n\t\t\tcounter.damagingMoves.size >= 3 &&\r\n\t\t\tdefensiveStatTotal >= 300\r\n\t\t)) return 'Weakness Policy';\r\n\t\tif (counter.damagingMoves.size >= 4 && defensiveStatTotal >= 235) return 'Assault Vest';\r\n\t\tif (\r\n\t\t\t['clearsmog', 'curse', 'haze', 'healbell', 'protect', 'sleeptalk', 'strangesteam'].some(m => moves.has(m)) &&\r\n\t\t\t!isDoubles\r\n\t\t) return 'Leftovers';\r\n\t}\r\n\r\n\tgetLowPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tisDoubles: boolean,\r\n\t\tisNoDynamax: boolean\r\n\t): string | undefined {\r\n\t\tconst defensiveStatTotal = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\r\n\r\n\t\tif (\r\n\t\t\tisLead && !isDoubles &&\r\n\t\t\t!['Disguise', 'Sturdy'].includes(ability) && !moves.has('substitute') &&\r\n\t\t\t!counter.get('drain') && !counter.get('recoil') && !counter.get('recovery') &&\r\n\t\t\t((defensiveStatTotal <= 250 && counter.get('hazards')) || defensiveStatTotal <= 210)\r\n\t\t) return 'Focus Sash';\r\n\t\tif (\r\n\t\t\tmoves.has('clangoroussoul') ||\r\n\t\t\t// We manually check for speed-boosting moves, rather than using `counter.get('speedsetup')`,\r\n\t\t\t// because we want to check for ANY speed boosting move.\r\n\t\t\t// In particular, Shift Gear + Boomburst Toxtricity should get Throat Spray.\r\n\t\t\t(moves.has('boomburst') && Array.from(moves).some(m => Dex.moves.get(m).boosts?.spe))\r\n\t\t) return 'Throat Spray';\r\n\r\n\t\tconst rockWeaknessCase = (\r\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 1 &&\r\n\t\t\t(!teamDetails.defog || ability === 'Intimidate' || moves.has('uturn') || moves.has('voltswitch'))\r\n\t\t);\r\n\t\tconst spinnerCase = (moves.has('rapidspin') && (ability === 'Regenerator' || !!counter.get('recovery')));\r\n\t\tif (!isDoubles && (rockWeaknessCase || spinnerCase)) return 'Heavy-Duty Boots';\r\n\r\n\t\tif (\r\n\t\t\t!isDoubles && this.dex.getEffectiveness('Ground', species) >= 2 && !types.has('Poison') &&\r\n\t\t\tability !== 'Levitate' && !abilities.includes('Iron Barbs')\r\n\t\t) return 'Air Balloon';\r\n\t\tif (\r\n\t\t\t!isDoubles &&\r\n\t\t\tcounter.damagingMoves.size >= 3 &&\r\n\t\t\t!counter.get('damage') &&\r\n\t\t\tability !== 'Sturdy' &&\r\n\t\t\t(species.baseStats.spe >= 90 || !moves.has('voltswitch')) &&\r\n\t\t\t['foulplay', 'rapidspin', 'substitute', 'uturn'].every(m => !moves.has(m)) && (\r\n\t\t\t\tcounter.get('speedsetup') ||\r\n\t\t\t\t// No Dynamax Buzzwole doesn't want Life Orb with Bulk Up + 3 attacks\r\n\t\t\t\t(counter.get('drain') && (!isNoDynamax || species.id !== 'buzzwole' || moves.has('roost'))) ||\r\n\t\t\t\tmoves.has('trickroom') || moves.has('psystrike') ||\r\n\t\t\t\t(species.baseStats.spe > 40 && defensiveStatTotal < 275)\r\n\t\t\t)\r\n\t\t) return 'Life Orb';\r\n\t\tif (\r\n\t\t\t!isDoubles &&\r\n\t\t\tcounter.damagingMoves.size >= 4 &&\r\n\t\t\t!counter.get('Dragon') &&\r\n\t\t\t!counter.get('Normal')\r\n\t\t) {\r\n\t\t\treturn 'Expert Belt';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t!isDoubles &&\r\n\t\t\t!moves.has('substitute') &&\r\n\t\t\t(moves.has('dragondance') || moves.has('swordsdance')) &&\r\n\t\t\t(moves.has('outrage') || (\r\n\t\t\t\t['Bug', 'Fire', 'Ground', 'Normal', 'Poison'].every(type => !types.has(type)) &&\r\n\t\t\t\t!['Pastel Veil', 'Storm Drain'].includes(ability)\r\n\t\t\t))\r\n\t\t) return 'Lum Berry';\r\n\t}\r\n\r\n\tgetLevel(\r\n\t\tspecies: Species,\r\n\t\tisDoubles: boolean,\r\n\t\tisNoDynamax: boolean,\r\n\t): number {\r\n\t\tconst data = this.randomData[species.id];\r\n\t\t// level set by rules\r\n\t\tif (this.adjustLevel) return this.adjustLevel;\r\n\t\t// doubles levelling\r\n\t\tif (isDoubles && data.doublesLevel) return data.doublesLevel;\r\n\t\t// No Dmax levelling\r\n\t\tif (isNoDynamax) {\r\n\t\t\tconst tier = species.name.endsWith('-Gmax') ? this.dex.species.get(species.changesFrom).tier : species.tier;\r\n\t\t\tconst tierScale: Partial<Record<Species['tier'], number>> = {\r\n\t\t\t\tUber: 76,\r\n\t\t\t\tOU: 80,\r\n\t\t\t\tUUBL: 81,\r\n\t\t\t\tUU: 82,\r\n\t\t\t\tRUBL: 83,\r\n\t\t\t\tRU: 84,\r\n\t\t\t\tNUBL: 85,\r\n\t\t\t\tNU: 86,\r\n\t\t\t\tPUBL: 87,\r\n\t\t\t\tPU: 88, \"(PU)\": 88, NFE: 88,\r\n\t\t\t};\r\n\t\t\tconst customScale: { [k: string]: number } = {\r\n\t\t\t\t// These Pokemon are too strong and need a lower level\r\n\t\t\t\tzaciancrowned: 65, calyrexshadow: 68, xerneas: 70, necrozmaduskmane: 72, zacian: 72, kyogre: 73, eternatus: 73,\r\n\t\t\t\tzekrom: 74, marshadow: 75, urshifurapidstrike: 79, haxorus: 80, inteleon: 80,\r\n\t\t\t\tcresselia: 83, jolteon: 84, swoobat: 84, dugtrio: 84, slurpuff: 84, polteageist: 84,\r\n\t\t\t\twobbuffet: 86, scrafty: 86,\r\n\t\t\t\t// These Pokemon are too weak and need a higher level\r\n\t\t\t\tdelibird: 100, vespiquen: 96, pikachu: 92, shedinja: 92, solrock: 90, arctozolt: 88, reuniclus: 87,\r\n\t\t\t\tdecidueye: 87, noivern: 85, magnezone: 82, slowking: 81,\r\n\t\t\t};\r\n\t\t\treturn customScale[species.id] || tierScale[tier] || 80;\r\n\t\t}\r\n\t\t// BDSP tier levelling\r\n\t\tif (this.dex.currentMod === 'gen8bdsp') {\r\n\t\t\tconst tierScale: Partial<Record<Species['tier'], number>> = {\r\n\t\t\t\tUber: 76, Unreleased: 76,\r\n\t\t\t\tOU: 80,\r\n\t\t\t\tUUBL: 81,\r\n\t\t\t\tUU: 82,\r\n\t\t\t\tRUBL: 83,\r\n\t\t\t\tRU: 84,\r\n\t\t\t\tNUBL: 85,\r\n\t\t\t\tNU: 86,\r\n\t\t\t\tPUBL: 87,\r\n\t\t\t\tPU: 88, \"(PU)\": 88, NFE: 88,\r\n\t\t\t};\r\n\t\t\tconst customScale: { [k: string]: number } = {\r\n\t\t\t\tdelibird: 100, dugtrio: 76, glalie: 76, luvdisc: 100, spinda: 100, unown: 100,\r\n\t\t\t};\r\n\r\n\t\t\treturn customScale[species.id] || tierScale[species.tier] || 80;\r\n\t\t}\r\n\t\t// Arbitrary levelling base on data files (typically winrate-influenced)\r\n\t\tif (data.level) return data.level;\r\n\t\t// Finally default to level 80\r\n\t\treturn 80;\r\n\t}\r\n\r\n\tgetForme(species: Species): string {\r\n\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\r\n\t\t\treturn species.battleOnly;\r\n\t\t}\r\n\t\tif (species.cosmeticFormes) return this.sample([species.name].concat(species.cosmeticFormes));\r\n\t\tif (species.name.endsWith('-Gmax')) return species.name.slice(0, -5);\r\n\r\n\t\t// Consolidate mostly-cosmetic formes, at least for the purposes of Random Battles\r\n\t\tif (['Magearna', 'Polteageist', 'Zarude'].includes(species.baseSpecies)) {\r\n\t\t\treturn this.sample([species.name].concat(species.otherFormes!));\r\n\t\t}\r\n\t\tif (species.baseSpecies === 'Basculin') return 'Basculin' + this.sample(['', '-Blue-Striped']);\r\n\t\tif (species.baseSpecies === 'Keldeo' && this.gen <= 7) return 'Keldeo' + this.sample(['', '-Resolute']);\r\n\t\tif (species.baseSpecies === 'Pikachu' && this.dex.currentMod === 'gen8') {\r\n\t\t\treturn 'Pikachu' + this.sample(\r\n\t\t\t\t['', '-Original', '-Hoenn', '-Sinnoh', '-Unova', '-Kalos', '-Alola', '-Partner', '-World']\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn species.name;\r\n\t}\r\n\r\n\trandomSet(\r\n\t\tspecies: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false,\r\n\t\tisDoubles = false,\r\n\t\tisNoDynamax = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tconst forme = this.getForme(species);\r\n\t\tconst gmax = species.name.endsWith('-Gmax');\r\n\r\n\t\tconst data = this.randomData[species.id];\r\n\r\n\t\tconst randMoves =\r\n\t\t\t(isDoubles && data.doublesMoves) ||\r\n\t\t\t(isNoDynamax && data.noDynamaxMoves) ||\r\n\t\t\tdata.moves;\r\n\t\tconst movePool: string[] = [...(randMoves || this.dex.species.getMovePool(species.id))];\r\n\t\tif (this.format.playerCount > 2) {\r\n\t\t\t// Random Multi Battle uses doubles move pools, but Ally Switch fails in multi battles\r\n\t\t\t// Random Free-For-All also uses doubles move pools, for now\r\n\t\t\tconst allySwitch = movePool.indexOf('allyswitch');\r\n\t\t\tif (allySwitch > -1) {\r\n\t\t\t\tif (movePool.length > this.maxMoveCount) {\r\n\t\t\t\t\tthis.fastPop(movePool, allySwitch);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Ideally, we'll never get here, but better to have a move that usually does nothing than one that always does\r\n\t\t\t\t\tmovePool[allySwitch] = 'sleeptalk';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst rejectedPool = [];\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\r\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\r\n\r\n\t\tconst types = new Set(species.types);\r\n\t\tconst abilitiesSet = new Set(Object.values(species.abilities));\r\n\t\tif (species.unreleasedHidden) abilitiesSet.delete(species.abilities.H);\r\n\t\tconst abilities = Array.from(abilitiesSet);\r\n\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter: MoveCounter;\r\n\t\t// This is just for BDSP Unown;\r\n\t\t// it can be removed from this file if BDSP gets its own random-teams file in the future.\r\n\t\tlet hasHiddenPower = false;\r\n\r\n\t\tdo {\r\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\r\n\t\t\tconst pool = (movePool.length ? movePool : rejectedPool);\r\n\t\t\twhile (moves.size < this.maxMoveCount && pool.length) {\r\n\t\t\t\tconst moveid = this.sampleNoReplace(pool);\r\n\t\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\t\tif (hasHiddenPower) continue;\r\n\t\t\t\t\thasHiddenPower = true;\r\n\t\t\t\t}\r\n\t\t\t\tmoves.add(moveid);\r\n\t\t\t}\r\n\r\n\t\t\tcounter = this.queryMoves(moves, species.types, abilities, movePool);\r\n\t\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\t// Iterate through the moves again, this time to cull them:\r\n\t\t\tfor (const moveid of moves) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tlet { cull, isSetup } = this.shouldCullMove(\r\n\t\t\t\t\tmove, types, moves, abilities, counter,\r\n\t\t\t\t\tmovePool, teamDetails, species, isLead, isDoubles, isNoDynamax\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (move.id !== 'photongeyser' && (\r\n\t\t\t\t\t(move.category === 'Physical' && counter.setupType === 'Special') ||\r\n\t\t\t\t\t(move.category === 'Special' && counter.setupType === 'Physical')\r\n\t\t\t\t)) {\r\n\t\t\t\t\t// Reject STABs last in case the setup type changes later on\r\n\t\t\t\t\tconst stabs = counter.get(species.types[0]) + (species.types[1] ? counter.get(species.types[1]) : 0);\r\n\t\t\t\t\tif (!types.has(move.type) || stabs > 1 || counter.get(move.category) < 2) cull = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Pokemon should have moves that benefit their types, stats, or ability\r\n\t\t\t\tconst isLowBP = move.basePower && move.basePower < 50;\r\n\r\n\t\t\t\t// Genesect-Douse should never reject Techno Blast\r\n\t\t\t\tconst moveIsRejectable = (\r\n\t\t\t\t\t!(species.id === 'genesectdouse' && move.id === 'technoblast') &&\r\n\t\t\t\t\t!(species.id === 'togekiss' && move.id === 'nastyplot') &&\r\n\t\t\t\t\t!(species.id === 'shuckle' && ['stealthrock', 'stickyweb'].includes(move.id)) && (\r\n\t\t\t\t\t\tmove.category === 'Status' ||\r\n\t\t\t\t\t\t(!types.has(move.type) && move.id !== 'judgment') ||\r\n\t\t\t\t\t\t(isLowBP && !move.multihit && !abilities.includes('Technician'))\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t\t// Setup-supported moves should only be rejected under specific circumstances\r\n\t\t\t\tconst notImportantSetup = (\r\n\t\t\t\t\t!counter.setupType ||\r\n\t\t\t\t\tcounter.setupType === 'Mixed' ||\r\n\t\t\t\t\t(counter.get(counter.setupType) + counter.get('Status') > 3 && !counter.get('hazards')) ||\r\n\t\t\t\t\t(move.category !== counter.setupType && move.category !== 'Status')\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (moveIsRejectable && (\r\n\t\t\t\t\t!cull && !isSetup && !move.weather && !move.stallingMove && notImportantSetup && !move.damage &&\r\n\t\t\t\t\t(isDoubles ? this.unrejectableMovesInDoubles(move) : this.unrejectableMovesInSingles(move))\r\n\t\t\t\t)) {\r\n\t\t\t\t\t// There may be more important moves that this Pokemon needs\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t// Pokemon should have at least one STAB move\r\n\t\t\t\t\t\t(!counter.get('stab') && counter.get('physicalpool') + counter.get('specialpool') > 0 && move.id !== 'stickyweb') ||\r\n\t\t\t\t\t\t// Swords Dance Mew should have Brave Bird\r\n\t\t\t\t\t\t(moves.has('swordsdance') && species.id === 'mew' && runEnforcementChecker('Flying')) ||\r\n\t\t\t\t\t\t// Dhelmise should have Anchor Shot\r\n\t\t\t\t\t\t(abilities.includes('Steelworker') && runEnforcementChecker('Steel')) ||\r\n\t\t\t\t\t\t// Check for miscellaneous important moves\r\n\t\t\t\t\t\t(!isDoubles && runEnforcementChecker('recovery') && move.id !== 'stickyweb') ||\r\n\t\t\t\t\t\trunEnforcementChecker('screens') ||\r\n\t\t\t\t\t\trunEnforcementChecker('misc') ||\r\n\t\t\t\t\t\t((isLead || species.id === 'shuckle') && runEnforcementChecker('lead')) ||\r\n\t\t\t\t\t\t(moves.has('leechseed') && runEnforcementChecker('leechseed'))\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcull = true;\r\n\t\t\t\t\t// Pokemon should have moves that benefit their typing\r\n\t\t\t\t\t// Don't cull Sticky Web in type-based enforcement, and make sure Azumarill always has Aqua Jet\r\n\t\t\t\t\t} else if (move.id !== 'stickyweb' && !(species.id === 'azumarill' && move.id === 'aquajet')) {\r\n\t\t\t\t\t\tfor (const type of types) {\r\n\t\t\t\t\t\t\tif (runEnforcementChecker(type)) {\r\n\t\t\t\t\t\t\t\tcull = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Sleep Talk shouldn't be selected without Rest\r\n\t\t\t\tif (move.id === 'rest' && cull) {\r\n\t\t\t\t\tconst sleeptalk = movePool.indexOf('sleeptalk');\r\n\t\t\t\t\tif (sleeptalk >= 0) {\r\n\t\t\t\t\t\tif (movePool.length < 2) {\r\n\t\t\t\t\t\t\tcull = false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.fastPop(movePool, sleeptalk);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Remove rejected moves from the move list\r\n\t\t\t\tif (cull && movePool.length) {\r\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) hasHiddenPower = false;\r\n\t\t\t\t\tif (move.category !== 'Status' && !move.damage) rejectedPool.push(moveid);\r\n\t\t\t\t\tmoves.delete(moveid);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (cull && rejectedPool.length) {\r\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) hasHiddenPower = false;\r\n\t\t\t\t\tmoves.delete(moveid);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} while (moves.size < this.maxMoveCount && (movePool.length || rejectedPool.length));\r\n\r\n\t\t// for BD/SP only\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet hpType;\r\n\t\t\tfor (const move of moves) {\r\n\t\t\t\tif (move.startsWith('hiddenpower')) hpType = move.substr(11);\r\n\t\t\t}\r\n\t\t\tif (!hpType) throw new Error(`hasHiddenPower is true, but no Hidden Power move was found.`);\r\n\t\t\tconst HPivs = this.dex.types.get(hpType).HPivs;\r\n\t\t\tlet iv: StatID;\r\n\t\t\tfor (iv in HPivs) {\r\n\t\t\t\tivs[iv] = HPivs[iv]!;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tability = this.getAbility(types, moves, abilities, counter, movePool, teamDetails, species,\r\n\t\t\t'', '', isDoubles, isNoDynamax);\r\n\r\n\t\tif (species.requiredItems) {\r\n\t\t\titem = this.sample(species.requiredItems);\r\n\t\t// First, the extra high-priority items\r\n\t\t} else {\r\n\t\t\titem = this.getHighPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles);\r\n\t\t\tif (item === undefined && isDoubles) {\r\n\t\t\t\titem = this.getDoublesItem(ability, types, moves, abilities, counter, teamDetails, species);\r\n\t\t\t}\r\n\t\t\tif (item === undefined) {\r\n\t\t\t\titem = this.getMediumPriorityItem(ability, moves, counter, species, isLead, isDoubles, isNoDynamax);\r\n\t\t\t}\r\n\t\t\tif (item === undefined) {\r\n\t\t\t\titem = this.getLowPriorityItem(\r\n\t\t\t\t\tability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, isNoDynamax\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// fallback\r\n\t\t\tif (item === undefined) item = isDoubles ? 'Sitrus Berry' : 'Leftovers';\r\n\t\t}\r\n\r\n\t\t// For Trick / Switcheroo\r\n\t\tif (item === 'Leftovers' && types.has('Poison')) {\r\n\t\t\titem = 'Black Sludge';\r\n\t\t}\r\n\r\n\t\tconst level: number = this.getLevel(species, isDoubles, isNoDynamax);\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tconst srImmunity = ability === 'Magic Guard' || item === 'Heavy-Duty Boots';\r\n\t\tconst srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\tconst multipleOfFourNecessary = (moves.has('substitute') && !['Leftovers', 'Black Sludge'].includes(item) && (\r\n\t\t\t\titem === 'Sitrus Berry' ||\r\n\t\t\t\titem === 'Salac Berry' ||\r\n\t\t\t\tability === 'Power Construct'\r\n\t\t\t));\r\n\t\t\tif (multipleOfFourNecessary) {\r\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\r\n\t\t\t\tif (hp % 4 === 0) break;\r\n\t\t\t} else if (moves.has('bellydrum') && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\r\n\t\t\t\t// Belly Drum should activate Sitrus Berry\r\n\t\t\t\tif (hp % 2 === 0) break;\r\n\t\t\t} else if (moves.has('substitute') && moves.has('reversal')) {\r\n\t\t\t\t// Reversal users should be able to use four Substitutes\r\n\t\t\t\tif (hp % 4 > 0) break;\r\n\t\t\t} else {\r\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\r\n\t\t\t\tif (srWeakness <= 0 || hp % (4 / srWeakness) > 0) break;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\tif (moves.has('shellsidearm') && item === 'Choice Specs') evs.atk -= 8;\r\n\r\n\t\t// Minimize confusion damage\r\n\t\tconst noAttackStatMoves = [...moves].every(m => {\r\n\t\t\tconst move = this.dex.moves.get(m);\r\n\t\t\tif (move.damageCallback || move.damage) return true;\r\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress';\r\n\t\t});\r\n\t\tif (noAttackStatMoves && !moves.has('transform') && (!moves.has('shellsidearm') || !counter.get('Status'))) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = 0;\r\n\t\t}\r\n\r\n\t\t// Ensure Nihilego's Beast Boost gives it Special Attack boosts instead of Special Defense\r\n\t\tif (forme === 'Nihilego') evs.spd -= 32;\r\n\r\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\r\n\t\t\tevs.spe = 0;\r\n\t\t\tivs.spe = 0;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tgigantamax: gmax,\r\n\t\t\tlevel,\r\n\t\t\tmoves: Array.from(moves),\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t};\r\n\t}\r\n\r\n\tgetPokemonPool(\r\n\t\ttype: string,\r\n\t\tpokemonToExclude: RandomTeamsTypes.RandomSet[] = [],\r\n\t\tisMonotype = false,\r\n\t\tpokemonList: string[]\r\n\t): [{ [k: string]: string[] }, string[]] {\r\n\t\tconst exclude = pokemonToExclude.map(p => toID(p.species));\r\n\t\tconst pokemonPool: { [k: string]: string[] } = {};\r\n\t\tconst baseSpeciesPool = [];\r\n\t\tfor (const pokemon of pokemonList) {\r\n\t\t\tlet species = this.dex.species.get(pokemon);\r\n\t\t\tif (exclude.includes(species.id)) continue;\r\n\t\t\tif (isMonotype) {\r\n\t\t\t\tif (!species.types.includes(type)) continue;\r\n\t\t\t\tif (typeof species.battleOnly === 'string') {\r\n\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\r\n\t\t\t\t\tif (!species.types.includes(type)) continue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (species.baseSpecies in pokemonPool) {\r\n\t\t\t\tpokemonPool[species.baseSpecies].push(pokemon);\r\n\t\t\t} else {\r\n\t\t\t\tpokemonPool[species.baseSpecies] = [pokemon];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Include base species 1x if 1-3 formes, 2x if 4-6 formes, 3x if 7+ formes\r\n\t\tfor (const baseSpecies of Object.keys(pokemonPool)) {\r\n\t\t\t// Squawkabilly has 4 formes, but only 2 functionally different formes, so only include it 1x\r\n\t\t\tconst weight = (baseSpecies === 'Squawkabilly') ? 1 : Math.min(Math.ceil(pokemonPool[baseSpecies].length / 3), 3);\r\n\t\t\tfor (let i = 0; i < weight; i++) baseSpeciesPool.push(baseSpecies);\r\n\t\t}\r\n\t\treturn [pokemonPool, baseSpeciesPool];\r\n\t}\r\n\r\n\trandomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.getSeed();\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst isDoubles = this.format.gameType !== 'singles';\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\t// PotD stuff\r\n\t\tconst usePotD = global.Config && Config.potd && ruleTable.has('potd');\r\n\t\tconst potd = usePotD ? this.dex.species.get(Config.potd) : null;\r\n\r\n\t\tconst baseFormes: { [k: string]: number } = {};\r\n\r\n\t\tconst typeCount: { [k: string]: number } = {};\r\n\t\tconst typeComboCount: { [k: string]: number } = {};\r\n\t\tconst typeWeaknesses: { [k: string]: number } = {};\r\n\t\tconst typeDoubleWeaknesses: { [k: string]: number } = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\tconst pokemonList = [];\r\n\t\tfor (const poke of Object.keys(this.randomData)) {\r\n\t\t\tif (isDoubles && this.randomData[poke]?.doublesMoves || !isDoubles && this.randomData[poke]?.moves) {\r\n\t\t\t\tpokemonList.push(poke);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\tlet species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Illusion shouldn't be on the last slot\r\n\t\t\tif (species.name === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\r\n\t\t\t// The sixth slot should not be Zacian/Zamazenta/Eternatus if Zoroark is present,\r\n\t\t\t// as they make dynamax malfunction, regardless of level\r\n\t\t\tif (\r\n\t\t\t\tpokemon.some(pkmn => pkmn.name === 'Zoroark') &&\r\n\t\t\t\tpokemon.length >= (this.maxTeamSize - 1) &&\r\n\t\t\t\t['Zacian', 'Zacian-Crowned', 'Zamazenta', 'Zamazenta-Crowned', 'Eternatus'].includes(species.name)\r\n\t\t\t) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst types = species.types;\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\tconst weakToFreezeDry = (\r\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\r\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\r\n\t\t\t);\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\tlet skip = false;\r\n\r\n\t\t\t\t// Limit two of any type\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit three weak to any type, and one double weak to any type\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\t\tif (!typeDoubleWeaknesses[typeName]) typeDoubleWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\tif (typeDoubleWeaknesses[typeName] >= limitFactor) {\r\n\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\r\n\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (!typeWeaknesses['Fire']) typeWeaknesses['Fire'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Fire'] >= 3 * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit four weak to Freeze-Dry\r\n\t\t\t\tif (weakToFreezeDry) {\r\n\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\r\n\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 * limitFactor) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\tif (\r\n\t\t\t\t\t!this.adjustLevel && numMaxLevelPokemon >= limitFactor &&\r\n\t\t\t\t\t(this.getLevel(species, isDoubles, this.dex.formats.getRuleTable(this.format).has('dynamaxclause')) === 100)\r\n\t\t\t\t) continue;\r\n\t\t\t}\r\n\r\n\t\t\t// Limit three of any type combination in Monotype\r\n\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\r\n\r\n\t\t\t// The Pokemon of the Day\r\n\t\t\tif (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1)) species = potd;\r\n\r\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0,\r\n\t\t\t\tisDoubles, this.dex.formats.getRuleTable(this.format).has('dynamaxclause'));\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Increment type counters\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment weakness counter\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// it's weak to the type\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\ttypeDoubleWeaknesses[typeName]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\r\n\t\t\t\ttypeWeaknesses['Fire']++;\r\n\t\t\t}\r\n\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\r\n\r\n\t\t\t// Increment level 100 counter\r\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t// Track what the team has\r\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\r\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails.sun = 1;\r\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\tif (set.ability === 'Snow Warning') teamDetails.hail = 1;\r\n\t\t\tif (set.moves.includes('spikes')) teamDetails.spikes = (teamDetails.spikes || 0) + 1;\r\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails.stealthRock = 1;\r\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\r\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails.toxicSpikes = 1;\r\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\r\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails.rapidSpin = 1;\r\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\r\n\t\t\t\tteamDetails.screens = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\trandomCAP1v1Sets: AnyObject = require('./cap-1v1-sets.json');\r\n\r\n\trandomCAP1v1Team() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst pokemon = [];\r\n\t\tconst pokemonPool = Object.keys(this.randomCAP1v1Sets);\r\n\r\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) throw new Error(`Invalid Pokemon \"${species}\" in ${this.format}`);\r\n\t\t\tif (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\r\n\r\n\t\t\tconst setData: AnyObject = this.sample(this.randomCAP1v1Sets[species.name]);\r\n\t\t\tconst set = {\r\n\t\t\t\tname: species.baseSpecies,\r\n\t\t\t\tspecies: species.name,\r\n\t\t\t\tgender: species.gender,\r\n\t\t\t\titem: this.sampleIfArray(setData.item) || '',\r\n\t\t\t\tability: (this.sampleIfArray(setData.ability)),\r\n\t\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\t\tlevel: this.adjustLevel || 100,\r\n\t\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.evs },\r\n\t\t\t\tnature: setData.nature,\r\n\t\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.ivs },\r\n\t\t\t\tmoves: setData.moves.map((move: any) => this.sampleIfArray(move)),\r\n\t\t\t};\r\n\t\t\tif (this.adjustLevel) set.level = this.adjustLevel;\r\n\t\t\tpokemon.push(set);\r\n\t\t}\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\trandomFactorySets: { [format: string]: { [species: string]: BattleFactorySpecies } } = require('./factory-sets.json');\r\n\r\n\trandomFactorySet(\r\n\t\tspecies: Species, teamData: RandomTeamsTypes.FactoryTeamDetails, tier: string\r\n\t): RandomTeamsTypes.RandomFactorySet | null {\r\n\t\tconst id = toID(species.name);\r\n\t\tconst setList = this.randomFactorySets[tier][id].sets;\r\n\r\n\t\tconst itemsMax: { [k: string]: number } = {\r\n\t\t\tchoicespecs: 1,\r\n\t\t\tchoiceband: 1,\r\n\t\t\tchoicescarf: 1,\r\n\t\t};\r\n\t\tconst movesMax: { [k: string]: number } = {\r\n\t\t\trapidspin: 1,\r\n\t\t\tbatonpass: 1,\r\n\t\t\tstealthrock: 1,\r\n\t\t\tdefog: 1,\r\n\t\t\tspikes: 1,\r\n\t\t\ttoxicspikes: 1,\r\n\t\t};\r\n\t\tconst requiredMoves: { [k: string]: string } = {\r\n\t\t\tstealthrock: 'hazardSet',\r\n\t\t\trapidspin: 'hazardClear',\r\n\t\t\tdefog: 'hazardClear',\r\n\t\t};\r\n\t\tconst weatherAbilities = ['drizzle', 'drought', 'snowwarning', 'sandstream'];\r\n\r\n\t\t// Build a pool of eligible sets, given the team partners\r\n\t\t// Also keep track of sets with moves the team requires\r\n\t\tlet effectivePool: { set: AnyObject, moveVariants?: number[], item?: string, ability?: string }[] = [];\r\n\t\tconst priorityPool = [];\r\n\t\tfor (const curSet of setList) {\r\n\t\t\t// if (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\r\n\r\n\t\t\t// reject disallowed items, specifically a second of any given choice item\r\n\t\t\tconst allowedItems: string[] = [];\r\n\t\t\tfor (const itemString of curSet.item) {\r\n\t\t\t\tconst item = this.dex.items.get(itemString);\r\n\t\t\t\tif (itemsMax[item.id] && teamData.has[item.id] >= itemsMax[item.id]) continue;\r\n\t\t\t\tallowedItems.push(itemString);\r\n\t\t\t}\r\n\t\t\tif (allowedItems.length === 0) continue;\r\n\t\t\tconst curSetItem = this.sample(allowedItems);\r\n\r\n\t\t\t// reject 2+ weather setters\r\n\t\t\tconst allowedAbilities: string[] = [];\r\n\t\t\tfor (const abilityString of curSet.ability) {\r\n\t\t\t\tconst ability = this.dex.abilities.get(abilityString);\r\n\t\t\t\tif (teamData.weather && weatherAbilities.includes(ability.id)) continue;\r\n\t\t\t\tallowedAbilities.push(abilityString);\r\n\t\t\t}\r\n\t\t\tif (allowedAbilities.length === 0) continue;\r\n\t\t\tconst curSetAbility = this.sample(allowedAbilities);\r\n\r\n\t\t\tlet reject = false;\r\n\t\t\tlet hasRequiredMove = false;\r\n\t\t\tconst curSetVariants = [];\r\n\t\t\tfor (const move of curSet.moves) {\r\n\t\t\t\tconst variantIndex = this.random(move.length);\r\n\t\t\t\tconst moveId = toID(move[variantIndex]);\r\n\t\t\t\tif (movesMax[moveId] && teamData.has[moveId] >= movesMax[moveId]) {\r\n\t\t\t\t\treject = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (requiredMoves[moveId] && !teamData.has[requiredMoves[moveId]]) {\r\n\t\t\t\t\thasRequiredMove = true;\r\n\t\t\t\t}\r\n\t\t\t\tcurSetVariants.push(variantIndex);\r\n\t\t\t}\r\n\t\t\tif (reject) continue;\r\n\r\n\t\t\tconst fullSetSpec = { set: curSet, moveVariants: curSetVariants, item: curSetItem, ability: curSetAbility };\r\n\t\t\teffectivePool.push(fullSetSpec);\r\n\t\t\tif (hasRequiredMove) priorityPool.push(fullSetSpec);\r\n\t\t}\r\n\t\tif (priorityPool.length) effectivePool = priorityPool;\r\n\r\n\t\tif (!effectivePool.length) {\r\n\t\t\tif (!teamData.forceResult) return null;\r\n\t\t\tfor (const curSet of setList) {\r\n\t\t\t\teffectivePool.push({ set: curSet });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst setData = this.sample(effectivePool);\r\n\t\tconst moves = [];\r\n\t\tfor (const [i, moveSlot] of setData.set.moves.entries()) {\r\n\t\t\tmoves.push(setData.moveVariants ? moveSlot[setData.moveVariants[i]] : this.sample(moveSlot));\r\n\t\t}\r\n\r\n\t\tconst item = setData.item || this.sampleIfArray(setData.set.item);\r\n\t\tconst ability = setData.ability || this.sampleIfArray(setData.set.ability);\r\n\t\tconst nature = this.sampleIfArray(setData.set.nature);\r\n\t\tconst level = this.adjustLevel || setData.set.level || (tier === \"LC\" ? 5 : 100);\r\n\r\n\t\treturn {\r\n\t\t\tname: setData.set.name || species.baseSpecies,\r\n\t\t\tspecies: setData.set.species,\r\n\t\t\tgender: setData.set.gender || species.gender || (this.randomChance(1, 2) ? 'M' : 'F'),\r\n\t\t\titem: item || '',\r\n\t\t\tability: ability || species.abilities['0'],\r\n\t\t\tshiny: typeof setData.set.shiny === 'undefined' ? this.randomChance(1, 1024) : setData.set.shiny,\r\n\t\t\tlevel,\r\n\t\t\thappiness: typeof setData.set.happiness === 'undefined' ? 255 : setData.set.happiness,\r\n\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },\r\n\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },\r\n\t\t\tnature: nature || 'Serious',\r\n\t\t\tmoves,\r\n\t\t};\r\n\t}\r\n\r\n\trandomFactoryTeam(side: PlayerOptions, depth = 0): RandomTeamsTypes.RandomFactorySet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst forceResult = (depth >= 12);\r\n\t\t// Leaving Monotype code in comments in case it's used in the future\r\n\t\t// const isMonotype = !!this.forceMonotype || this.dex.formats.getRuleTable(this.format).has('sametypeclause');\r\n\r\n\t\t// The teams generated depend on the tier choice in such a way that\r\n\t\t// no exploitable information is leaked from rolling the tier in getTeam(p1).\r\n\t\tif (!this.factoryTier) {\r\n\t\t//\tthis.factoryTier = isMonotype ? 'Mono' : this.sample(['Uber', 'OU', 'UU', 'RU', 'NU', 'PU', 'LC']);\r\n\t\t\tthis.factoryTier = this.sample(['Uber', 'OU', 'UU', 'RU', 'NU', 'PU', 'LC']);\r\n\t\t}\r\n\t\t/*\r\n\t\t} else if (isMonotype && this.factoryTier !== 'Mono') {\r\n\t\t\t// I don't think this can ever happen?\r\n\t\t\tthrow new Error(`Can't generate a Monotype Battle Factory set in a battle with factory tier ${this.factoryTier}`);\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tconst tierValues: { [k: string]: number } = {\r\n\t\t\tUber: 5,\r\n\t\t\tOU: 4, UUBL: 4,\r\n\t\t\tUU: 3, RUBL: 3,\r\n\t\t\tRU: 2, NUBL: 2,\r\n\t\t\tNU: 1, PUBL: 1,\r\n\t\t\tPU: 0,\r\n\t\t};\r\n\r\n\t\tconst pokemon = [];\r\n\t\tconst pokemonPool = Object.keys(this.randomFactorySets[this.factoryTier]);\r\n\r\n\t\t// const typePool = this.dex.types.names();\r\n\t\t// const type = this.sample(typePool);\r\n\r\n\t\tconst teamData: TeamData = {\r\n\t\t\ttypeCount: {}, typeComboCount: {}, baseFormes: {},\r\n\t\t\thas: {}, forceResult, weaknesses: {}, resistances: {},\r\n\t\t};\r\n\t\tconst requiredMoveFamilies = ['hazardSet', 'hazardClear'];\r\n\t\tconst requiredMoves: { [k: string]: string } = {\r\n\t\t\tstealthrock: 'hazardSet',\r\n\t\t\trapidspin: 'hazardClear',\r\n\t\t\tdefog: 'hazardClear',\r\n\t\t};\r\n\t\tconst weatherAbilitiesSet: { [k: string]: string } = {\r\n\t\t\tdrizzle: 'raindance',\r\n\t\t\tdrought: 'sunnyday',\r\n\t\t\tsnowwarning: 'hail',\r\n\t\t\tsandstream: 'sandstorm',\r\n\t\t};\r\n\t\tconst resistanceAbilities: { [k: string]: string[] } = {\r\n\t\t\tdryskin: ['Water'], waterabsorb: ['Water'], stormdrain: ['Water'],\r\n\t\t\tflashfire: ['Fire'], heatproof: ['Fire'],\r\n\t\t\tlightningrod: ['Electric'], motordrive: ['Electric'], voltabsorb: ['Electric'],\r\n\t\t\tsapsipper: ['Grass'],\r\n\t\t\tthickfat: ['Ice', 'Fire'],\r\n\t\t\tlevitate: ['Ground'],\r\n\t\t};\r\n\r\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Lessen the need of deleting sets of Pokemon after tier shifts\r\n\t\t\tif (\r\n\t\t\t\tthis.factoryTier in tierValues && species.tier in tierValues &&\r\n\t\t\t\ttierValues[species.tier] > tierValues[this.factoryTier]\r\n\t\t\t) continue;\r\n\r\n\t\t\t// const speciesFlags = this.randomFactorySets[this.factoryTier][species.id].flags;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (teamData.baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\tconst set = this.randomFactorySet(species, teamData, this.factoryTier);\r\n\t\t\tif (!set) continue;\r\n\r\n\t\t\tconst itemData = this.dex.items.get(set.item);\r\n\r\n\t\t\tconst types = species.types;\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\t\t\t/*\r\n\t\t\t// Enforce Monotype\r\n\t\t\tif (isMonotype) {\r\n\t\t\t\t// Prevents Mega Evolutions from breaking the type limits\r\n\t\t\t\tif (itemData.megaStone) {\r\n\t\t\t\t\tconst megaSpecies = this.dex.species.get(itemData.megaStone);\r\n\t\t\t\t\tif (types.length > megaSpecies.types.length) types = [species.types[0]];\r\n\t\t\t\t\t// Only check the second type because a Mega Evolution should always share the first type with its base forme.\r\n\t\t\t\t\tif (megaSpecies.types[1] && types[1] && megaSpecies.types[1] !== types[1]) {\r\n\t\t\t\t\t\ttypes = [megaSpecies.types[0]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!types.includes(type)) continue;\r\n\t\t\t} else\r\n\t\t\t*/\r\n\t\t\t{\r\n\t\t\t\t// If not Monotype, limit to two of each type\r\n\t\t\t\tlet skip = false;\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (teamData.typeCount[typeName] >= 2 * limitFactor && this.randomChance(4, 5)) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit 1 of any type combination\r\n\t\t\t\tlet typeCombo = types.slice().sort().join();\r\n\t\t\t\tif (set.ability === 'Drought' || set.ability === 'Drizzle') {\r\n\t\t\t\t// Drought and Drizzle don't count towards the type combo limit\r\n\t\t\t\t\ttypeCombo = set.ability;\r\n\t\t\t\t}\r\n\t\t\t\tif (teamData.typeComboCount[typeCombo] >= limitFactor) continue;\r\n\t\t\t}\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\t// Now that our Pokemon has passed all checks, we can update team data:\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in teamData.typeCount) {\r\n\t\t\t\t\tteamData.typeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.typeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tteamData.typeComboCount[typeCombo] = (teamData.typeComboCount[typeCombo] + 1) || 1;\r\n\r\n\t\t\tteamData.baseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\tif (itemData.id in teamData.has) {\r\n\t\t\t\tteamData.has[itemData.id]++;\r\n\t\t\t} else {\r\n\t\t\t\tteamData.has[itemData.id] = 1;\r\n\t\t\t}\r\n\r\n\t\t\tconst abilityState = this.dex.abilities.get(set.ability);\r\n\t\t\tif (abilityState.id in weatherAbilitiesSet) {\r\n\t\t\t\tteamData.weather = weatherAbilitiesSet[abilityState.id];\r\n\t\t\t}\r\n\r\n\t\t\tfor (const move of set.moves) {\r\n\t\t\t\tconst moveId = toID(move);\r\n\t\t\t\tif (moveId in teamData.has) {\r\n\t\t\t\t\tteamData.has[moveId]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.has[moveId] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveId in requiredMoves) {\r\n\t\t\t\t\tteamData.has[requiredMoves[moveId]] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// Cover any major weakness (3+) with at least one resistance\r\n\t\t\t\tif (teamData.resistances[typeName] >= 1) continue;\r\n\t\t\t\tif (resistanceAbilities[abilityState.id]?.includes(typeName) || !this.dex.getImmunity(typeName, types)) {\r\n\t\t\t\t\t// Heuristic: assume that Pok\u00E9mon with these abilities don't have (too) negative typing.\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst typeMod = this.dex.getEffectiveness(typeName, types);\r\n\t\t\t\tif (typeMod < 0) {\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t} else if (typeMod > 0) {\r\n\t\t\t\t\tteamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize) return this.randomFactoryTeam(side, ++depth);\r\n\r\n\t\t// Quality control\r\n\t\tif (!teamData.forceResult) {\r\n\t\t\tfor (const requiredFamily of requiredMoveFamilies) {\r\n\t\t\t\tif (!teamData.has[requiredFamily]) return this.randomFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t\tfor (const typeName in teamData.weaknesses) {\r\n\t\t\t\tif (teamData.weaknesses[typeName] >= 3) return this.randomFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\trandomBSSFactorySets: AnyObject = require('./bss-factory-sets.json');\r\n\r\n\trandomBSSFactorySet(\r\n\t\tspecies: Species, teamData: RandomTeamsTypes.FactoryTeamDetails\r\n\t): RandomTeamsTypes.RandomFactorySet | null {\r\n\t\tconst id = toID(species.name);\r\n\t\tconst setList = this.randomBSSFactorySets[id].sets;\r\n\r\n\t\tconst movesMax: { [k: string]: number } = {\r\n\t\t\tbatonpass: 1,\r\n\t\t\tstealthrock: 1,\r\n\t\t\ttoxicspikes: 1,\r\n\t\t\ttrickroom: 1,\r\n\t\t\tauroraveil: 1,\r\n\t\t};\r\n\r\n\t\tconst requiredMoves: { [k: string]: number } = {};\r\n\r\n\t\t// Build a pool of eligible sets, given the team partners\r\n\t\t// Also keep track of sets with moves the team requires\r\n\t\tlet effectivePool: { set: AnyObject, moveVariants?: number[], itemVariants?: number, abilityVariants?: number }[] = [];\r\n\t\tconst priorityPool = [];\r\n\t\tfor (const curSet of setList) {\r\n\t\t\tlet reject = false;\r\n\t\t\tlet hasRequiredMove = false;\r\n\t\t\tconst curSetMoveVariants = [];\r\n\t\t\tfor (const move of curSet.moves) {\r\n\t\t\t\tconst variantIndex = this.random(move.length);\r\n\t\t\t\tconst moveId = toID(move[variantIndex]);\r\n\t\t\t\tif (movesMax[moveId] && teamData.has[moveId] >= movesMax[moveId]) {\r\n\t\t\t\t\treject = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (requiredMoves[moveId] && !teamData.has[requiredMoves[moveId]]) {\r\n\t\t\t\t\thasRequiredMove = true;\r\n\t\t\t\t}\r\n\t\t\t\tcurSetMoveVariants.push(variantIndex);\r\n\t\t\t}\r\n\t\t\tif (reject) continue;\r\n\t\t\tconst set = { set: curSet, moveVariants: curSetMoveVariants };\r\n\t\t\teffectivePool.push(set);\r\n\t\t\tif (hasRequiredMove) priorityPool.push(set);\r\n\t\t}\r\n\t\tif (priorityPool.length) effectivePool = priorityPool;\r\n\r\n\t\tif (!effectivePool.length) {\r\n\t\t\tif (!teamData.forceResult) return null;\r\n\t\t\tfor (const curSet of setList) {\r\n\t\t\t\teffectivePool.push({ set: curSet });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst setData = this.sample(effectivePool);\r\n\t\tconst moves = [];\r\n\t\tfor (const [i, moveSlot] of setData.set.moves.entries()) {\r\n\t\t\tmoves.push(setData.moveVariants ? moveSlot[setData.moveVariants[i]] : this.sample(moveSlot));\r\n\t\t}\r\n\r\n\t\tconst setDataAbility = this.sampleIfArray(setData.set.ability);\r\n\t\treturn {\r\n\t\t\tname: setData.set.nickname || setData.set.name || species.baseSpecies,\r\n\t\t\tspecies: setData.set.species,\r\n\t\t\tgigantamax: setData.set.gigantamax,\r\n\t\t\tgender: setData.set.gender || species.gender || (this.randomChance(1, 2) ? 'M' : 'F'),\r\n\t\t\titem: this.sampleIfArray(setData.set.item) || '',\r\n\t\t\tability: setDataAbility || species.abilities['0'],\r\n\t\t\tshiny: typeof setData.set.shiny === 'undefined' ? this.randomChance(1, 1024) : setData.set.shiny,\r\n\t\t\tlevel: setData.set.level || 50,\r\n\t\t\thappiness: typeof setData.set.happiness === 'undefined' ? 255 : setData.set.happiness,\r\n\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },\r\n\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },\r\n\t\t\tnature: setData.set.nature || 'Serious',\r\n\t\t\tmoves,\r\n\t\t};\r\n\t}\r\n\r\n\trandomBSSFactoryTeam(side: PlayerOptions, depth = 0): RandomTeamsTypes.RandomFactorySet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst forceResult = (depth >= 4);\r\n\r\n\t\tconst pokemon = [];\r\n\r\n\t\tconst pokemonPool = Object.keys(this.randomBSSFactorySets);\r\n\r\n\t\tconst teamData: TeamData = {\r\n\t\t\ttypeCount: {}, typeComboCount: {}, baseFormes: {}, has: {}, forceResult,\r\n\t\t\tweaknesses: {}, resistances: {},\r\n\t\t};\r\n\t\tconst weatherAbilitiesSet: { [k: string]: string } = {\r\n\t\t\tdrizzle: 'raindance',\r\n\t\t\tdrought: 'sunnyday',\r\n\t\t\tsnowwarning: 'hail',\r\n\t\t\tsandstream: 'sandstorm',\r\n\t\t};\r\n\t\tconst resistanceAbilities: { [k: string]: string[] } = {\r\n\t\t\twaterabsorb: ['Water'],\r\n\t\t\tflashfire: ['Fire'],\r\n\t\t\tlightningrod: ['Electric'], voltabsorb: ['Electric'],\r\n\t\t\tthickfat: ['Ice', 'Fire'],\r\n\t\t\tlevitate: ['Ground'],\r\n\t\t};\r\n\t\tconst limitFactor = Math.ceil(this.maxTeamSize / 6);\r\n\t\t/**\r\n\t\t * Weighted random shuffle\r\n\t\t * Uses the fact that for two uniform variables x1 and x2, x1^(1/w1) is larger than x2^(1/w2)\r\n\t\t * with probability equal to w1/(w1+w2), which is what we want. See e.g. here https://arxiv.org/pdf/1012.0256.pdf,\r\n\t\t * original paper is behind a paywall.\r\n\t\t */\r\n\t\tconst shuffledSpecies = [];\r\n\t\tfor (const speciesName of pokemonPool) {\r\n\t\t\tconst sortObject = {\r\n\t\t\t\tspeciesName,\r\n\t\t\t\tscore: this.prng.random() ** (1 / this.randomBSSFactorySets[speciesName].usage),\r\n\t\t\t};\r\n\t\t\tshuffledSpecies.push(sortObject);\r\n\t\t}\r\n\t\tshuffledSpecies.sort((a, b) => a.score - b.score);\r\n\r\n\t\twhile (shuffledSpecies.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\t// repeated popping from weighted shuffle is equivalent to repeated weighted sampling without replacement\r\n\t\t\tconst specie = shuffledSpecies.pop()!.speciesName;\r\n\t\t\tconst species = this.dex.species.get(specie);\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\tif (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (teamData.baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Limit 2 of any type (most of the time)\r\n\t\t\tconst types = species.types;\r\n\t\t\tlet skip = false;\r\n\t\t\tif (!this.forceMonotype) {\r\n\t\t\t\tfor (const type of types) {\r\n\t\t\t\t\tif (teamData.typeCount[type] >= 2 * limitFactor && this.randomChance(4, 5)) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (skip) continue;\r\n\r\n\t\t\tconst set = this.randomBSSFactorySet(species, teamData);\r\n\t\t\tif (!set) continue;\r\n\r\n\t\t\t// Limit 1 of any type combination\r\n\t\t\tlet typeCombo = types.slice().sort().join();\r\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Drizzle') {\r\n\t\t\t\t// Drought and Drizzle don't count towards the type combo limit\r\n\t\t\t\ttypeCombo = set.ability;\r\n\t\t\t}\r\n\t\t\tif (!this.forceMonotype && teamData.typeComboCount[typeCombo] >= limitFactor) continue;\r\n\r\n\t\t\tconst itemData = this.dex.items.get(set.item);\r\n\t\t\tif (teamData.has[itemData.id]) continue; // Item Clause\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can update team data:\r\n\t\t\tfor (const type of types) {\r\n\t\t\t\tif (type in teamData.typeCount) {\r\n\t\t\t\t\tteamData.typeCount[type]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.typeCount[type] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (typeCombo in teamData.typeComboCount) {\r\n\t\t\t\tteamData.typeComboCount[typeCombo]++;\r\n\t\t\t} else {\r\n\t\t\t\tteamData.typeComboCount[typeCombo] = 1;\r\n\t\t\t}\r\n\r\n\t\t\tteamData.baseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\tteamData.has[itemData.id] = 1;\r\n\r\n\t\t\tconst abilityState = this.dex.abilities.get(set.ability);\r\n\t\t\tif (abilityState.id in weatherAbilitiesSet) {\r\n\t\t\t\tteamData.weather = weatherAbilitiesSet[abilityState.id];\r\n\t\t\t}\r\n\r\n\t\t\tfor (const move of set.moves) {\r\n\t\t\t\tconst moveId = toID(move);\r\n\t\t\t\tif (moveId in teamData.has) {\r\n\t\t\t\t\tteamData.has[moveId]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.has[moveId] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// Cover any major weakness (3+) with at least one resistance\r\n\t\t\t\tif (teamData.resistances[typeName] >= 1) continue;\r\n\t\t\t\tif (resistanceAbilities[abilityState.id]?.includes(typeName) || !this.dex.getImmunity(typeName, types)) {\r\n\t\t\t\t\t// Heuristic: assume that Pok\u00E9mon with these abilities don't have (too) negative typing.\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst typeMod = this.dex.getEffectiveness(typeName, types);\r\n\t\t\t\tif (typeMod < 0) {\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t} else if (typeMod > 0) {\r\n\t\t\t\t\tteamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!teamData.forceResult && pokemon.length < this.maxTeamSize) return this.randomBSSFactoryTeam(side, ++depth);\r\n\r\n\t\t// Quality control we cannot afford for monotype\r\n\t\tif (!teamData.forceResult && !this.forceMonotype) {\r\n\t\t\tfor (const type in teamData.weaknesses) {\r\n\t\t\t\tif (teamData.weaknesses[type] >= 3 * limitFactor) return this.randomBSSFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n\r\nexport default RandomGen8Teams;\r\n"],
  "mappings": "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",
  "names": ["item", "ability", "typeCombo"]
}
