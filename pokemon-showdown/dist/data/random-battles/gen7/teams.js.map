{
  "version": 3,
  "sources": ["../../../../data/random-battles/gen7/teams.ts"],
  "sourcesContent": ["import { MoveCounter, type TeamData, RandomGen8Teams } from '../gen8/teams';\r\nimport type { PRNG, PRNGSeed } from '../../../sim/prng';\r\nimport { toID } from '../../../sim/dex';\r\n\r\nexport interface BattleFactorySpecies {\r\n\tflags: { megaOnly?: 1, zmoveOnly?: 1, limEevee?: 1 };\r\n\tsets: BattleFactorySet[];\r\n}\r\ninterface BattleFactorySet {\r\n\tspecies: string;\r\n\titem: string;\r\n\tability: string;\r\n\tnature: string;\r\n\tmoves: string[];\r\n\tevs?: Partial<StatsTable>;\r\n\tivs?: Partial<StatsTable>;\r\n}\r\n\r\nexport const ZeroAttackHPIVs: { [k: string]: SparseStatsTable } = {\r\n\tgrass: { hp: 30, spa: 30 },\r\n\tfire: { spa: 30, spe: 30 },\r\n\tice: { def: 30 },\r\n\tground: { spa: 30, spd: 30 },\r\n\tfighting: { def: 30, spa: 30, spd: 30, spe: 30 },\r\n\telectric: { def: 30, spe: 30 },\r\n\tpsychic: { spe: 30 },\r\n\tflying: { spa: 30, spd: 30, spe: 30 },\r\n\trock: { def: 30, spd: 30, spe: 30 },\r\n};\r\n\r\n// Moves that restore HP:\r\nconst RECOVERY_MOVES = [\r\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'recycle', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\r\n];\r\n// Moves that drop stats:\r\nconst CONTRARY_MOVES = [\r\n\t'closecombat', 'leafstorm', 'overheat', 'superpower', 'vcreate',\r\n];\r\n// Moves that boost Attack:\r\nconst PHYSICAL_SETUP = [\r\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'screech', 'swordsdance',\r\n];\r\n// Moves which boost Special Attack:\r\nconst SPECIAL_SETUP = [\r\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow',\r\n];\r\n// Moves that boost Attack AND Special Attack:\r\nconst MIXED_SETUP = [\r\n\t'celebrate', 'growth', 'happyhour', 'holdhands', 'shellsmash', 'workup',\r\n];\r\n// Some moves that only boost Speed:\r\nconst SPEED_SETUP = [\r\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish',\r\n];\r\n// Conglomerate for ease of access\r\nconst SETUP = [\r\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'celebrate', 'coil', 'conversion', 'curse', 'dragondance',\r\n\t'electricterrain', 'flamecharge', 'focusenergy', 'geomancy', 'growth', 'happyhour', 'holdhands', 'honeclaws', 'howl', 'irondefense', 'meditate',\r\n\t'nastyplot', 'poweruppunch', 'quiverdance', 'raindance', 'rockpolish', 'shellsmash', 'shiftgear', 'swordsdance', 'tailglow', 'workup',\r\n];\r\n// Moves that shouldn't be the only STAB moves:\r\nconst NO_STAB = [\r\n\t'accelerock', 'aquajet', 'bulletpunch', 'clearsmog', 'dragontail', 'eruption', 'explosion',\r\n\t'fakeout', 'firstimpression', 'flamecharge', 'futuresight', 'iceshard', 'icywind', 'incinerate', 'infestation', 'machpunch',\r\n\t'nuzzle', 'pluck', 'poweruppunch', 'pursuit', 'quickattack', 'rapidspin', 'reversal', 'selfdestruct', 'shadowsneak',\r\n\t'skyattack', 'skydrop', 'snarl', 'suckerpunch', 'uturn', 'watershuriken', 'vacuumwave', 'voltswitch', 'waterspout',\r\n];\r\n// Hazard-setting moves\r\nconst HAZARDS = [\r\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\r\n];\r\n// Protect and its variants\r\nconst PROTECT_MOVES = [\r\n\t'banefulbunker', 'kingsshield', 'protect', 'spikyshield',\r\n];\r\n// Moves that switch the user out\r\nconst PIVOT_MOVES = [\r\n\t'partingshot', 'uturn', 'voltswitch',\r\n];\r\n\r\n// Moves that should be paired together when possible\r\nconst MOVE_PAIRS = [\r\n\t['lightscreen', 'reflect'],\r\n\t['sleeptalk', 'rest'],\r\n\t['protect', 'wish'],\r\n\t['spikyshield', 'wish'],\r\n\t['leechseed', 'substitute'],\r\n\t['perishsong', 'protect'],\r\n\t['solarbeam', 'sunnyday'],\r\n];\r\n\r\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\r\nconst PRIORITY_POKEMON = [\r\n\t'aegislash', 'banette', 'breloom', 'cacturne', 'doublade', 'dusknoir', 'golisopod', 'honchkrow', 'mimikyu', 'scizor', 'scizormega', 'shedinja',\r\n];\r\nfunction sereneGraceBenefits(move: Move) {\r\n\treturn move.secondary?.chance && move.secondary.chance >= 20 && move.secondary.chance < 100;\r\n}\r\n\r\nexport class RandomGen7Teams extends RandomGen8Teams {\r\n\trandomSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./sets.json');\r\n\tprotected cachedStatusMoves: ID[];\r\n\r\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\r\n\t\tsuper(format, prng);\r\n\r\n\t\tthis.noStab = NO_STAB;\r\n\t\tthis.priorityPokemon = PRIORITY_POKEMON;\r\n\r\n\t\tthis.moveEnforcementCheckers = {\r\n\t\t\tBug: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t['megahorn', 'pinmissile'].some(m => movePool.includes(m)) ||\r\n\t\t\t\t!counter.get('Bug') && (abilities.includes('Tinted Lens') || abilities.includes('Adaptability'))\r\n\t\t\t),\r\n\t\t\tDark: (movePool, moves, abilities, types, counter) => !counter.get('Dark'),\r\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => !counter.get('Dragon') && !abilities.includes('Aerilate'),\r\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\r\n\t\t\tFairy: (movePool, moves, abilities, types, counter) => !counter.get('Fairy'),\r\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting'),\r\n\t\t\tFire: (movePool, moves, abilities, types, counter) => !counter.get('Fire'),\r\n\t\t\tFlying: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Flying') && !['aerodactyl', 'aerodactylmega', 'mantine'].includes(species.id) &&\r\n\t\t\t\t!movePool.includes('hiddenpowerflying')\r\n\t\t\t),\r\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !counter.get('Ghost'),\r\n\t\t\tGrass: (movePool, moves, abilities, types, counter, species) => (\r\n\t\t\t\t!counter.get('Grass') && (species.baseStats.atk >= 100 || movePool.includes('leafstorm'))\r\n\t\t\t),\r\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\r\n\t\t\tIce: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Ice') || (moves.has('icebeam') && movePool.includes('freezedry')) ||\r\n\t\t\t\t(abilities.includes('Refrigerate') && movePool.includes('return'))\r\n\t\t\t),\r\n\t\t\tNormal: movePool => (movePool.includes('boomburst') || movePool.includes('hypervoice')),\r\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => !counter.get('Poison'),\r\n\t\t\tPsychic: (movePool, moves, abilities, types, counter) => (\r\n\t\t\t\t!counter.get('Psychic') && (\r\n\t\t\t\t\ttypes.has('Fighting') || movePool.includes('psychicfangs') || movePool.includes('calmmind')\r\n\t\t\t\t)\r\n\t\t\t),\r\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => (!counter.get('Rock') && species.baseStats.atk >= 80),\r\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species) => (!counter.get('Steel') && species.baseStats.atk >= 100),\r\n\t\t\tWater: (movePool, moves, abilities, types, counter) => !counter.get('Water'),\r\n\t\t};\r\n\t\t// Nature Power is Tri Attack this gen\r\n\t\tthis.cachedStatusMoves = this.dex.moves.all()\r\n\t\t\t.filter(move => move.category === 'Status' && move.id !== 'naturepower')\r\n\t\t\t.map(move => move.id);\r\n\t}\r\n\r\n\tnewQueryMoves(\r\n\t\tmoves: Set<string> | null,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\tabilities: string[],\r\n\t): MoveCounter {\r\n\t\t// This is primarily a helper function for random setbuilder functions.\r\n\t\tconst counter = new MoveCounter();\r\n\t\tconst types = species.types;\r\n\t\tif (!moves?.size) return counter;\r\n\r\n\t\tconst categories = { Physical: 0, Special: 0, Status: 0 };\r\n\r\n\t\t// Iterate through all moves we've chosen so far and keep track of what they do:\r\n\t\tfor (const moveid of moves) {\r\n\t\t\tlet move = this.dex.moves.get(moveid);\r\n\t\t\t// Nature Power calls Earthquake in Gen 5\r\n\t\t\tif (this.gen === 5 && moveid === 'naturepower') move = this.dex.moves.get('earthquake');\r\n\t\t\tif (this.gen > 5 && moveid === 'naturepower') move = this.dex.moves.get('triattack');\r\n\r\n\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\tif (move.damage || move.damageCallback) {\r\n\t\t\t\t// Moves that do a set amount of damage:\r\n\t\t\t\tcounter.add('damage');\r\n\t\t\t\tcounter.damagingMoves.add(move);\r\n\t\t\t} else {\r\n\t\t\t\t// Are Physical/Special/Status moves:\r\n\t\t\t\tcategories[move.category]++;\r\n\t\t\t}\r\n\t\t\t// Moves that have a low base power:\r\n\t\t\tif (moveid === 'lowkick' || (move.basePower && move.basePower <= 60 && !['nuzzle', 'rapidspin'].includes(moveid))) {\r\n\t\t\t\tcounter.add('technician');\r\n\t\t\t}\r\n\t\t\t// Moves that hit up to 5 times:\r\n\t\t\tif (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5) counter.add('skilllink');\r\n\t\t\tif (move.recoil || move.hasCrashDamage) counter.add('recoil');\r\n\t\t\tif (move.drain) counter.add('drain');\r\n\t\t\t// Moves which have a base power:\r\n\t\t\tif (move.basePower || move.basePowerCallback) {\r\n\t\t\t\tif (!this.noStab.includes(moveid) || this.priorityPokemon.includes(species.id) && move.priority > 0) {\r\n\t\t\t\t\tcounter.add(moveType);\r\n\t\t\t\t\tif (types.includes(moveType)) counter.add('stab');\r\n\t\t\t\t\tif (preferredType === moveType) counter.add('preferred');\r\n\t\t\t\t\tcounter.damagingMoves.add(move);\r\n\t\t\t\t}\r\n\t\t\t\tif (move.flags['bite']) counter.add('strongjaw');\r\n\t\t\t\tif (move.flags['punch']) counter.add('ironfist');\r\n\t\t\t\tif (move.flags['sound']) counter.add('sound');\r\n\t\t\t\tif (move.priority > 0) counter.add('priority');\r\n\t\t\t}\r\n\t\t\t// Moves with secondary effects:\r\n\t\t\tif (move.secondary || move.hasSheerForce) {\r\n\t\t\t\tcounter.add('sheerforce');\r\n\t\t\t\tif (sereneGraceBenefits(move)) {\r\n\t\t\t\t\tcounter.add('serenegrace');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Moves with low accuracy:\r\n\t\t\tif (move.accuracy && move.accuracy !== true && move.accuracy < 90) counter.add('inaccurate');\r\n\r\n\t\t\t// Moves that change stats:\r\n\t\t\tif (RECOVERY_MOVES.includes(moveid)) counter.add('recovery');\r\n\t\t\tif (CONTRARY_MOVES.includes(moveid)) counter.add('contrary');\r\n\t\t\tif (PHYSICAL_SETUP.includes(moveid)) counter.add('physicalsetup');\r\n\t\t\tif (SPECIAL_SETUP.includes(moveid)) counter.add('specialsetup');\r\n\t\t\tif (MIXED_SETUP.includes(moveid)) counter.add('mixedsetup');\r\n\t\t\tif (SPEED_SETUP.includes(moveid)) counter.add('speedsetup');\r\n\t\t\tif (SETUP.includes(moveid)) counter.add('setup');\r\n\t\t\tif (HAZARDS.includes(moveid)) counter.add('hazards');\r\n\t\t}\r\n\r\n\t\tcounter.set('Physical', Math.floor(categories['Physical']));\r\n\t\tcounter.set('Special', Math.floor(categories['Special']));\r\n\t\tcounter.set('Status', categories['Status']);\r\n\t\treturn counter;\r\n\t}\r\n\r\n\tcullMovePool(\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): void {\r\n\t\t// Pokemon cannot have multiple Hidden Powers in any circumstance\r\n\t\tlet hasHiddenPower = false;\r\n\t\tfor (const move of moves) {\r\n\t\t\tif (move.startsWith('hiddenpower')) hasHiddenPower = true;\r\n\t\t}\r\n\t\tif (hasHiddenPower) {\r\n\t\t\tlet movePoolHasHiddenPower = true;\r\n\t\t\twhile (movePoolHasHiddenPower) {\r\n\t\t\t\tmovePoolHasHiddenPower = false;\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid));\r\n\t\t\t\t\t\tmovePoolHasHiddenPower = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\r\n\t\tif (moves.size === this.maxMoveCount - 2) {\r\n\t\t\tconst unpairedMoves = [...movePool];\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (unpairedMoves.length === 1) {\r\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\r\n\t\tif (moves.size === this.maxMoveCount - 1) {\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\r\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Team-based move culls\r\n\t\tif (teamDetails.screens && movePool.length >= this.maxMoveCount + 2) {\r\n\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\r\n\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stickyWeb) {\r\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.stealthRock) {\r\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\r\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.toxicSpikes) {\r\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\r\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\t\tif (teamDetails.statusCure) {\r\n\t\t\tif (movePool.includes('aromatherapy')) this.fastPop(movePool, movePool.indexOf('aromatherapy'));\r\n\t\t\tif (movePool.includes('healbell')) this.fastPop(movePool, movePool.indexOf('healbell'));\r\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t}\r\n\r\n\t\t// Develop additional move lists\r\n\t\tconst badWithSetup = ['defog', 'dragontail', 'haze', 'healbell', 'nuzzle', 'pursuit', 'rapidspin', 'toxic'];\r\n\t\tconst statusMoves = this.cachedStatusMoves;\r\n\r\n\t\t// General incompatibilities\r\n\t\tconst incompatiblePairs = [\r\n\t\t\t// These moves don't mesh well with other aspects of the set\r\n\t\t\t[statusMoves, ['healingwish', 'memento', 'switcheroo', 'trick']],\r\n\t\t\t[PIVOT_MOVES, PIVOT_MOVES],\r\n\t\t\t[SETUP, PIVOT_MOVES],\r\n\t\t\t[SETUP, HAZARDS],\r\n\t\t\t[SETUP, badWithSetup],\r\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\r\n\t\t\t[SPEED_SETUP, 'quickattack'],\r\n\t\t\t['defog', HAZARDS],\r\n\t\t\t[['fakeout', 'uturn'], ['switcheroo', 'trick']],\r\n\t\t\t['substitute', PIVOT_MOVES],\r\n\t\t\t['leechseed', 'dragontail'],\r\n\t\t\t['rest', 'substitute'],\r\n\t\t\t[PHYSICAL_SETUP, 'dracometeor'],\r\n\t\t\t[SPECIAL_SETUP, 'knockoff'],\r\n\r\n\t\t\t// These attacks are redundant with each other\r\n\t\t\t['psychic', 'psyshock'],\r\n\t\t\t[['scald', 'surf'], ['hydropump', 'originpulse', 'waterpulse']],\r\n\t\t\t['return', ['bodyslam', 'doubleedge', 'headbutt']],\r\n\t\t\t[['fierydance', 'firelash', 'lavaplume'], ['fireblast', 'magmastorm']],\r\n\t\t\t[['flamethrower', 'flareblitz'], ['fireblast', 'overheat']],\r\n\t\t\t['hornleech', 'woodhammer'],\r\n\t\t\t[['gigadrain', 'leafstorm'], ['energyball', 'leafstorm', 'petaldance', 'powerwhip']],\r\n\t\t\t['wildcharge', 'thunderbolt'],\r\n\t\t\t['gunkshot', 'poisonjab'],\r\n\t\t\t[['drainpunch', 'focusblast'], ['closecombat', 'highjumpkick', 'superpower']],\r\n\t\t\t['dracometeor', 'dragonpulse'],\r\n\t\t\t['dragonclaw', 'outrage'],\r\n\t\t\t['knockoff', ['darkestlariat', 'darkpulse', 'foulplay']],\r\n\r\n\t\t\t// Status move incompatibilities\r\n\t\t\t['toxic', 'toxicspikes'],\r\n\t\t\t['taunt', 'disable'],\r\n\t\t\t['defog', ['leechseed', 'substitute']],\r\n\r\n\t\t\t// Assorted hardcodes go here:\r\n\t\t\t// Lunatone\r\n\t\t\t['moonlight', 'rockpolish'],\r\n\t\t\t// Smeargle\r\n\t\t\t['nuzzle', 'whirlwind'],\r\n\t\t\t// Liepard\r\n\t\t\t['copycat', 'uturn'],\r\n\t\t\t// Seviper\r\n\t\t\t['switcheroo', 'suckerpunch'],\r\n\t\t\t// Jirachi\r\n\t\t\t['bodyslam', 'healingwish'],\r\n\t\t];\r\n\r\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\r\n\r\n\t\tif (!types.includes('Dark') && preferredType !== 'Dark') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, 'knockoff', ['pursuit', 'suckerpunch']);\r\n\t\t}\r\n\r\n\t\tconst statusInflictingMoves = ['thunderwave', 'toxic', 'willowisp', 'yawn'];\r\n\t\tif (!abilities.includes('Prankster') && role !== 'Staller') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, statusInflictingMoves, statusInflictingMoves);\r\n\t\t}\r\n\r\n\t\tif (abilities.includes('Guts')) this.incompatibleMoves(moves, movePool, 'protect', 'swordsdance');\r\n\r\n\t\t// Z-Conversion Porygon-Z\r\n\t\tif (species.id === 'porygonz') {\r\n\t\t\tthis.incompatibleMoves(moves, movePool, 'shadowball', 'recover');\r\n\t\t}\r\n\r\n\t\t// Cull filler moves for otherwise fixed set Stealth Rock users\r\n\t\tif (!teamDetails.stealthRock) {\r\n\t\t\tif (species.id === 'registeel' && role === 'Staller') {\r\n\t\t\t\tif (movePool.includes('thunderwave')) this.fastPop(movePool, movePool.indexOf('thunderwave'));\r\n\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t\t}\r\n\t\t\tif (species.baseSpecies === 'Wormadam' && role === 'Staller') {\r\n\t\t\t\tif (movePool.includes('infestation')) this.fastPop(movePool, movePool.indexOf('infestation'));\r\n\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Checks for and removes incompatible moves, starting with the first move in movesA.\r\n\tincompatibleMoves(\r\n\t\tmoves: Set<string>,\r\n\t\tmovePool: string[],\r\n\t\tmovesA: string | string[],\r\n\t\tmovesB: string | string[],\r\n\t): void {\r\n\t\tconst moveArrayA = (Array.isArray(movesA)) ? movesA : [movesA];\r\n\t\tconst moveArrayB = (Array.isArray(movesB)) ? movesB : [movesB];\r\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\tfor (const moveid1 of moves) {\r\n\t\t\tif (moveArrayB.includes(moveid1)) {\r\n\t\t\t\tfor (const moveid2 of moveArrayA) {\r\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\r\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (moveArrayA.includes(moveid1)) {\r\n\t\t\t\tfor (const moveid2 of moveArrayB) {\r\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\r\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\r\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Adds a move to the moveset, returns the MoveCounter\r\n\taddMove(\r\n\t\tmove: string,\r\n\t\tmoves: Set<string>,\r\n\t\ttypes: string[],\r\n\t\tabilities: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tmovePool: string[],\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): MoveCounter {\r\n\t\tmoves.add(move);\r\n\t\tthis.fastPop(movePool, movePool.indexOf(move));\r\n\t\tconst counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead,\r\n\t\t\tpreferredType, role);\r\n\t\treturn counter;\r\n\t}\r\n\r\n\t// Returns the type of a given move for STAB/coverage enforcement purposes\r\n\tgetMoveType(move: Move, species: Species, abilities: string[], preferredType: string): string {\r\n\t\tif (['judgment', 'multiattack', 'revelationdance'].includes(move.id)) return species.types[0];\r\n\t\tif (species.id === 'genesectdouse' && move.id === 'technoblast') return 'Water';\r\n\r\n\t\tconst moveType = move.type;\r\n\t\tif (moveType === 'Normal') {\r\n\t\t\tif (abilities.includes('Aerilate')) return 'Flying';\r\n\t\t\tif (abilities.includes('Galvanize')) return 'Electric';\r\n\t\t\tif (abilities.includes('Pixilate')) return 'Fairy';\r\n\t\t\tif (abilities.includes('Refrigerate')) return 'Ice';\r\n\t\t}\r\n\t\treturn moveType;\r\n\t}\r\n\r\n\t// Generate random moveset for a given species, role, preferred type.\r\n\trandomMoveset(\r\n\t\ttypes: string[],\r\n\t\tabilities: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tmovePool: string[],\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): Set<string> {\r\n\t\tconst moves = new Set<string>();\r\n\t\tlet counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead,\r\n\t\t\tpreferredType, role);\r\n\r\n\t\t// If there are only four moves, add all moves and return early\r\n\t\tif (movePool.length <= this.maxMoveCount) {\r\n\t\t\t// Still need to ensure that multiple Hidden Powers are not added (if maxMoveCount is increased)\r\n\t\t\twhile (movePool.length) {\r\n\t\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t\treturn moves;\r\n\t\t}\r\n\r\n\t\tconst runEnforcementChecker = (checkerName: string) => {\r\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\r\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\r\n\t\t\t\tmovePool, moves, abilities, new Set(types), counter, species, teamDetails\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\r\n\t\tif (species.requiredMove) {\r\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\r\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\r\n\r\n\t\t// Enforce Facade if Guts is a possible ability\r\n\t\tif (movePool.includes('facade') && abilities.includes('Guts')) {\r\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Aurora Veil, Blizzard, Seismic Toss, Spore, and Sticky Web\r\n\t\tfor (const moveid of ['auroraveil', 'blizzard', 'seismictoss', 'spore', 'stickyweb']) {\r\n\t\t\tif (movePool.includes(moveid)) {\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Thunder Wave on Prankster users\r\n\t\tif (movePool.includes('thunderwave') && abilities.includes('Prankster')) {\r\n\t\t\tcounter = this.addMove('thunderwave', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Shadow Sneak on Kecleon\r\n\t\tif (movePool.includes('shadowsneak') && species.id === 'kecleon') {\r\n\t\t\tcounter = this.addMove('shadowsneak', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce Destiny Bond on Mega Banette, since that move is its entire reason to exist\r\n\t\tif (movePool.includes('destinybond') && species.id === 'banettemega') {\r\n\t\t\tcounter = this.addMove('destinybond', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// Enforce hazard removal on Bulky Support if the team doesn't already have it\r\n\t\tif (role === 'Bulky Support' && !teamDetails.defog && !teamDetails.rapidSpin) {\r\n\t\t\tif (movePool.includes('rapidspin')) {\r\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t\tif (movePool.includes('defog')) {\r\n\t\t\t\tcounter = this.addMove('defog', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB priority\r\n\t\tif (['Bulky Attacker', 'Bulky Setup', 'Wallbreaker'].includes(role) || this.priorityPokemon.includes(species.id)) {\r\n\t\t\tconst priorityMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (types.includes(moveType) && move.priority > 0 && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\tpriorityMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (priorityMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(priorityMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce STAB\r\n\t\tfor (const type of types) {\r\n\t\t\t// Check if a STAB move of that type should be required\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (runEnforcementChecker(type)) {\r\n\t\t\t\tif (!stabMoves.length) break;\r\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Preferred Type\r\n\t\tif (!counter.get('preferred')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && preferredType === moveType) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no STAB move was added, add a STAB move\r\n\t\tif (!counter.get('stab')) {\r\n\t\t\tconst stabMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\r\n\t\t\t\t\tstabMoves.push(moveid);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (stabMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(stabMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t} else {\r\n\t\t\t\t// If they have no regular STAB move, enforce U-turn on Bug types.\r\n\t\t\t\tif (movePool.includes('uturn') && types.includes('Bug')) {\r\n\t\t\t\t\tcounter = this.addMove('uturn', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce recovery\r\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup', 'Staller'].includes(role)) {\r\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\r\n\t\t\tif (recoveryMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce Staller moves\r\n\t\tif (role === 'Staller') {\r\n\t\t\tconst enforcedMoves = [...PROTECT_MOVES, 'toxic'];\r\n\t\t\tfor (const move of enforcedMoves) {\r\n\t\t\t\tif (movePool.includes(move)) {\r\n\t\t\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce setup\r\n\t\tif (role.includes('Setup') || role === 'Z-Move user') {\r\n\t\t\t// Prioritise other setup moves over Flame Charge\r\n\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid) && moveid !== 'flamecharge');\r\n\t\t\tif (setupMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(setupMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t} else {\r\n\t\t\t\tif (movePool.includes('flamecharge')) {\r\n\t\t\t\t\tcounter = this.addMove('flamecharge', moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce a move not on the noSTAB list\r\n\t\tif (!counter.damagingMoves.size && !(moves.has('uturn') && types.includes('Bug'))) {\r\n\t\t\t// Choose an attacking move\r\n\t\t\tconst attackingMoves = [];\r\n\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\r\n\t\t\t}\r\n\t\t\tif (attackingMoves.length) {\r\n\t\t\t\tconst moveid = this.sample(attackingMoves);\r\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Enforce coverage move\r\n\t\tif (['Fast Attacker', 'Setup Sweeper', 'Bulky Attacker', 'Wallbreaker', 'Z-Move user'].includes(role)) {\r\n\t\t\tif (counter.damagingMoves.size === 1) {\r\n\t\t\t\t// Find the type of the current attacking move\r\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value!.type;\r\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\r\n\t\t\t\tconst coverageMoves = [];\r\n\t\t\t\tfor (const moveid of movePool) {\r\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\r\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, preferredType);\r\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\r\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (coverageMoves.length) {\r\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\r\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\r\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\r\n\t\t\tconst moveid = this.sample(movePool);\r\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\tmovePool, preferredType, role);\r\n\t\t\tfor (const pair of MOVE_PAIRS) {\r\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\r\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead,\r\n\t\t\t\t\t\tmovePool, preferredType, role);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\r\n\toverride shouldCullAbility(\r\n\t\tability: string,\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role\r\n\t): boolean {\r\n\t\tswitch (ability) {\r\n\t\tcase 'Chlorophyll': case 'Solar Power':\r\n\t\t\treturn !teamDetails.sun;\r\n\t\tcase 'Hydration': case 'Swift Swim':\r\n\t\t\treturn !teamDetails.rain;\r\n\t\tcase 'Iron Fist': case 'Skill Link': case 'Technician':\r\n\t\t\treturn !counter.get(toID(ability));\r\n\t\tcase 'Overgrow':\r\n\t\t\treturn !counter.get('Grass');\r\n\t\tcase 'Prankster':\r\n\t\t\treturn !counter.get('Status');\r\n\t\tcase 'Rock Head':\r\n\t\t\treturn !counter.get('recoil');\r\n\t\tcase 'Sand Force': case 'Sand Rush':\r\n\t\t\treturn !teamDetails.sand;\r\n\t\tcase 'Slush Rush':\r\n\t\t\treturn !teamDetails.hail;\r\n\t\tcase 'Swarm':\r\n\t\t\treturn !counter.get('Bug');\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\toverride getAbility(\r\n\t\ttypes: Set<string>,\r\n\t\tmoves: Set<string>,\r\n\t\tabilities: string[],\r\n\t\tcounter: MoveCounter,\r\n\t\tmovePool: string[],\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tif (abilities.length <= 1) return abilities[0];\r\n\r\n\t\t// Hard-code abilities here\r\n\t\tif (species.id === 'pangoro' && counter.get('ironfist')) return 'Iron Fist';\r\n\t\tif (species.id === 'tornadus' && counter.get('Status')) return 'Prankster';\r\n\t\tif (species.id === 'marowak' && counter.get('recoil')) return 'Rock Head';\r\n\t\tif (species.id === 'sawsbuck') return moves.has('headbutt') ? 'Serene Grace' : 'Sap Sipper';\r\n\t\tif (species.id === 'toucannon' && counter.get('skilllink')) return 'Skill Link';\r\n\t\tif (species.id === 'golduck' && teamDetails.rain) return 'Swift Swim';\r\n\t\tif (species.id === 'roserade' && counter.get('technician')) return 'Technician';\r\n\r\n\t\tconst abilityAllowed: string[] = [];\r\n\t\t// Obtain a list of abilities that are allowed (not culled)\r\n\t\tfor (const ability of abilities) {\r\n\t\t\tif (!this.shouldCullAbility(\r\n\t\t\t\tability, types, moves, abilities, counter, movePool, teamDetails, species, preferredType, role\r\n\t\t\t)) {\r\n\t\t\t\tabilityAllowed.push(ability);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Pick a random allowed ability\r\n\t\tif (abilityAllowed.length >= 1) return this.sample(abilityAllowed);\r\n\r\n\t\t// If all abilities are rejected, prioritize weather abilities over non-weather abilities\r\n\t\tif (!abilityAllowed.length) {\r\n\t\t\tconst weatherAbilities = abilities.filter(\r\n\t\t\t\ta => ['Chlorophyll', 'Hydration', 'Sand Force', 'Sand Rush', 'Slush Rush', 'Solar Power', 'Swift Swim'].includes(a)\r\n\t\t\t);\r\n\t\t\tif (weatherAbilities.length) return this.sample(weatherAbilities);\r\n\t\t}\r\n\r\n\t\t// Pick a random ability\r\n\t\treturn this.sample(abilities);\r\n\t}\r\n\r\n\tgetPriorityItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string | undefined {\r\n\t\t// Z-Moves\r\n\t\tif (role === 'Z-Move user') {\r\n\t\t\t// Specific Z-Crystals\r\n\t\t\tif (species.baseSpecies === 'Arceus' && species.requiredItems) return species.requiredItems[1];\r\n\t\t\tif (species.name === 'Raichu-Alola') return 'Aloraichium Z';\r\n\t\t\tif (species.name === 'Decidueye') return 'Decidium Z';\r\n\t\t\tif (species.name === 'Incineroar') return 'Incinium Z';\r\n\t\t\tif (species.name === 'Kommo-o') return 'Kommonium Z';\r\n\t\t\tif (species.name === 'Lunala') return 'Lunalium Z';\r\n\t\t\tif (species.baseSpecies === 'Lycanroc') return 'Lycanium Z';\r\n\t\t\tif (species.name === 'Marshadow') return 'Marshadium Z';\r\n\t\t\tif (species.name === 'Mew') return 'Mewnium Z';\r\n\t\t\tif (species.name === 'Mimikyu') return 'Mimikium Z';\r\n\t\t\tif (species.name === 'Necrozma-Dusk-Mane' || species.name === 'Necrozma-Dawn-Wings') {\r\n\t\t\t\tif (moves.has('autotomize') && moves.has('sunsteelstrike')) return 'Solganium Z';\r\n\t\t\t\tif (moves.has('autotomize') && moves.has('moongeistbeam')) return 'Lunalium Z';\r\n\t\t\t\treturn 'Ultranecrozium Z';\r\n\t\t\t}\r\n\t\t\t// General Z-Crystals\r\n\t\t\tif (preferredType === 'Normal') return 'Normalium Z';\r\n\t\t\tif (preferredType) return this.dex.species.get(`Arceus-${preferredType}`).requiredItems![1];\r\n\t\t}\r\n\t\tif (species.requiredItems) {\r\n\t\t\tif (species.baseSpecies === 'Arceus') return species.requiredItems[0];\r\n\t\t\treturn this.sample(species.requiredItems);\r\n\t\t}\r\n\t\tif (role === 'AV Pivot') return 'Assault Vest';\r\n\t\tif (species.name === 'Farfetch\\u2019d') return 'Stick';\r\n\t\tif (species.baseSpecies === 'Marowak') return 'Thick Club';\r\n\t\tif (species.name === 'Pikachu') return 'Light Ball';\r\n\t\tif (species.name === 'Shedinja' || species.name === 'Smeargle') return 'Focus Sash';\r\n\t\tif (species.name === 'Unfezant' || moves.has('focusenergy')) return 'Scope Lens';\r\n\t\tif (species.name === 'Unown') return 'Choice Specs';\r\n\t\tif (species.name === 'Wobbuffet') return 'Custap Berry';\r\n\t\tif (species.name === 'Shuckle') return 'Mental Herb';\r\n\t\tif (species.name === 'Honchkrow') return 'Life Orb';\r\n\t\tif (\r\n\t\t\tability === 'Harvest' || ability === 'Cheek Pouch' || (ability === 'Emergency Exit' && !!counter.get('Status'))\r\n\t\t) return 'Sitrus Berry';\r\n\t\tif (species.name === 'Ditto') return 'Choice Scarf';\r\n\t\tif (ability === 'Poison Heal') return 'Toxic Orb';\r\n\t\tif (ability === 'Speed Boost') return 'Life Orb';\r\n\t\tif (species.nfe) return (species.name === 'Scyther' && role === 'Fast Attacker') ? 'Choice Band' : 'Eviolite';\r\n\t\tif (['healingwish', 'memento', 'switcheroo', 'trick'].some(m => moves.has(m))) {\r\n\t\t\tif (species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && role !== 'Wallbreaker') {\r\n\t\t\t\treturn 'Choice Scarf';\r\n\t\t\t} else {\r\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (moves.has('bellydrum') || moves.has('recycle')) {\r\n\t\t\tif (ability === 'Gluttony') {\r\n\t\t\t\treturn `${this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki'])} Berry`;\r\n\t\t\t} else {\r\n\t\t\t\treturn 'Sitrus Berry';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (moves.has('waterspout')) return 'Choice Scarf';\r\n\t\tif (moves.has('geomancy') || moves.has('skyattack')) return 'Power Herb';\r\n\t\tif (moves.has('shellsmash')) {\r\n\t\t\treturn (ability === 'Solid Rock' && !!counter.get('priority')) ? 'Weakness Policy' : 'White Herb';\r\n\t\t}\r\n\t\tif ((ability === 'Guts' || moves.has('facade')) && !moves.has('sleeptalk') && species.id !== 'stoutland') {\r\n\t\t\treturn (types.includes('Fire') || ability === 'Quick Feet' || ability === 'Toxic Boost') ? 'Toxic Orb' : 'Flame Orb';\r\n\t\t}\r\n\t\tif (ability === 'Magic Guard') return moves.has('counter') ? 'Focus Sash' : 'Life Orb';\r\n\t\tif (species.id === 'rampardos' && role === 'Fast Attacker') return 'Choice Scarf';\r\n\t\tif (ability === 'Sheer Force' && counter.get('sheerforce')) return 'Life Orb';\r\n\t\tif (ability === 'Unburden') return moves.has('closecombat') ? 'White Herb' : 'Sitrus Berry';\r\n\t\tif (moves.has('acrobatics')) return '';\r\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\r\n\t\tif (moves.has('rest') && !moves.has('sleeptalk') && !['Hydration', 'Natural Cure', 'Shed Skin'].includes(ability)) {\r\n\t\t\treturn 'Chesto Berry';\r\n\t\t}\r\n\t\tif (role === 'Staller') return 'Leftovers';\r\n\t}\r\n\r\n\tgetItem(\r\n\t\tability: string,\r\n\t\ttypes: string[],\r\n\t\tmoves: Set<string>,\r\n\t\tcounter: MoveCounter,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\r\n\t\tspecies: Species,\r\n\t\tisLead: boolean,\r\n\t\tpreferredType: string,\r\n\t\trole: RandomTeamsTypes.Role,\r\n\t): string {\r\n\t\tconst defensiveStatTotal = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\r\n\r\n\t\tconst scarfReqs = (\r\n\t\t\trole !== 'Wallbreaker' &&\r\n\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 109 &&\r\n\t\t\t!counter.get('priority') && !moves.has('pursuit')\r\n\t\t);\r\n\r\n\t\tif (\r\n\t\t\tmoves.has('pursuit') && moves.has('suckerpunch') && counter.get('Dark') && !this.priorityPokemon.includes(species.id)\r\n\t\t) return 'Black Glasses';\r\n\t\tif (counter.get('Special') === 4) {\r\n\t\t\treturn (\r\n\t\t\t\tscarfReqs && species.baseStats.spa >= 90 && this.randomChance(1, 2)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Specs';\r\n\t\t}\r\n\t\tif (counter.get('Special') === 3 && moves.has('uturn')) return 'Choice Specs';\r\n\t\tif (counter.get('Physical') === 4 && species.id !== 'jirachi' &&\r\n\t\t\t['dragontail', 'fakeout', 'flamecharge', 'nuzzle', 'rapidspin'].every(m => !moves.has(m))\r\n\t\t) {\r\n\t\t\treturn (\r\n\t\t\t\tscarfReqs && (species.baseStats.atk >= 100 || ability === 'Pure Power' || ability === 'Huge Power') &&\r\n\t\t\t\tthis.randomChance(1, 2)\r\n\t\t\t) ? 'Choice Scarf' : 'Choice Band';\r\n\t\t}\r\n\r\n\t\tif (ability === 'Sturdy' && moves.has('explosion') && !counter.get('speedsetup')) return 'Custap Berry';\r\n\t\tif (types.includes('Normal') && moves.has('fakeout') && !!counter.get('Normal')) return 'Silk Scarf';\r\n\t\tif (species.id === 'latias' || species.id === 'latios') return 'Soul Dew';\r\n\t\tif (role === 'Bulky Setup' && !!counter.get('speedsetup') && !moves.has('swordsdance')) {\r\n\t\t\treturn 'Weakness Policy';\r\n\t\t}\r\n\t\tif (species.id === 'palkia') return 'Lustrous Orb';\r\n\t\tif (species.id === 'archeops') return 'Expert Belt';\r\n\t\tif (!counter.get('Status') && (\r\n\t\t\t['Fast Support', 'Bulky Support', 'Bulky Attacker'].some(m => role === m) || moves.has('rapidspin')\r\n\t\t)) {\r\n\t\t\treturn 'Assault Vest';\r\n\t\t}\r\n\t\tif (moves.has('outrage') && counter.get('setup')) return 'Lum Berry';\r\n\t\tif (\r\n\t\t\t(ability === 'Rough Skin') || (\r\n\t\t\t\tspecies.id !== 'hooh' &&\r\n\t\t\t\tability === 'Regenerator' && species.baseStats.hp + species.baseStats.def >= 180 && this.randomChance(1, 2)\r\n\t\t\t) || (\r\n\t\t\t\tability !== 'Regenerator' && !counter.get('setup') && counter.get('recovery') &&\r\n\t\t\t\tthis.dex.getEffectiveness('Fighting', species) < 1 &&\r\n\t\t\t\t(species.baseStats.hp + species.baseStats.def) > 200 && this.randomChance(1, 2)\r\n\t\t\t)\r\n\t\t) return 'Rocky Helmet';\r\n\t\tif (['kingsshield', 'protect', 'spikyshield', 'substitute'].some(m => moves.has(m))) return 'Leftovers';\r\n\t\tif (\r\n\t\t\tthis.dex.getEffectiveness('Ground', species) >= 2 &&\r\n\t\t\tability !== 'Levitate' && species.id !== 'golemalola'\r\n\t\t) {\r\n\t\t\treturn 'Air Balloon';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t(role === 'Fast Support' || moves.has('stickyweb')) && isLead && defensiveStatTotal < 255 &&\r\n\t\t\t!counter.get('recovery') && (counter.get('hazards') || counter.get('setup')) &&\r\n\t\t\t(!counter.get('recoil') || ability === 'Rock Head')\r\n\t\t) return 'Focus Sash';\r\n\r\n\t\t// Default Items\r\n\t\tif (role === 'Fast Support') {\r\n\t\t\treturn (\r\n\t\t\t\tcounter.get('Physical') + counter.get('Special') >= 3 &&\r\n\t\t\t\t['nuzzle', 'rapidspin', 'uturn', 'voltswitch'].every(m => !moves.has(m)) &&\r\n\t\t\t\tthis.dex.getEffectiveness('Rock', species) < 2\r\n\t\t\t) ? 'Life Orb' : 'Leftovers';\r\n\t\t}\r\n\t\tif (!counter.get('Status')) {\r\n\t\t\treturn (\r\n\t\t\t\t(moves.has('uturn') || moves.has('voltswitch')) && !counter.get('Dragon') && !counter.get('Normal')\r\n\t\t\t) ? 'Expert Belt' : 'Life Orb';\r\n\t\t}\r\n\t\tif (\r\n\t\t\t['Fast Attacker', 'Setup Sweeper', 'Wallbreaker'].some(m => role === m) &&\r\n\t\t\t(this.dex.getEffectiveness('Rock', species) < 2 || species.id === 'ninjask') &&\r\n\t\t\tability !== 'Sturdy'\r\n\t\t) return 'Life Orb';\r\n\t\treturn 'Leftovers';\r\n\t}\r\n\r\n\toverride getLevel(species: Species): number {\r\n\t\t// level set by rules\r\n\t\tif (this.adjustLevel) return this.adjustLevel;\r\n\t\tif (this.gen >= 2) {\r\n\t\t\t// Revamped generations use random-sets.json\r\n\t\t\tconst sets = this.randomSets[species.id];\r\n\t\t\tif (sets.level) return sets.level;\r\n\t\t} else {\r\n\t\t\t// Other generations use random-data.json\r\n\t\t\tconst data = this.randomData[species.id];\r\n\t\t\tif (data.level) return data.level;\r\n\t\t}\r\n\t\t// Gen 2 still uses tier-based levelling\r\n\t\tif (this.gen === 2) {\r\n\t\t\tconst levelScale: { [k: string]: number } = {\r\n\t\t\t\tZU: 81,\r\n\t\t\t\tZUBL: 79,\r\n\t\t\t\tPU: 77,\r\n\t\t\t\tPUBL: 75,\r\n\t\t\t\tNU: 73,\r\n\t\t\t\tNUBL: 71,\r\n\t\t\t\tUU: 69,\r\n\t\t\t\tUUBL: 67,\r\n\t\t\t\tOU: 65,\r\n\t\t\t\tUber: 61,\r\n\t\t\t};\r\n\t\t\tif (levelScale[species.tier]) return levelScale[species.tier];\r\n\t\t}\r\n\t\t// Default to 80\r\n\t\treturn 80;\r\n\t}\r\n\r\n\toverride randomSet(\r\n\t\tspecies: string | Species,\r\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\r\n\t\tisLead = false\r\n\t): RandomTeamsTypes.RandomSet {\r\n\t\tspecies = this.dex.species.get(species);\r\n\t\tconst forme = this.getForme(species);\r\n\t\tconst sets = this.randomSets[species.id][\"sets\"];\r\n\t\tconst possibleSets = [];\r\n\t\t// Check if the Pokemon has a Z-Move user set\r\n\t\tlet canZMove = false;\r\n\t\tfor (const set of sets) {\r\n\t\t\tif (!teamDetails.zMove && set.role === 'Z-Move user') canZMove = true;\r\n\t\t}\r\n\t\tfor (const set of sets) {\r\n\t\t\t// Prevent multiple Z-Move users\r\n\t\t\tif (teamDetails.zMove && set.role === 'Z-Move user') continue;\r\n\t\t\t// Prevent Setup Sweeper and Bulky Setup if Z-Move user is available\r\n\t\t\tif (canZMove && ['Setup Sweeper', 'Bulky Setup'].includes(set.role)) continue;\r\n\t\t\tpossibleSets.push(set);\r\n\t\t}\r\n\t\tconst set = this.sampleIfArray(possibleSets);\r\n\t\tconst role = set.role;\r\n\t\tconst movePool: string[] = Array.from(set.movepool);\r\n\t\tconst preferredTypes = set.preferredTypes;\r\n\t\tconst preferredType = this.sampleIfArray(preferredTypes) || '';\r\n\r\n\t\tlet ability = '';\r\n\t\tlet item = undefined;\r\n\r\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\r\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\r\n\r\n\t\tconst types = species.types;\r\n\t\tconst baseAbilities = set.abilities!;\r\n\t\t// Use the mega's ability for moveset generation\r\n\t\tconst abilities = (species.battleOnly && !species.requiredAbility) ? Object.values(species.abilities) : baseAbilities;\r\n\r\n\t\t// Get moves\r\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, movePool,\r\n\t\t\tpreferredType, role);\r\n\t\tconst counter = this.newQueryMoves(moves, species, preferredType, abilities);\r\n\r\n\t\t// Get ability\r\n\t\tability = this.getAbility(new Set(types), moves, baseAbilities, counter, movePool, teamDetails, species,\r\n\t\t\tpreferredType, role);\r\n\r\n\t\t// Get items\r\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, preferredType, role);\r\n\t\tif (item === undefined) {\r\n\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, preferredType, role);\r\n\t\t}\r\n\r\n\t\t// For Trick / Switcheroo\r\n\t\tif (item === 'Leftovers' && types.includes('Poison')) {\r\n\t\t\titem = 'Black Sludge';\r\n\t\t}\r\n\r\n\t\tconst level = this.getLevel(species);\r\n\r\n\t\t// Minimize confusion damage, including if Foul Play is its only physical attack\r\n\t\tif (\r\n\t\t\t(!counter.get('Physical') || (counter.get('Physical') <= 1 && (moves.has('foulplay') || moves.has('rapidspin')))) &&\r\n\t\t\t!moves.has('copycat') && !moves.has('transform')\r\n\t\t) {\r\n\t\t\tevs.atk = 0;\r\n\t\t\tivs.atk = 0;\r\n\t\t}\r\n\r\n\t\tif (ability === 'Beast Boost' && !counter.get('Special')) {\r\n\t\t\tevs.spa = 0;\r\n\t\t\tivs.spa = 0;\r\n\t\t}\r\n\r\n\t\t// We use a special variable to track Hidden Power\r\n\t\t// so that we can check for all Hidden Powers at once\r\n\t\tlet hasHiddenPower = false;\r\n\t\tfor (const move of moves) {\r\n\t\t\tif (move.startsWith('hiddenpower')) hasHiddenPower = true;\r\n\t\t}\r\n\r\n\t\t// Fix IVs for non-Bottle Cap-able sets\r\n\t\tif (hasHiddenPower && level < 100) {\r\n\t\t\tlet hpType;\r\n\t\t\tfor (const move of moves) {\r\n\t\t\t\tif (move.startsWith('hiddenpower')) hpType = move.substr(11);\r\n\t\t\t}\r\n\t\t\tif (!hpType) throw new Error(`hasHiddenPower is true, but no Hidden Power move was found.`);\r\n\t\t\tconst HPivs = ivs.atk === 0 ? ZeroAttackHPIVs[hpType] : this.dex.types.get(hpType).HPivs;\r\n\t\t\tlet iv: StatID;\r\n\t\t\tfor (iv in HPivs) {\r\n\t\t\t\tivs[iv] = HPivs[iv]!;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Prepare optimal HP\r\n\t\tconst srImmunity = ability === 'Magic Guard';\r\n\t\tconst srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\r\n\t\twhile (evs.hp > 1) {\r\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\r\n\t\t\tif (moves.has('substitute') && !['Black Sludge', 'Leftovers'].includes(item)) {\r\n\t\t\t\tif (item === 'Sitrus Berry' || ability === 'Power Construct') {\r\n\t\t\t\t\t// Two Substitutes should activate Sitrus Berry or Power Construct\r\n\t\t\t\t\tif (hp % 4 === 0) break;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Should be able to use Substitute four times from full HP without fainting\r\n\t\t\t\t\tif (hp % 4 > 0) break;\r\n\t\t\t\t}\r\n\t\t\t} else if (moves.has('bellydrum') && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\r\n\t\t\t\t// Belly Drum should activate Sitrus Berry\r\n\t\t\t\tif (hp % 2 === 0) break;\r\n\t\t\t} else if (['highjumpkick', 'jumpkick'].some(m => moves.has(m))) {\r\n\t\t\t\t// Crash damage move users want an odd HP to survive two misses\r\n\t\t\t\tif (hp % 2 > 0) break;\r\n\t\t\t} else {\r\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\r\n\t\t\t\tif (srWeakness <= 0 || ability === 'Regenerator') break;\r\n\t\t\t\tif (srWeakness === 1 && ['Black Sludge', 'Leftovers', 'Life Orb'].includes(item)) break;\r\n\t\t\t\tif (item !== 'Sitrus Berry' && hp % (4 / srWeakness) > 0) break;\r\n\t\t\t\t// Minimise number of Stealth Rock switch-ins to activate Sitrus Berry\r\n\t\t\t\tif (item === 'Sitrus Berry' && hp % (4 / srWeakness) === 0) break;\r\n\t\t\t}\r\n\t\t\tevs.hp -= 4;\r\n\t\t}\r\n\r\n\t\t// Ensure Nihilego's Beast Boost gives it Special Attack boosts instead of Special Defense\r\n\t\tif (forme === 'Nihilego') {\r\n\t\t\twhile (evs.spd > 1) {\r\n\t\t\t\tconst spa = Math.floor(Math.floor(2 * species.baseStats.spa + ivs.spa + Math.floor(evs.spa / 4)) * level / 100 + 5);\r\n\t\t\t\tconst spd = Math.floor(Math.floor(2 * species.baseStats.spd + ivs.spd + Math.floor(evs.spd / 4)) * level / 100 + 5);\r\n\t\t\t\tif (spa >= spd) break;\r\n\t\t\t\tevs.spd -= 4;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (['gyroball', 'metalburst', 'trickroom'].some(m => moves.has(m))) {\r\n\t\t\tevs.spe = 0;\r\n\t\t\tivs.spe = (hasHiddenPower && level < 100) ? ivs.spe - 30 : 0;\r\n\t\t}\r\n\r\n\t\t// shuffle moves to add more randomness to camomons\r\n\t\tconst shuffledMoves = Array.from(moves);\r\n\t\tthis.prng.shuffle(shuffledMoves);\r\n\r\n\t\t// Z-Conversion Porygon-Z should have Shadow Ball first if no Recover, otherwise Thunderbolt\r\n\t\tif (species.id === 'porygonz' && role === 'Z-Move user') {\r\n\t\t\tconst firstMove = (moves.has('shadowball') ? 'shadowball' : 'thunderbolt');\r\n\t\t\tthis.fastPop(shuffledMoves, shuffledMoves.indexOf(firstMove));\r\n\t\t\tshuffledMoves.unshift(firstMove);\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tname: species.baseSpecies,\r\n\t\t\tspecies: forme,\r\n\t\t\tgender: species.baseSpecies === 'Greninja' ? 'M' : species.gender,\r\n\t\t\tshiny: this.randomChance(1, 1024),\r\n\t\t\tlevel,\r\n\t\t\tmoves: shuffledMoves,\r\n\t\t\tability,\r\n\t\t\tevs,\r\n\t\t\tivs,\r\n\t\t\titem,\r\n\t\t\trole,\r\n\t\t};\r\n\t}\r\n\r\n\toverride randomTeam() {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst seed = this.prng.getSeed();\r\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\r\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\r\n\r\n\t\t// For Monotype\r\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.forceMonotype || this.sample(typePool);\r\n\r\n\t\tconst baseFormes: { [k: string]: number } = {};\r\n\t\tlet hasMega = false;\r\n\r\n\t\tconst typeCount: { [k: string]: number } = {};\r\n\t\tconst typeComboCount: { [k: string]: number } = {};\r\n\t\tconst typeWeaknesses: { [k: string]: number } = {};\r\n\t\tconst typeDoubleWeaknesses: { [k: string]: number } = {};\r\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\r\n\t\tlet numMaxLevelPokemon = 0;\r\n\r\n\t\t// We make at most two passes through the potential Pokemon pool when creating a team - if the first pass doesn't\r\n\t\t// result in a team of six Pokemon we perform a second iteration relaxing as many restrictions as possible.\r\n\t\tfor (const restrict of [true, false]) {\r\n\t\t\tif (pokemon.length >= this.maxTeamSize) break;\r\n\r\n\t\t\tconst pokemonList = Object.keys(this.randomSets);\r\n\t\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\r\n\t\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\r\n\t\t\t\tconst currentSpeciesPool: Species[] = [];\r\n\t\t\t\t// Check if the base species has a mega forme available\r\n\t\t\t\tlet canMega = false;\r\n\t\t\t\tfor (const poke of pokemonPool[baseSpecies]) {\r\n\t\t\t\t\tconst species = this.dex.species.get(poke);\r\n\t\t\t\t\tif (!hasMega && species.isMega) canMega = true;\r\n\t\t\t\t}\r\n\t\t\t\tfor (const poke of pokemonPool[baseSpecies]) {\r\n\t\t\t\t\tconst species = this.dex.species.get(poke);\r\n\t\t\t\t\t// Prevent multiple megas\r\n\t\t\t\t\tif (hasMega && species.isMega) continue;\r\n\t\t\t\t\t// Prevent base forme, if a mega is available\r\n\t\t\t\t\tif (canMega && !species.isMega) continue;\r\n\t\t\t\t\tcurrentSpeciesPool.push(species);\r\n\t\t\t\t}\r\n\t\t\t\tconst species = this.sample(currentSpeciesPool);\r\n\r\n\t\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\t\tif (baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t\t// Limit one Mega per team\r\n\t\t\t\tif (hasMega && species.isMega) continue;\r\n\r\n\t\t\t\tconst types = species.types;\r\n\t\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\t\tconst weakToFreezeDry = (\r\n\t\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\r\n\t\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\r\n\t\t\t\t);\r\n\t\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\t\tif (restrict) {\r\n\t\t\t\t\tif (!isMonotype && !this.forceMonotype) {\r\n\t\t\t\t\t\t// Limit two of any type\r\n\t\t\t\t\t\tlet skip = false;\r\n\t\t\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\r\n\t\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t\t\t// Limit three weak to any type, and one double weak to any type\r\n\t\t\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\r\n\t\t\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\t\t\tif (!typeDoubleWeaknesses[typeName]) typeDoubleWeaknesses[typeName] = 0;\r\n\t\t\t\t\t\t\t\tif (typeDoubleWeaknesses[typeName] >= limitFactor) {\r\n\t\t\t\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\r\n\t\t\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tif (!typeWeaknesses['Fire']) typeWeaknesses['Fire'] = 0;\r\n\t\t\t\t\t\t\tif (typeWeaknesses['Fire'] >= 3 * limitFactor) continue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Limit four weak to Freeze-Dry\r\n\t\t\t\t\t\tif (weakToFreezeDry) {\r\n\t\t\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\r\n\t\t\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 * limitFactor) continue;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Limit one level 100 Pokemon\r\n\t\t\t\t\t\tif (!this.adjustLevel && (this.getLevel(species) === 100) && numMaxLevelPokemon >= limitFactor) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Limit three of any type combination in Monotype\r\n\t\t\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst set = this.randomSet(\r\n\t\t\t\t\tspecies,\r\n\t\t\t\t\tteamDetails,\r\n\t\t\t\t\tpokemon.length === this.maxTeamSize - 1\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst item = this.dex.items.get(set.item);\r\n\r\n\t\t\t\t// Limit one Z-Move per team\r\n\t\t\t\tif (item.zMove && teamDetails.zMove) continue;\r\n\r\n\t\t\t\t// Zoroark copies the last Pokemon and should not be generated in that slot\r\n\t\t\t\tif (set.ability === 'Illusion' && pokemon.length < 1) continue;\r\n\r\n\t\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\t\tpokemon.unshift(set);\r\n\r\n\t\t\t\t// Don't bother tracking details for the last Pokemon\r\n\t\t\t\tif (pokemon.length === this.maxTeamSize) break;\r\n\r\n\t\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\r\n\t\t\t\tbaseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t\t// Increment type counters\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (typeName in typeCount) {\r\n\t\t\t\t\t\ttypeCount[typeName]++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttypeCount[typeName] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (typeCombo in typeComboCount) {\r\n\t\t\t\t\ttypeComboCount[typeCombo]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttypeComboCount[typeCombo] = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Increment weakness counter\r\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t\t// it's weak to the type\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\r\n\t\t\t\t\t\ttypeWeaknesses[typeName]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\r\n\t\t\t\t\t\ttypeDoubleWeaknesses[typeName]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\r\n\t\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\r\n\t\t\t\t\ttypeWeaknesses['Fire']++;\r\n\t\t\t\t}\r\n\t\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\r\n\r\n\t\t\t\t// Increment level 100 counter\r\n\t\t\t\tif (set.level === 100) numMaxLevelPokemon++;\r\n\r\n\t\t\t\t// Track what the team has\r\n\t\t\t\tif (item.megaStone || species.name === 'Rayquaza-Mega') hasMega = true;\r\n\t\t\t\tif (item.zMove) teamDetails.zMove = 1;\r\n\t\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('hail')) teamDetails.hail = 1;\r\n\t\t\t\tif (set.moves.includes('raindance') || set.ability === 'Drizzle' && !item.isPrimalOrb) teamDetails.rain = 1;\r\n\t\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\r\n\t\t\t\tif (set.moves.includes('sunnyday') || set.ability === 'Drought' && !item.isPrimalOrb) teamDetails.sun = 1;\r\n\t\t\t\tif (set.moves.includes('aromatherapy') || set.moves.includes('healbell')) teamDetails.statusCure = 1;\r\n\t\t\t\tif (set.moves.includes('spikes')) teamDetails.spikes = (teamDetails.spikes || 0) + 1;\r\n\t\t\t\tif (set.moves.includes('stealthrock')) teamDetails.stealthRock = 1;\r\n\t\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\r\n\t\t\t\tif (set.moves.includes('toxicspikes')) teamDetails.toxicSpikes = 1;\r\n\t\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\r\n\t\t\t\tif (set.moves.includes('rapidspin')) teamDetails.rapidSpin = 1;\r\n\t\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\r\n\t\t\t\t\tteamDetails.screens = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) {\r\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\toverride randomFactorySets: {\r\n\t\t[format: string]: { [species: string]: BattleFactorySpecies },\r\n\t} = require('./factory-sets.json');\r\n\r\n\toverride randomFactorySet(\r\n\t\tspecies: Species, teamData: RandomTeamsTypes.FactoryTeamDetails, tier: string\r\n\t): RandomTeamsTypes.RandomFactorySet | null {\r\n\t\tconst id = toID(species.name);\r\n\t\tconst setList = this.randomFactorySets[tier][id].sets;\r\n\r\n\t\tconst itemsMax: { [k: string]: number } = {\r\n\t\t\tchoicespecs: 1,\r\n\t\t\tchoiceband: 1,\r\n\t\t\tchoicescarf: 1,\r\n\t\t};\r\n\t\tconst movesMax: { [k: string]: number } = {\r\n\t\t\trapidspin: 1,\r\n\t\t\tbatonpass: 1,\r\n\t\t\tstealthrock: 1,\r\n\t\t\tdefog: 1,\r\n\t\t\tspikes: 1,\r\n\t\t\ttoxicspikes: 1,\r\n\t\t};\r\n\t\tconst requiredMoves: { [k: string]: string } = {\r\n\t\t\tstealthrock: 'hazardSet',\r\n\t\t\trapidspin: 'hazardClear',\r\n\t\t\tdefog: 'hazardClear',\r\n\t\t};\r\n\t\tconst weatherAbilitiesRequire: { [k: string]: string } = {\r\n\t\t\thydration: 'raindance', swiftswim: 'raindance',\r\n\t\t\tleafguard: 'sunnyday', solarpower: 'sunnyday', chlorophyll: 'sunnyday',\r\n\t\t\tsandforce: 'sandstorm', sandrush: 'sandstorm', sandveil: 'sandstorm',\r\n\t\t\tslushrush: 'hail', snowcloak: 'hail',\r\n\t\t};\r\n\t\tconst weatherAbilities = ['drizzle', 'drought', 'snowwarning', 'sandstream'];\r\n\r\n\t\t// Build a pool of eligible sets, given the team partners\r\n\t\t// Also keep track of sets with moves the team requires\r\n\t\tlet effectivePool: { set: AnyObject, moveVariants?: number[], item?: string, ability?: string }[] = [];\r\n\t\tconst priorityPool = [];\r\n\t\tfor (const curSet of setList) {\r\n\t\t\tif (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\r\n\r\n\t\t\t// reject disallowed items\r\n\t\t\tconst allowedItems: string[] = [];\r\n\t\t\tfor (const itemString of curSet.item) {\r\n\t\t\t\tconst item = this.dex.items.get(itemString);\r\n\t\t\t\tif (teamData.megaCount && teamData.megaCount > 0 && item.megaStone) continue; // reject 2+ mega stones\r\n\t\t\t\tif (teamData.zCount && teamData.zCount > 0 && item.zMove) continue; // reject 2+ Z stones\r\n\t\t\t\tif (itemsMax[item.id] && teamData.has[item.id] >= itemsMax[item.id]) continue; // reject 2+ same choice item\r\n\t\t\t\tallowedItems.push(itemString);\r\n\t\t\t}\r\n\t\t\tif (allowedItems.length === 0) continue;\r\n\t\t\tconst curSetItem = this.sample(allowedItems);\r\n\r\n\t\t\t// reject bad weather abilities\r\n\t\t\tconst allowedAbilities: string[] = [];\r\n\t\t\tfor (const abilityString of curSet.ability) {\r\n\t\t\t\tconst ability = this.dex.abilities.get(abilityString);\r\n\t\t\t\tif (weatherAbilitiesRequire[ability.id] && teamData.weather !== weatherAbilitiesRequire[ability.id]) continue;\r\n\t\t\t\tif (teamData.weather && weatherAbilities.includes(ability.id)) continue; // reject 2+ weather setters\r\n\t\t\t\tallowedAbilities.push(abilityString);\r\n\t\t\t}\r\n\t\t\tif (allowedAbilities.length === 0) continue;\r\n\t\t\tconst curSetAbility = this.sample(allowedAbilities);\r\n\r\n\t\t\tlet reject = false;\r\n\t\t\tlet hasRequiredMove = false;\r\n\t\t\tconst curSetVariants = [];\r\n\t\t\tfor (const move of curSet.moves) {\r\n\t\t\t\tconst variantIndex = this.random(move.length);\r\n\t\t\t\tconst moveId = toID(move[variantIndex]);\r\n\t\t\t\tif (movesMax[moveId] && teamData.has[moveId] >= movesMax[moveId]) {\r\n\t\t\t\t\treject = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (requiredMoves[moveId] && !teamData.has[requiredMoves[moveId]]) {\r\n\t\t\t\t\thasRequiredMove = true;\r\n\t\t\t\t}\r\n\t\t\t\tcurSetVariants.push(variantIndex);\r\n\t\t\t}\r\n\t\t\tif (reject) continue;\r\n\r\n\t\t\tconst fullSetSpec = { set: curSet, moveVariants: curSetVariants, item: curSetItem, ability: curSetAbility };\r\n\t\t\teffectivePool.push(fullSetSpec);\r\n\t\t\tif (hasRequiredMove) priorityPool.push(fullSetSpec);\r\n\t\t}\r\n\t\tif (priorityPool.length) effectivePool = priorityPool;\r\n\r\n\t\tif (!effectivePool.length) {\r\n\t\t\tif (!teamData.forceResult) return null;\r\n\t\t\tfor (const curSet of setList) {\r\n\t\t\t\teffectivePool.push({ set: curSet });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst setData = this.sample(effectivePool);\r\n\t\tconst moves = [];\r\n\t\tfor (const [i, moveSlot] of setData.set.moves.entries()) {\r\n\t\t\tmoves.push(setData.moveVariants ? moveSlot[setData.moveVariants[i]] : this.sample(moveSlot));\r\n\t\t}\r\n\r\n\t\tconst item = setData.item || this.sampleIfArray(setData.set.item);\r\n\t\tconst ability = setData.ability || this.sampleIfArray(setData.set.ability);\r\n\t\tconst nature = this.sampleIfArray(setData.set.nature);\r\n\t\tconst level = this.adjustLevel || setData.set.level || (tier === \"LC\" ? 5 : 100);\r\n\r\n\t\treturn {\r\n\t\t\tname: setData.set.name || species.baseSpecies,\r\n\t\t\tspecies: setData.set.species,\r\n\t\t\tgender: setData.set.gender || species.gender || (this.randomChance(1, 2) ? 'M' : 'F'),\r\n\t\t\titem: item || '',\r\n\t\t\tability: ability || species.abilities['0'],\r\n\t\t\tshiny: typeof setData.set.shiny === 'undefined' ? this.randomChance(1, 1024) : setData.set.shiny,\r\n\t\t\tlevel,\r\n\t\t\thappiness: typeof setData.set.happiness === 'undefined' ? 255 : setData.set.happiness,\r\n\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },\r\n\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },\r\n\t\t\tnature: nature || 'Serious',\r\n\t\t\tmoves,\r\n\t\t};\r\n\t}\r\n\r\n\toverride randomFactoryTeam(side: PlayerOptions, depth = 0): RandomTeamsTypes.RandomFactorySet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst forceResult = (depth >= 12);\r\n\t\tconst isMonotype = !!this.forceMonotype || this.dex.formats.getRuleTable(this.format).has('sametypeclause');\r\n\r\n\t\t// The teams generated depend on the tier choice in such a way that\r\n\t\t// no exploitable information is leaked from rolling the tier in getTeam(p1).\r\n\t\tif (!this.factoryTier) {\r\n\t\t\tthis.factoryTier = isMonotype ? 'Mono' : this.sample(['Uber', 'OU', 'UU', 'RU', 'NU', 'PU', 'LC']);\r\n\t\t} else if (isMonotype && this.factoryTier !== 'Mono') {\r\n\t\t\t// I don't think this can ever happen?\r\n\t\t\tthrow new Error(`Can't generate a Monotype Battle Factory set in a battle with factory tier ${this.factoryTier}`);\r\n\t\t}\r\n\r\n\t\tconst tierValues: { [k: string]: number } = {\r\n\t\t\tUber: 5,\r\n\t\t\tOU: 4, UUBL: 4,\r\n\t\t\tUU: 3, RUBL: 3,\r\n\t\t\tRU: 2, NUBL: 2,\r\n\t\t\tNU: 1, PUBL: 1,\r\n\t\t\tPU: 0,\r\n\t\t};\r\n\r\n\t\tconst pokemon = [];\r\n\t\tconst pokemonPool = Object.keys(this.randomFactorySets[this.factoryTier]);\r\n\r\n\t\tconst typePool = this.dex.types.names();\r\n\t\tconst type = this.sample(typePool);\r\n\r\n\t\tconst teamData: TeamData = {\r\n\t\t\ttypeCount: {}, typeComboCount: {}, baseFormes: {}, megaCount: 0, zCount: 0,\r\n\t\t\thas: {}, forceResult, weaknesses: {}, resistances: {},\r\n\t\t};\r\n\t\tconst requiredMoveFamilies = ['hazardSet', 'hazardClear'];\r\n\t\tconst requiredMoves: { [k: string]: string } = {\r\n\t\t\tstealthrock: 'hazardSet',\r\n\t\t\trapidspin: 'hazardClear',\r\n\t\t\tdefog: 'hazardClear',\r\n\t\t};\r\n\t\tconst weatherAbilitiesSet: { [k: string]: string } = {\r\n\t\t\tdrizzle: 'raindance',\r\n\t\t\tdrought: 'sunnyday',\r\n\t\t\tsnowwarning: 'hail',\r\n\t\t\tsandstream: 'sandstorm',\r\n\t\t};\r\n\t\tconst resistanceAbilities: { [k: string]: string[] } = {\r\n\t\t\tdryskin: ['Water'], waterabsorb: ['Water'], stormdrain: ['Water'],\r\n\t\t\tflashfire: ['Fire'], heatproof: ['Fire'],\r\n\t\t\tlightningrod: ['Electric'], motordrive: ['Electric'], voltabsorb: ['Electric'],\r\n\t\t\tsapsipper: ['Grass'],\r\n\t\t\tthickfat: ['Ice', 'Fire'],\r\n\t\t\tlevitate: ['Ground'],\r\n\t\t};\r\n\r\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\t// Lessen the need of deleting sets of Pokemon after tier shifts\r\n\t\t\tif (\r\n\t\t\t\tthis.factoryTier in tierValues && species.tier in tierValues &&\r\n\t\t\t\ttierValues[species.tier] > tierValues[this.factoryTier]\r\n\t\t\t) continue;\r\n\r\n\t\t\tconst speciesFlags = this.randomFactorySets[this.factoryTier][species.id].flags;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (teamData.baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Limit the number of Megas to one\r\n\t\t\tif (!teamData.megaCount) teamData.megaCount = 0;\r\n\t\t\tif (teamData.megaCount >= 1 && speciesFlags.megaOnly) continue;\r\n\r\n\t\t\tconst set = this.randomFactorySet(species, teamData, this.factoryTier);\r\n\t\t\tif (!set) continue;\r\n\r\n\t\t\tconst itemData = this.dex.items.get(set.item);\r\n\r\n\t\t\t// Actually limit the number of Megas to one\r\n\t\t\tif (teamData.megaCount >= 1 && itemData.megaStone) continue;\r\n\r\n\t\t\t// Limit the number of Z moves to one\r\n\t\t\tif (teamData.zCount && teamData.zCount >= 1 && itemData.zMove) continue;\r\n\r\n\t\t\tlet types = species.types;\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\t// Enforce Monotype\r\n\t\t\tif (isMonotype) {\r\n\t\t\t\t// Prevents Mega Evolutions from breaking the type limits\r\n\t\t\t\tif (itemData.megaStone) {\r\n\t\t\t\t\tconst megaSpecies = this.dex.species.get(itemData.megaStone);\r\n\t\t\t\t\tif (types.length > megaSpecies.types.length) types = [species.types[0]];\r\n\t\t\t\t\t// Only check the second type because a Mega Evolution should always share the first type with its base forme.\r\n\t\t\t\t\tif (megaSpecies.types[1] && types[1] && megaSpecies.types[1] !== types[1]) {\r\n\t\t\t\t\t\ttypes = [megaSpecies.types[0]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!types.includes(type)) continue;\r\n\t\t\t} else {\r\n\t\t\t\t// If not Monotype, limit to two of each type\r\n\t\t\t\tlet skip = false;\r\n\t\t\t\tfor (const typeName of types) {\r\n\t\t\t\t\tif (teamData.typeCount[typeName] >= 2 * limitFactor && this.randomChance(4, 5)) {\r\n\t\t\t\t\t\tskip = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (skip) continue;\r\n\r\n\t\t\t\t// Limit 1 of any type combination\r\n\t\t\t\tlet typeCombo = types.slice().sort().join();\r\n\t\t\t\tif (set.ability === 'Drought' || set.ability === 'Drizzle') {\r\n\t\t\t\t// Drought and Drizzle don't count towards the type combo limit\r\n\t\t\t\t\ttypeCombo = set.ability;\r\n\t\t\t\t}\r\n\t\t\t\tif (teamData.typeComboCount[typeCombo] >= limitFactor) continue;\r\n\t\t\t}\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\t\t\tconst typeCombo = types.slice().sort().join();\r\n\t\t\t// Now that our Pokemon has passed all checks, we can update team data:\r\n\t\t\tfor (const typeName of types) {\r\n\t\t\t\tif (typeName in teamData.typeCount) {\r\n\t\t\t\t\tteamData.typeCount[typeName]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.typeCount[typeName] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tteamData.typeComboCount[typeCombo] = (teamData.typeComboCount[typeCombo] + 1) || 1;\r\n\r\n\t\t\tteamData.baseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\tif (itemData.megaStone) teamData.megaCount++;\r\n\t\t\tif (itemData.zMove) {\r\n\t\t\t\tif (!teamData.zCount) teamData.zCount = 0;\r\n\t\t\t\tteamData.zCount++;\r\n\t\t\t}\r\n\t\t\tif (itemData.id in teamData.has) {\r\n\t\t\t\tteamData.has[itemData.id]++;\r\n\t\t\t} else {\r\n\t\t\t\tteamData.has[itemData.id] = 1;\r\n\t\t\t}\r\n\r\n\t\t\tconst abilityState = this.dex.abilities.get(set.ability);\r\n\t\t\tif (abilityState.id in weatherAbilitiesSet) {\r\n\t\t\t\tteamData.weather = weatherAbilitiesSet[abilityState.id];\r\n\t\t\t}\r\n\r\n\t\t\tfor (const move of set.moves) {\r\n\t\t\t\tconst moveId = toID(move);\r\n\t\t\t\tif (moveId in teamData.has) {\r\n\t\t\t\t\tteamData.has[moveId]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.has[moveId] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveId in requiredMoves) {\r\n\t\t\t\t\tteamData.has[requiredMoves[moveId]] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// Cover any major weakness (3+) with at least one resistance\r\n\t\t\t\tif (teamData.resistances[typeName] >= 1) continue;\r\n\t\t\t\tif (resistanceAbilities[abilityState.id]?.includes(typeName) || !this.dex.getImmunity(typeName, types)) {\r\n\t\t\t\t\t// Heuristic: assume that Pok\u00E9mon with these abilities don't have (too) negative typing.\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst typeMod = this.dex.getEffectiveness(typeName, types);\r\n\t\t\t\tif (typeMod < 0) {\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t} else if (typeMod > 0) {\r\n\t\t\t\t\tteamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize) return this.randomFactoryTeam(side, ++depth);\r\n\r\n\t\t// Quality control\r\n\t\tif (!teamData.forceResult) {\r\n\t\t\tfor (const requiredFamily of requiredMoveFamilies) {\r\n\t\t\t\tif (!teamData.has[requiredFamily]) return this.randomFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t\tfor (const typeName in teamData.weaknesses) {\r\n\t\t\t\tif (teamData.weaknesses[typeName] >= 3) return this.randomFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n\r\n\toverride randomBSSFactorySets: AnyObject = require('./bss-factory-sets.json');\r\n\r\n\toverride randomBSSFactorySet(\r\n\t\tspecies: Species, teamData: RandomTeamsTypes.FactoryTeamDetails\r\n\t): RandomTeamsTypes.RandomFactorySet | null {\r\n\t\tconst id = toID(species.name);\r\n\t\t// const flags = this.randomBSSFactorySets[tier][id].flags;\r\n\t\tconst setList = this.randomBSSFactorySets[id].sets;\r\n\r\n\t\tconst movesMax: { [k: string]: number } = {\r\n\t\t\tbatonpass: 1,\r\n\t\t\tstealthrock: 1,\r\n\t\t\tspikes: 1,\r\n\t\t\ttoxicspikes: 1,\r\n\t\t\tdoubleedge: 1,\r\n\t\t\ttrickroom: 1,\r\n\t\t};\r\n\t\tconst requiredMoves: { [k: string]: number } = {};\r\n\t\tconst weatherAbilitiesRequire: { [k: string]: string } = {\r\n\t\t\tswiftswim: 'raindance',\r\n\t\t\tsandrush: 'sandstorm', sandveil: 'sandstorm',\r\n\t\t};\r\n\t\tconst weatherAbilities = ['drizzle', 'drought', 'snowwarning', 'sandstream'];\r\n\r\n\t\t// Build a pool of eligible sets, given the team partners\r\n\t\t// Also keep track of sets with moves the team requires\r\n\t\tlet effectivePool: { set: AnyObject, moveVariants?: number[], itemVariants?: number, abilityVariants?: number }[] = [];\r\n\t\tconst priorityPool = [];\r\n\t\tfor (const curSet of setList) {\r\n\t\t\tif (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\r\n\r\n\t\t\tconst item = this.dex.items.get(curSet.item);\r\n\t\t\tif (teamData.megaCount && teamData.megaCount > 1 && item.megaStone) continue; // reject 3+ mega stones\r\n\t\t\tif (teamData.zCount && teamData.zCount > 1 && item.zMove) continue; // reject 3+ Z stones\r\n\t\t\tif (teamData.has[item.id]) continue; // Item clause\r\n\r\n\t\t\tconst ability = this.dex.abilities.get(curSet.ability);\r\n\t\t\tif (weatherAbilitiesRequire[ability.id] && teamData.weather !== weatherAbilitiesRequire[ability.id]) continue;\r\n\t\t\tif (teamData.weather && weatherAbilities.includes(ability.id)) continue; // reject 2+ weather setters\r\n\r\n\t\t\tif (curSet.species === 'Aron' && teamData.weather !== 'sandstorm') continue; // reject Aron without a Sand Stream user\r\n\r\n\t\t\tlet reject = false;\r\n\t\t\tlet hasRequiredMove = false;\r\n\t\t\tconst curSetVariants = [];\r\n\t\t\tfor (const move of curSet.moves) {\r\n\t\t\t\tconst variantIndex = this.random(move.length);\r\n\t\t\t\tconst moveId = toID(move[variantIndex]);\r\n\t\t\t\tif (movesMax[moveId] && teamData.has[moveId] >= movesMax[moveId]) {\r\n\t\t\t\t\treject = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (requiredMoves[moveId] && !teamData.has[requiredMoves[moveId]]) {\r\n\t\t\t\t\thasRequiredMove = true;\r\n\t\t\t\t}\r\n\t\t\t\tcurSetVariants.push(variantIndex);\r\n\t\t\t}\r\n\t\t\tif (reject) continue;\r\n\t\t\teffectivePool.push({ set: curSet, moveVariants: curSetVariants });\r\n\t\t\tif (hasRequiredMove) priorityPool.push({ set: curSet, moveVariants: curSetVariants });\r\n\t\t}\r\n\t\tif (priorityPool.length) effectivePool = priorityPool;\r\n\r\n\t\tif (!effectivePool.length) {\r\n\t\t\tif (!teamData.forceResult) return null;\r\n\t\t\tfor (const curSet of setList) {\r\n\t\t\t\teffectivePool.push({ set: curSet });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst setData = this.sample(effectivePool);\r\n\t\tconst moves = [];\r\n\t\tfor (const [i, moveSlot] of setData.set.moves.entries()) {\r\n\t\t\tmoves.push(setData.moveVariants ? moveSlot[setData.moveVariants[i]] : this.sample(moveSlot));\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tname: setData.set.nickname || setData.set.name || species.baseSpecies,\r\n\t\t\tspecies: setData.set.species,\r\n\t\t\tgender: setData.set.gender || species.gender || (this.randomChance(1, 2) ? 'M' : 'F'),\r\n\t\t\titem: this.sampleIfArray(setData.set.item) || '',\r\n\t\t\tability: setData.set.ability || species.abilities['0'],\r\n\t\t\tshiny: typeof setData.set.shiny === 'undefined' ? this.randomChance(1, 1024) : setData.set.shiny,\r\n\t\t\tlevel: setData.set.level || 50,\r\n\t\t\thappiness: typeof setData.set.happiness === 'undefined' ? 255 : setData.set.happiness,\r\n\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },\r\n\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },\r\n\t\t\tnature: setData.set.nature || 'Serious',\r\n\t\t\tmoves,\r\n\t\t};\r\n\t}\r\n\r\n\toverride randomBSSFactoryTeam(side: PlayerOptions, depth = 0): RandomTeamsTypes.RandomFactorySet[] {\r\n\t\tthis.enforceNoDirectCustomBanlistChanges();\r\n\r\n\t\tconst forceResult = (depth >= 4);\r\n\r\n\t\tconst pokemon = [];\r\n\r\n\t\tconst pokemonPool = Object.keys(this.randomBSSFactorySets);\r\n\r\n\t\tconst teamData: TeamData = {\r\n\t\t\ttypeCount: {}, typeComboCount: {}, baseFormes: {}, megaCount: 0, zCount: 0,\r\n\t\t\teeveeLimCount: 0, has: {}, forceResult, weaknesses: {}, resistances: {},\r\n\t\t};\r\n\t\tconst requiredMoveFamilies: string[] = [];\r\n\t\tconst requiredMoves: { [k: string]: string } = {};\r\n\t\tconst weatherAbilitiesSet: { [k: string]: string } = {\r\n\t\t\tdrizzle: 'raindance',\r\n\t\t\tdrought: 'sunnyday',\r\n\t\t\tsnowwarning: 'hail',\r\n\t\t\tsandstream: 'sandstorm',\r\n\t\t};\r\n\t\tconst resistanceAbilities: { [k: string]: string[] } = {\r\n\t\t\twaterabsorb: ['Water'],\r\n\t\t\tflashfire: ['Fire'],\r\n\t\t\tlightningrod: ['Electric'], voltabsorb: ['Electric'],\r\n\t\t\tthickfat: ['Ice', 'Fire'],\r\n\t\t\tlevitate: ['Ground'],\r\n\t\t};\r\n\r\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\r\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\r\n\t\t\tif (!species.exists) continue;\r\n\r\n\t\t\tconst speciesFlags = this.randomBSSFactorySets[species.id].flags;\r\n\t\t\tif (!teamData.megaCount) teamData.megaCount = 0;\r\n\r\n\t\t\t// Limit to one of each species (Species Clause)\r\n\t\t\tif (teamData.baseFormes[species.baseSpecies]) continue;\r\n\r\n\t\t\t// Limit the number of Megas + Z-moves to 3\r\n\t\t\tif (teamData.megaCount + (teamData.zCount ? teamData.zCount : 0) >= 3 && speciesFlags.megaOnly) continue;\r\n\r\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\r\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\r\n\r\n\t\t\t// Limit 2 of any type\r\n\t\t\tconst types = species.types;\r\n\t\t\tlet skip = false;\r\n\t\t\tfor (const type of types) {\r\n\t\t\t\tif (teamData.typeCount[type] >= 2 * limitFactor && this.randomChance(4, 5)) {\r\n\t\t\t\t\tskip = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (skip) continue;\r\n\r\n\t\t\t// Restrict Eevee with certain Pokemon\r\n\t\t\tif (speciesFlags.limEevee) {\r\n\t\t\t\tif (!teamData.eeveeLimCount) teamData.eeveeLimCount = 0;\r\n\t\t\t\tteamData.eeveeLimCount++;\r\n\t\t\t}\r\n\t\t\tif (teamData.eeveeLimCount && teamData.eeveeLimCount >= 1 && speciesFlags.limEevee) continue;\r\n\r\n\t\t\tconst set = this.randomBSSFactorySet(species, teamData);\r\n\t\t\tif (!set) continue;\r\n\r\n\t\t\t// Limit 1 of any type combination\r\n\t\t\tlet typeCombo = types.slice().sort().join();\r\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Drizzle') {\r\n\t\t\t\t// Drought and Drizzle don't count towards the type combo limit\r\n\t\t\t\ttypeCombo = set.ability;\r\n\t\t\t}\r\n\t\t\tif (teamData.typeComboCount[typeCombo] >= limitFactor) continue;\r\n\r\n\t\t\t// Okay, the set passes, add it to our team\r\n\t\t\tpokemon.push(set);\r\n\r\n\t\t\t// Now that our Pokemon has passed all checks, we can update team data:\r\n\t\t\tfor (const type of types) {\r\n\t\t\t\tif (type in teamData.typeCount) {\r\n\t\t\t\t\tteamData.typeCount[type]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.typeCount[type] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tteamData.typeComboCount[typeCombo] = (teamData.typeComboCount[typeCombo] + 1) || 1;\r\n\r\n\t\t\tteamData.baseFormes[species.baseSpecies] = 1;\r\n\r\n\t\t\t// Limit Mega and Z-move\r\n\t\t\tconst itemData = this.dex.items.get(set.item);\r\n\t\t\tif (itemData.megaStone) teamData.megaCount++;\r\n\t\t\tif (itemData.zMove) {\r\n\t\t\t\tif (!teamData.zCount) teamData.zCount = 0;\r\n\t\t\t\tteamData.zCount++;\r\n\t\t\t}\r\n\t\t\tteamData.has[itemData.id] = 1;\r\n\r\n\t\t\tconst abilityState = this.dex.abilities.get(set.ability);\r\n\t\t\tif (abilityState.id in weatherAbilitiesSet) {\r\n\t\t\t\tteamData.weather = weatherAbilitiesSet[abilityState.id];\r\n\t\t\t}\r\n\r\n\t\t\tfor (const move of set.moves) {\r\n\t\t\t\tconst moveId = toID(move);\r\n\t\t\t\tif (moveId in teamData.has) {\r\n\t\t\t\t\tteamData.has[moveId]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tteamData.has[moveId] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (moveId in requiredMoves) {\r\n\t\t\t\t\tteamData.has[requiredMoves[moveId]] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\t\t// Cover any major weakness (3+) with at least one resistance\r\n\t\t\t\tif (teamData.resistances[typeName] >= 1) continue;\r\n\t\t\t\tif (resistanceAbilities[abilityState.id]?.includes(typeName) || !this.dex.getImmunity(typeName, types)) {\r\n\t\t\t\t\t// Heuristic: assume that Pok\u00E9mon with these abilities don't have (too) negative typing.\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst typeMod = this.dex.getEffectiveness(typeName, types);\r\n\t\t\t\tif (typeMod < 0) {\r\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\r\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\r\n\t\t\t\t} else if (typeMod > 0) {\r\n\t\t\t\t\tteamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.length < this.maxTeamSize) return this.randomBSSFactoryTeam(side, ++depth);\r\n\r\n\t\t// Quality control\r\n\t\tif (!teamData.forceResult) {\r\n\t\t\tfor (const requiredFamily of requiredMoveFamilies) {\r\n\t\t\t\tif (!teamData.has[requiredFamily]) return this.randomBSSFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t\tfor (const type in teamData.weaknesses) {\r\n\t\t\t\tif (teamData.weaknesses[type] >= 3) return this.randomBSSFactoryTeam(side, ++depth);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pokemon;\r\n\t}\r\n}\r\n\r\nexport default RandomGen7Teams;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAE5D,iBAAqB;AAgBd,MAAM,kBAAqD;AAAA,EACjE,OAAO,EAAE,IAAI,IAAI,KAAK,GAAG;AAAA,EACzB,MAAM,EAAE,KAAK,IAAI,KAAK,GAAG;AAAA,EACzB,KAAK,EAAE,KAAK,GAAG;AAAA,EACf,QAAQ,EAAE,KAAK,IAAI,KAAK,GAAG;AAAA,EAC3B,UAAU,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AAAA,EAC/C,UAAU,EAAE,KAAK,IAAI,KAAK,GAAG;AAAA,EAC7B,SAAS,EAAE,KAAK,GAAG;AAAA,EACnB,QAAQ,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AAAA,EACpC,MAAM,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AACnC;AAGA,MAAM,iBAAiB;AAAA,EACtB;AAAA,EAAa;AAAA,EAAa;AAAA,EAAa;AAAA,EAAc;AAAA,EAAW;AAAA,EAAW;AAAA,EAAS;AAAA,EAAW;AAAA,EAAY;AAAA,EAAc;AAAA,EAAe;AACzI;AAEA,MAAM,iBAAiB;AAAA,EACtB;AAAA,EAAe;AAAA,EAAa;AAAA,EAAY;AAAA,EAAc;AACvD;AAEA,MAAM,iBAAiB;AAAA,EACtB;AAAA,EAAa;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAe;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAY;AAAA,EAAgB;AAAA,EAAW;AACpH;AAEA,MAAM,gBAAgB;AAAA,EACrB;AAAA,EAAY;AAAA,EAAc;AAAA,EAAY;AAAA,EAAa;AAAA,EAAe;AACnE;AAEA,MAAM,cAAc;AAAA,EACnB;AAAA,EAAa;AAAA,EAAU;AAAA,EAAa;AAAA,EAAa;AAAA,EAAc;AAChE;AAEA,MAAM,cAAc;AAAA,EACnB;AAAA,EAAW;AAAA,EAAc;AAAA,EAAe;AACzC;AAEA,MAAM,QAAQ;AAAA,EACb;AAAA,EAAa;AAAA,EAAW;AAAA,EAAc;AAAA,EAAa;AAAA,EAAU;AAAA,EAAY;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAc;AAAA,EAAS;AAAA,EACrH;AAAA,EAAmB;AAAA,EAAe;AAAA,EAAe;AAAA,EAAY;AAAA,EAAU;AAAA,EAAa;AAAA,EAAa;AAAA,EAAa;AAAA,EAAQ;AAAA,EAAe;AAAA,EACrI;AAAA,EAAa;AAAA,EAAgB;AAAA,EAAe;AAAA,EAAa;AAAA,EAAc;AAAA,EAAc;AAAA,EAAa;AAAA,EAAe;AAAA,EAAY;AAC9H;AAEA,MAAM,UAAU;AAAA,EACf;AAAA,EAAc;AAAA,EAAW;AAAA,EAAe;AAAA,EAAa;AAAA,EAAc;AAAA,EAAY;AAAA,EAC/E;AAAA,EAAW;AAAA,EAAmB;AAAA,EAAe;AAAA,EAAe;AAAA,EAAY;AAAA,EAAW;AAAA,EAAc;AAAA,EAAe;AAAA,EAChH;AAAA,EAAU;AAAA,EAAS;AAAA,EAAgB;AAAA,EAAW;AAAA,EAAe;AAAA,EAAa;AAAA,EAAY;AAAA,EAAgB;AAAA,EACtG;AAAA,EAAa;AAAA,EAAW;AAAA,EAAS;AAAA,EAAe;AAAA,EAAS;AAAA,EAAiB;AAAA,EAAc;AAAA,EAAc;AACvG;AAEA,MAAM,UAAU;AAAA,EACf;AAAA,EAAU;AAAA,EAAe;AAAA,EAAa;AACvC;AAEA,MAAM,gBAAgB;AAAA,EACrB;AAAA,EAAiB;AAAA,EAAe;AAAA,EAAW;AAC5C;AAEA,MAAM,cAAc;AAAA,EACnB;AAAA,EAAe;AAAA,EAAS;AACzB;AAGA,MAAM,aAAa;AAAA,EAClB,CAAC,eAAe,SAAS;AAAA,EACzB,CAAC,aAAa,MAAM;AAAA,EACpB,CAAC,WAAW,MAAM;AAAA,EAClB,CAAC,eAAe,MAAM;AAAA,EACtB,CAAC,aAAa,YAAY;AAAA,EAC1B,CAAC,cAAc,SAAS;AAAA,EACxB,CAAC,aAAa,UAAU;AACzB;AAGA,MAAM,mBAAmB;AAAA,EACxB;AAAA,EAAa;AAAA,EAAW;AAAA,EAAW;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAa;AAAA,EAAa;AAAA,EAAW;AAAA,EAAU;AAAA,EAAc;AACrI;AACA,SAAS,oBAAoB,MAAY;AACxC,SAAO,KAAK,WAAW,UAAU,KAAK,UAAU,UAAU,MAAM,KAAK,UAAU,SAAS;AACzF;AAEO,MAAM,wBAAwB,6BAAgB;AAAA,EAIpD,YAAY,QAAyB,MAA8B;AAClE,UAAM,QAAQ,IAAI;AAJnB,sBAAwE,QAAQ,aAAa;AA2wC7F,SAAS,oBAEL,QAAQ,qBAAqB;AA8TjC,SAAS,uBAAkC,QAAQ,yBAAyB;AArkD3E,SAAK,SAAS;AACd,SAAK,kBAAkB;AAEvB,SAAK,0BAA0B;AAAA,MAC9B,KAAK,CAAC,UAAU,OAAO,WAAW,OAAO,YACxC,CAAC,YAAY,YAAY,EAAE,KAAK,OAAK,SAAS,SAAS,CAAC,CAAC,KACzD,CAAC,QAAQ,IAAI,KAAK,MAAM,UAAU,SAAS,aAAa,KAAK,UAAU,SAAS,cAAc;AAAA,MAE/F,MAAM,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,MAAM;AAAA,MACzE,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,UAAU,SAAS,UAAU;AAAA,MAChH,UAAU,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,UAAU;AAAA,MACjF,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,OAAO;AAAA,MAC3E,UAAU,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,UAAU;AAAA,MACjF,MAAM,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,MAAM;AAAA,MACzE,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YACpD,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,CAAC,cAAc,kBAAkB,SAAS,EAAE,SAAS,QAAQ,EAAE,KAC1F,CAAC,SAAS,SAAS,mBAAmB;AAAA,MAEvC,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,OAAO;AAAA,MAC3E,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YACnD,CAAC,QAAQ,IAAI,OAAO,MAAM,QAAQ,UAAU,OAAO,OAAO,SAAS,SAAS,WAAW;AAAA,MAExF,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7E,KAAK,CAAC,UAAU,OAAO,WAAW,OAAO,YACxC,CAAC,QAAQ,IAAI,KAAK,KAAM,MAAM,IAAI,SAAS,KAAK,SAAS,SAAS,WAAW,KAC5E,UAAU,SAAS,aAAa,KAAK,SAAS,SAAS,QAAQ;AAAA,MAEjE,QAAQ,cAAa,SAAS,SAAS,WAAW,KAAK,SAAS,SAAS,YAAY;AAAA,MACrF,QAAQ,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7E,SAAS,CAAC,UAAU,OAAO,WAAW,OAAO,YAC5C,CAAC,QAAQ,IAAI,SAAS,MACrB,MAAM,IAAI,UAAU,KAAK,SAAS,SAAS,cAAc,KAAK,SAAS,SAAS,UAAU;AAAA,MAG5F,MAAM,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YAAa,CAAC,QAAQ,IAAI,MAAM,KAAK,QAAQ,UAAU,OAAO;AAAA,MACjH,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,SAAS,YAAa,CAAC,QAAQ,IAAI,OAAO,KAAK,QAAQ,UAAU,OAAO;AAAA,MACnH,OAAO,CAAC,UAAU,OAAO,WAAW,OAAO,YAAY,CAAC,QAAQ,IAAI,OAAO;AAAA,IAC5E;AAEA,SAAK,oBAAoB,KAAK,IAAI,MAAM,IAAI,EAC1C,OAAO,UAAQ,KAAK,aAAa,YAAY,KAAK,OAAO,aAAa,EACtE,IAAI,UAAQ,KAAK,EAAE;AAAA,EACtB;AAAA,EAEA,cACC,OACA,SACA,eACA,WACc;AAEd,UAAM,UAAU,IAAI,yBAAY;AAChC,UAAM,QAAQ,QAAQ;AACtB,QAAI,CAAC,OAAO,KAAM,QAAO;AAEzB,UAAM,aAAa,EAAE,UAAU,GAAG,SAAS,GAAG,QAAQ,EAAE;AAGxD,eAAW,UAAU,OAAO;AAC3B,UAAI,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AAEpC,UAAI,KAAK,QAAQ,KAAK,WAAW,cAAe,QAAO,KAAK,IAAI,MAAM,IAAI,YAAY;AACtF,UAAI,KAAK,MAAM,KAAK,WAAW,cAAe,QAAO,KAAK,IAAI,MAAM,IAAI,WAAW;AAEnF,YAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,aAAa;AACzE,UAAI,KAAK,UAAU,KAAK,gBAAgB;AAEvC,gBAAQ,IAAI,QAAQ;AACpB,gBAAQ,cAAc,IAAI,IAAI;AAAA,MAC/B,OAAO;AAEN,mBAAW,KAAK,QAAQ;AAAA,MACzB;AAEA,UAAI,WAAW,aAAc,KAAK,aAAa,KAAK,aAAa,MAAM,CAAC,CAAC,UAAU,WAAW,EAAE,SAAS,MAAM,GAAI;AAClH,gBAAQ,IAAI,YAAY;AAAA,MACzB;AAEA,UAAI,KAAK,YAAY,MAAM,QAAQ,KAAK,QAAQ,KAAK,KAAK,SAAS,CAAC,MAAM,EAAG,SAAQ,IAAI,WAAW;AACpG,UAAI,KAAK,UAAU,KAAK,eAAgB,SAAQ,IAAI,QAAQ;AAC5D,UAAI,KAAK,MAAO,SAAQ,IAAI,OAAO;AAEnC,UAAI,KAAK,aAAa,KAAK,mBAAmB;AAC7C,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,KAAK,KAAK,gBAAgB,SAAS,QAAQ,EAAE,KAAK,KAAK,WAAW,GAAG;AACpG,kBAAQ,IAAI,QAAQ;AACpB,cAAI,MAAM,SAAS,QAAQ,EAAG,SAAQ,IAAI,MAAM;AAChD,cAAI,kBAAkB,SAAU,SAAQ,IAAI,WAAW;AACvD,kBAAQ,cAAc,IAAI,IAAI;AAAA,QAC/B;AACA,YAAI,KAAK,MAAM,MAAM,EAAG,SAAQ,IAAI,WAAW;AAC/C,YAAI,KAAK,MAAM,OAAO,EAAG,SAAQ,IAAI,UAAU;AAC/C,YAAI,KAAK,MAAM,OAAO,EAAG,SAAQ,IAAI,OAAO;AAC5C,YAAI,KAAK,WAAW,EAAG,SAAQ,IAAI,UAAU;AAAA,MAC9C;AAEA,UAAI,KAAK,aAAa,KAAK,eAAe;AACzC,gBAAQ,IAAI,YAAY;AACxB,YAAI,oBAAoB,IAAI,GAAG;AAC9B,kBAAQ,IAAI,aAAa;AAAA,QAC1B;AAAA,MACD;AAEA,UAAI,KAAK,YAAY,KAAK,aAAa,QAAQ,KAAK,WAAW,GAAI,SAAQ,IAAI,YAAY;AAG3F,UAAI,eAAe,SAAS,MAAM,EAAG,SAAQ,IAAI,UAAU;AAC3D,UAAI,eAAe,SAAS,MAAM,EAAG,SAAQ,IAAI,UAAU;AAC3D,UAAI,eAAe,SAAS,MAAM,EAAG,SAAQ,IAAI,eAAe;AAChE,UAAI,cAAc,SAAS,MAAM,EAAG,SAAQ,IAAI,cAAc;AAC9D,UAAI,YAAY,SAAS,MAAM,EAAG,SAAQ,IAAI,YAAY;AAC1D,UAAI,YAAY,SAAS,MAAM,EAAG,SAAQ,IAAI,YAAY;AAC1D,UAAI,MAAM,SAAS,MAAM,EAAG,SAAQ,IAAI,OAAO;AAC/C,UAAI,QAAQ,SAAS,MAAM,EAAG,SAAQ,IAAI,SAAS;AAAA,IACpD;AAEA,YAAQ,IAAI,YAAY,KAAK,MAAM,WAAW,UAAU,CAAC,CAAC;AAC1D,YAAQ,IAAI,WAAW,KAAK,MAAM,WAAW,SAAS,CAAC,CAAC;AACxD,YAAQ,IAAI,UAAU,WAAW,QAAQ,CAAC;AAC1C,WAAO;AAAA,EACR;AAAA,EAEA,aACC,OACA,OACA,WACA,SACA,UACA,aACA,SACA,QACA,eACA,MACO;AAEP,QAAI,iBAAiB;AACrB,eAAW,QAAQ,OAAO;AACzB,UAAI,KAAK,WAAW,aAAa,EAAG,kBAAiB;AAAA,IACtD;AACA,QAAI,gBAAgB;AACnB,UAAI,yBAAyB;AAC7B,aAAO,wBAAwB;AAC9B,iCAAyB;AACzB,mBAAW,UAAU,UAAU;AAC9B,cAAI,OAAO,WAAW,aAAa,GAAG;AACrC,iBAAK,QAAQ,UAAU,SAAS,QAAQ,MAAM,CAAC;AAC/C,qCAAyB;AACzB;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAEvD,QAAI,MAAM,SAAS,KAAK,eAAe,GAAG;AACzC,YAAM,gBAAgB,CAAC,GAAG,QAAQ;AAClC,iBAAW,QAAQ,YAAY;AAC9B,YAAI,SAAS,SAAS,KAAK,CAAC,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AAC7D,eAAK,QAAQ,eAAe,cAAc,QAAQ,KAAK,CAAC,CAAC,CAAC;AAC1D,eAAK,QAAQ,eAAe,cAAc,QAAQ,KAAK,CAAC,CAAC,CAAC;AAAA,QAC3D;AAAA,MACD;AACA,UAAI,cAAc,WAAW,GAAG;AAC/B,aAAK,QAAQ,UAAU,SAAS,QAAQ,cAAc,CAAC,CAAC,CAAC;AAAA,MAC1D;AAAA,IACD;AAGA,QAAI,MAAM,SAAS,KAAK,eAAe,GAAG;AACzC,iBAAW,QAAQ,YAAY;AAC9B,YAAI,SAAS,SAAS,KAAK,CAAC,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AAC7D,eAAK,QAAQ,UAAU,SAAS,QAAQ,KAAK,CAAC,CAAC,CAAC;AAChD,eAAK,QAAQ,UAAU,SAAS,QAAQ,KAAK,CAAC,CAAC,CAAC;AAAA,QACjD;AAAA,MACD;AAAA,IACD;AAGA,QAAI,YAAY,WAAW,SAAS,UAAU,KAAK,eAAe,GAAG;AACpE,UAAI,SAAS,SAAS,SAAS,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,SAAS,CAAC;AACpF,UAAI,SAAS,SAAS,aAAa,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AACA,QAAI,YAAY,WAAW;AAC1B,UAAI,SAAS,SAAS,WAAW,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,WAAW,CAAC;AACxF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AACA,QAAI,YAAY,aAAa;AAC5B,UAAI,SAAS,SAAS,aAAa,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AACA,QAAI,YAAY,SAAS,YAAY,WAAW;AAC/C,UAAI,SAAS,SAAS,OAAO,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,OAAO,CAAC;AAChF,UAAI,SAAS,SAAS,WAAW,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,WAAW,CAAC;AACxF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AACA,QAAI,YAAY,aAAa;AAC5B,UAAI,SAAS,SAAS,aAAa,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AACA,QAAI,YAAY,UAAU,YAAY,UAAU,GAAG;AAClD,UAAI,SAAS,SAAS,QAAQ,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,QAAQ,CAAC;AAClF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AACA,QAAI,YAAY,YAAY;AAC3B,UAAI,SAAS,SAAS,cAAc,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,cAAc,CAAC;AAC9F,UAAI,SAAS,SAAS,UAAU,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,UAAU,CAAC;AACtF,UAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,IACxD;AAGA,UAAM,eAAe,CAAC,SAAS,cAAc,QAAQ,YAAY,UAAU,WAAW,aAAa,OAAO;AAC1G,UAAM,cAAc,KAAK;AAGzB,UAAM,oBAAoB;AAAA;AAAA,MAEzB,CAAC,aAAa,CAAC,eAAe,WAAW,cAAc,OAAO,CAAC;AAAA,MAC/D,CAAC,aAAa,WAAW;AAAA,MACzB,CAAC,OAAO,WAAW;AAAA,MACnB,CAAC,OAAO,OAAO;AAAA,MACf,CAAC,OAAO,YAAY;AAAA,MACpB,CAAC,gBAAgB,cAAc;AAAA,MAC/B,CAAC,aAAa,aAAa;AAAA,MAC3B,CAAC,SAAS,OAAO;AAAA,MACjB,CAAC,CAAC,WAAW,OAAO,GAAG,CAAC,cAAc,OAAO,CAAC;AAAA,MAC9C,CAAC,cAAc,WAAW;AAAA,MAC1B,CAAC,aAAa,YAAY;AAAA,MAC1B,CAAC,QAAQ,YAAY;AAAA,MACrB,CAAC,gBAAgB,aAAa;AAAA,MAC9B,CAAC,eAAe,UAAU;AAAA;AAAA,MAG1B,CAAC,WAAW,UAAU;AAAA,MACtB,CAAC,CAAC,SAAS,MAAM,GAAG,CAAC,aAAa,eAAe,YAAY,CAAC;AAAA,MAC9D,CAAC,UAAU,CAAC,YAAY,cAAc,UAAU,CAAC;AAAA,MACjD,CAAC,CAAC,cAAc,YAAY,WAAW,GAAG,CAAC,aAAa,YAAY,CAAC;AAAA,MACrE,CAAC,CAAC,gBAAgB,YAAY,GAAG,CAAC,aAAa,UAAU,CAAC;AAAA,MAC1D,CAAC,aAAa,YAAY;AAAA,MAC1B,CAAC,CAAC,aAAa,WAAW,GAAG,CAAC,cAAc,aAAa,cAAc,WAAW,CAAC;AAAA,MACnF,CAAC,cAAc,aAAa;AAAA,MAC5B,CAAC,YAAY,WAAW;AAAA,MACxB,CAAC,CAAC,cAAc,YAAY,GAAG,CAAC,eAAe,gBAAgB,YAAY,CAAC;AAAA,MAC5E,CAAC,eAAe,aAAa;AAAA,MAC7B,CAAC,cAAc,SAAS;AAAA,MACxB,CAAC,YAAY,CAAC,iBAAiB,aAAa,UAAU,CAAC;AAAA;AAAA,MAGvD,CAAC,SAAS,aAAa;AAAA,MACvB,CAAC,SAAS,SAAS;AAAA,MACnB,CAAC,SAAS,CAAC,aAAa,YAAY,CAAC;AAAA;AAAA;AAAA,MAIrC,CAAC,aAAa,YAAY;AAAA;AAAA,MAE1B,CAAC,UAAU,WAAW;AAAA;AAAA,MAEtB,CAAC,WAAW,OAAO;AAAA;AAAA,MAEnB,CAAC,cAAc,aAAa;AAAA;AAAA,MAE5B,CAAC,YAAY,aAAa;AAAA,IAC3B;AAEA,eAAW,QAAQ,kBAAmB,MAAK,kBAAkB,OAAO,UAAU,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAE9F,QAAI,CAAC,MAAM,SAAS,MAAM,KAAK,kBAAkB,QAAQ;AACxD,WAAK,kBAAkB,OAAO,UAAU,YAAY,CAAC,WAAW,aAAa,CAAC;AAAA,IAC/E;AAEA,UAAM,wBAAwB,CAAC,eAAe,SAAS,aAAa,MAAM;AAC1E,QAAI,CAAC,UAAU,SAAS,WAAW,KAAK,SAAS,WAAW;AAC3D,WAAK,kBAAkB,OAAO,UAAU,uBAAuB,qBAAqB;AAAA,IACrF;AAEA,QAAI,UAAU,SAAS,MAAM,EAAG,MAAK,kBAAkB,OAAO,UAAU,WAAW,aAAa;AAGhG,QAAI,QAAQ,OAAO,YAAY;AAC9B,WAAK,kBAAkB,OAAO,UAAU,cAAc,SAAS;AAAA,IAChE;AAGA,QAAI,CAAC,YAAY,aAAa;AAC7B,UAAI,QAAQ,OAAO,eAAe,SAAS,WAAW;AACrD,YAAI,SAAS,SAAS,aAAa,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,YAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,MACxD;AACA,UAAI,QAAQ,gBAAgB,cAAc,SAAS,WAAW;AAC7D,YAAI,SAAS,SAAS,aAAa,EAAG,MAAK,QAAQ,UAAU,SAAS,QAAQ,aAAa,CAAC;AAC5F,YAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,MACxD;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGA,kBACC,OACA,UACA,QACA,QACO;AACP,UAAM,aAAc,MAAM,QAAQ,MAAM,IAAK,SAAS,CAAC,MAAM;AAC7D,UAAM,aAAc,MAAM,QAAQ,MAAM,IAAK,SAAS,CAAC,MAAM;AAC7D,QAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AACvD,eAAW,WAAW,OAAO;AAC5B,UAAI,WAAW,SAAS,OAAO,GAAG;AACjC,mBAAW,WAAW,YAAY;AACjC,cAAI,YAAY,WAAW,SAAS,SAAS,OAAO,GAAG;AACtD,iBAAK,QAAQ,UAAU,SAAS,QAAQ,OAAO,CAAC;AAChD,gBAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AACA,UAAI,WAAW,SAAS,OAAO,GAAG;AACjC,mBAAW,WAAW,YAAY;AACjC,cAAI,YAAY,WAAW,SAAS,SAAS,OAAO,GAAG;AACtD,iBAAK,QAAQ,UAAU,SAAS,QAAQ,OAAO,CAAC;AAChD,gBAAI,MAAM,OAAO,SAAS,UAAU,KAAK,aAAc;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA;AAAA,EAGA,QACC,MACA,OACA,OACA,WACA,aACA,SACA,QACA,UACA,eACA,MACc;AACd,UAAM,IAAI,IAAI;AACd,SAAK,QAAQ,UAAU,SAAS,QAAQ,IAAI,CAAC;AAC7C,UAAM,UAAU,KAAK,cAAc,OAAO,SAAS,eAAe,SAAS;AAC3E,SAAK;AAAA,MAAa;AAAA,MAAO;AAAA,MAAO;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAa;AAAA,MAAS;AAAA,MACnF;AAAA,MAAe;AAAA,IAAI;AACpB,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,YAAY,MAAY,SAAkB,WAAqB,eAA+B;AAC7F,QAAI,CAAC,YAAY,eAAe,iBAAiB,EAAE,SAAS,KAAK,EAAE,EAAG,QAAO,QAAQ,MAAM,CAAC;AAC5F,QAAI,QAAQ,OAAO,mBAAmB,KAAK,OAAO,cAAe,QAAO;AAExE,UAAM,WAAW,KAAK;AACtB,QAAI,aAAa,UAAU;AAC1B,UAAI,UAAU,SAAS,UAAU,EAAG,QAAO;AAC3C,UAAI,UAAU,SAAS,WAAW,EAAG,QAAO;AAC5C,UAAI,UAAU,SAAS,UAAU,EAAG,QAAO;AAC3C,UAAI,UAAU,SAAS,aAAa,EAAG,QAAO;AAAA,IAC/C;AACA,WAAO;AAAA,EACR;AAAA;AAAA,EAGA,cACC,OACA,WACA,aACA,SACA,QACA,UACA,eACA,MACc;AACd,UAAM,QAAQ,oBAAI,IAAY;AAC9B,QAAI,UAAU,KAAK,cAAc,OAAO,SAAS,eAAe,SAAS;AACzE,SAAK;AAAA,MAAa;AAAA,MAAO;AAAA,MAAO;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAa;AAAA,MAAS;AAAA,MACnF;AAAA,MAAe;AAAA,IAAI;AAGpB,QAAI,SAAS,UAAU,KAAK,cAAc;AAEzC,aAAO,SAAS,QAAQ;AACvB,cAAM,SAAS,KAAK,OAAO,QAAQ;AACnC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AACA,aAAO;AAAA,IACR;AAEA,UAAM,wBAAwB,CAAC,gBAAwB;AACtD,UAAI,CAAC,KAAK,wBAAwB,WAAW,EAAG,QAAO;AACvD,aAAO,KAAK,wBAAwB,WAAW;AAAA,QAC9C;AAAA,QAAU;AAAA,QAAO;AAAA,QAAW,IAAI,IAAI,KAAK;AAAA,QAAG;AAAA,QAAS;AAAA,QAAS;AAAA,MAC/D;AAAA,IACD;AAGA,QAAI,QAAQ,cAAc;AACzB,YAAM,OAAO,KAAK,IAAI,MAAM,IAAI,QAAQ,YAAY,EAAE;AACtD,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAM;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAC3E;AAAA,QAAU;AAAA,QAAe;AAAA,MAAI;AAAA,IAC/B;AAKA,QAAI,SAAS,SAAS,QAAQ,KAAK,UAAU,SAAS,MAAM,GAAG;AAC9D,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAU;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAC/E;AAAA,QAAU;AAAA,QAAe;AAAA,MAAI;AAAA,IAC/B;AAGA,eAAW,UAAU,CAAC,cAAc,YAAY,eAAe,SAAS,WAAW,GAAG;AACrF,UAAI,SAAS,SAAS,MAAM,GAAG;AAC9B,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,SAAS,SAAS,aAAa,KAAK,UAAU,SAAS,WAAW,GAAG;AACxE,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAe;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QACpF;AAAA,QAAU;AAAA,QAAe;AAAA,MAAI;AAAA,IAC/B;AAGA,QAAI,SAAS,SAAS,aAAa,KAAK,QAAQ,OAAO,WAAW;AACjE,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAe;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QACpF;AAAA,QAAU;AAAA,QAAe;AAAA,MAAI;AAAA,IAC/B;AAGA,QAAI,SAAS,SAAS,aAAa,KAAK,QAAQ,OAAO,eAAe;AACrE,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAe;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QACpF;AAAA,QAAU;AAAA,QAAe;AAAA,MAAI;AAAA,IAC/B;AAGA,QAAI,SAAS,mBAAmB,CAAC,YAAY,SAAS,CAAC,YAAY,WAAW;AAC7E,UAAI,SAAS,SAAS,WAAW,GAAG;AACnC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAa;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAClF;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AACA,UAAI,SAAS,SAAS,OAAO,GAAG;AAC/B,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAS;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC9E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,CAAC,kBAAkB,eAAe,aAAa,EAAE,SAAS,IAAI,KAAK,KAAK,gBAAgB,SAAS,QAAQ,EAAE,GAAG;AACjH,YAAM,gBAAgB,CAAC;AACvB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,aAAa;AACzE,YAAI,MAAM,SAAS,QAAQ,KAAK,KAAK,WAAW,MAAM,KAAK,aAAa,KAAK,oBAAoB;AAChG,wBAAc,KAAK,MAAM;AAAA,QAC1B;AAAA,MACD;AACA,UAAI,cAAc,QAAQ;AACzB,cAAM,SAAS,KAAK,OAAO,aAAa;AACxC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,eAAW,QAAQ,OAAO;AAEzB,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,aAAa;AACzE,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,sBAAsB,SAAS,UAAU;AACrG,oBAAU,KAAK,MAAM;AAAA,QACtB;AAAA,MACD;AACA,aAAO,sBAAsB,IAAI,GAAG;AACnC,YAAI,CAAC,UAAU,OAAQ;AACvB,cAAM,SAAS,KAAK,gBAAgB,SAAS;AAC7C,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,CAAC,QAAQ,IAAI,WAAW,GAAG;AAC9B,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,aAAa;AACzE,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,sBAAsB,kBAAkB,UAAU;AAC9G,oBAAU,KAAK,MAAM;AAAA,QACtB;AAAA,MACD;AACA,UAAI,UAAU,QAAQ;AACrB,cAAM,SAAS,KAAK,OAAO,SAAS;AACpC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,CAAC,QAAQ,IAAI,MAAM,GAAG;AACzB,YAAM,YAAY,CAAC;AACnB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,cAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,aAAa;AACzE,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,sBAAsB,MAAM,SAAS,QAAQ,GAAG;AAC5G,oBAAU,KAAK,MAAM;AAAA,QACtB;AAAA,MACD;AACA,UAAI,UAAU,QAAQ;AACrB,cAAM,SAAS,KAAK,OAAO,SAAS;AACpC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B,OAAO;AAEN,YAAI,SAAS,SAAS,OAAO,KAAK,MAAM,SAAS,KAAK,GAAG;AACxD,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAS;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAC9E;AAAA,YAAU;AAAA,YAAe;AAAA,UAAI;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AAGA,QAAI,CAAC,iBAAiB,kBAAkB,eAAe,SAAS,EAAE,SAAS,IAAI,GAAG;AACjF,YAAM,gBAAgB,SAAS,OAAO,YAAU,eAAe,SAAS,MAAM,CAAC;AAC/E,UAAI,cAAc,QAAQ;AACzB,cAAM,SAAS,KAAK,OAAO,aAAa;AACxC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,SAAS,WAAW;AACvB,YAAM,gBAAgB,CAAC,GAAG,eAAe,OAAO;AAChD,iBAAW,QAAQ,eAAe;AACjC,YAAI,SAAS,SAAS,IAAI,GAAG;AAC5B,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAM;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAC3E;AAAA,YAAU;AAAA,YAAe;AAAA,UAAI;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AAGA,QAAI,KAAK,SAAS,OAAO,KAAK,SAAS,eAAe;AAErD,YAAM,aAAa,SAAS,OAAO,YAAU,MAAM,SAAS,MAAM,KAAK,WAAW,aAAa;AAC/F,UAAI,WAAW,QAAQ;AACtB,cAAM,SAAS,KAAK,OAAO,UAAU;AACrC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B,OAAO;AACN,YAAI,SAAS,SAAS,aAAa,GAAG;AACrC,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAe;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YACpF;AAAA,YAAU;AAAA,YAAe;AAAA,UAAI;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AAGA,QAAI,CAAC,QAAQ,cAAc,QAAQ,EAAE,MAAM,IAAI,OAAO,KAAK,MAAM,SAAS,KAAK,IAAI;AAElF,YAAM,iBAAiB,CAAC;AACxB,iBAAW,UAAU,UAAU;AAC9B,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,YAAI,CAAC,KAAK,OAAO,SAAS,MAAM,KAAM,KAAK,aAAa,SAAW,gBAAe,KAAK,MAAM;AAAA,MAC9F;AACA,UAAI,eAAe,QAAQ;AAC1B,cAAM,SAAS,KAAK,OAAO,cAAc;AACzC,kBAAU,KAAK;AAAA,UAAQ;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAO;AAAA,UAAW;AAAA,UAAa;AAAA,UAAS;AAAA,UAC7E;AAAA,UAAU;AAAA,UAAe;AAAA,QAAI;AAAA,MAC/B;AAAA,IACD;AAGA,QAAI,CAAC,iBAAiB,iBAAiB,kBAAkB,eAAe,aAAa,EAAE,SAAS,IAAI,GAAG;AACtG,UAAI,QAAQ,cAAc,SAAS,GAAG;AAErC,cAAM,oBAAoB,QAAQ,cAAc,OAAO,EAAE,KAAK,EAAE,MAAO;AAEvE,cAAM,gBAAgB,CAAC;AACvB,mBAAW,UAAU,UAAU;AAC9B,gBAAM,OAAO,KAAK,IAAI,MAAM,IAAI,MAAM;AACtC,gBAAM,WAAW,KAAK,YAAY,MAAM,SAAS,WAAW,aAAa;AACzE,cAAI,CAAC,KAAK,OAAO,SAAS,MAAM,MAAM,KAAK,aAAa,KAAK,oBAAoB;AAChF,gBAAI,sBAAsB,SAAU,eAAc,KAAK,MAAM;AAAA,UAC9D;AAAA,QACD;AACA,YAAI,cAAc,QAAQ;AACzB,gBAAM,SAAS,KAAK,OAAO,aAAa;AACxC,oBAAU,KAAK;AAAA,YAAQ;AAAA,YAAQ;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAC7E;AAAA,YAAU;AAAA,YAAe;AAAA,UAAI;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AAGA,WAAO,MAAM,OAAO,KAAK,gBAAgB,SAAS,QAAQ;AACzD,YAAM,SAAS,KAAK,OAAO,QAAQ;AACnC,gBAAU,KAAK;AAAA,QAAQ;AAAA,QAAQ;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAC7E;AAAA,QAAU;AAAA,QAAe;AAAA,MAAI;AAC9B,iBAAW,QAAQ,YAAY;AAC9B,YAAI,WAAW,KAAK,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AACrD,oBAAU,KAAK;AAAA,YAAQ,KAAK,CAAC;AAAA,YAAG;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAC9E;AAAA,YAAU;AAAA,YAAe;AAAA,UAAI;AAAA,QAC/B;AACA,YAAI,WAAW,KAAK,CAAC,KAAK,SAAS,SAAS,KAAK,CAAC,CAAC,GAAG;AACrD,oBAAU,KAAK;AAAA,YAAQ,KAAK,CAAC;AAAA,YAAG;AAAA,YAAO;AAAA,YAAO;AAAA,YAAW;AAAA,YAAa;AAAA,YAAS;AAAA,YAC9E;AAAA,YAAU;AAAA,YAAe;AAAA,UAAI;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAES,kBACR,SACA,OACA,OACA,WACA,SACA,UACA,aACA,SACA,eACA,MACU;AACV,YAAQ,SAAS;AAAA,MACjB,KAAK;AAAA,MAAe,KAAK;AACxB,eAAO,CAAC,YAAY;AAAA,MACrB,KAAK;AAAA,MAAa,KAAK;AACtB,eAAO,CAAC,YAAY;AAAA,MACrB,KAAK;AAAA,MAAa,KAAK;AAAA,MAAc,KAAK;AACzC,eAAO,CAAC,QAAQ,QAAI,iBAAK,OAAO,CAAC;AAAA,MAClC,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,OAAO;AAAA,MAC5B,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7B,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,QAAQ;AAAA,MAC7B,KAAK;AAAA,MAAc,KAAK;AACvB,eAAO,CAAC,YAAY;AAAA,MACrB,KAAK;AACJ,eAAO,CAAC,YAAY;AAAA,MACrB,KAAK;AACJ,eAAO,CAAC,QAAQ,IAAI,KAAK;AAAA,IAC1B;AAEA,WAAO;AAAA,EACR;AAAA,EAES,WACR,OACA,OACA,WACA,SACA,UACA,aACA,SACA,eACA,MACS;AACT,QAAI,UAAU,UAAU,EAAG,QAAO,UAAU,CAAC;AAG7C,QAAI,QAAQ,OAAO,aAAa,QAAQ,IAAI,UAAU,EAAG,QAAO;AAChE,QAAI,QAAQ,OAAO,cAAc,QAAQ,IAAI,QAAQ,EAAG,QAAO;AAC/D,QAAI,QAAQ,OAAO,aAAa,QAAQ,IAAI,QAAQ,EAAG,QAAO;AAC9D,QAAI,QAAQ,OAAO,WAAY,QAAO,MAAM,IAAI,UAAU,IAAI,iBAAiB;AAC/E,QAAI,QAAQ,OAAO,eAAe,QAAQ,IAAI,WAAW,EAAG,QAAO;AACnE,QAAI,QAAQ,OAAO,aAAa,YAAY,KAAM,QAAO;AACzD,QAAI,QAAQ,OAAO,cAAc,QAAQ,IAAI,YAAY,EAAG,QAAO;AAEnE,UAAM,iBAA2B,CAAC;AAElC,eAAW,WAAW,WAAW;AAChC,UAAI,CAAC,KAAK;AAAA,QACT;AAAA,QAAS;AAAA,QAAO;AAAA,QAAO;AAAA,QAAW;AAAA,QAAS;AAAA,QAAU;AAAA,QAAa;AAAA,QAAS;AAAA,QAAe;AAAA,MAC3F,GAAG;AACF,uBAAe,KAAK,OAAO;AAAA,MAC5B;AAAA,IACD;AAGA,QAAI,eAAe,UAAU,EAAG,QAAO,KAAK,OAAO,cAAc;AAGjE,QAAI,CAAC,eAAe,QAAQ;AAC3B,YAAM,mBAAmB,UAAU;AAAA,QAClC,OAAK,CAAC,eAAe,aAAa,cAAc,aAAa,cAAc,eAAe,YAAY,EAAE,SAAS,CAAC;AAAA,MACnH;AACA,UAAI,iBAAiB,OAAQ,QAAO,KAAK,OAAO,gBAAgB;AAAA,IACjE;AAGA,WAAO,KAAK,OAAO,SAAS;AAAA,EAC7B;AAAA,EAEA,gBACC,SACA,OACA,OACA,SACA,aACA,SACA,QACA,eACA,MACqB;AAErB,QAAI,SAAS,eAAe;AAE3B,UAAI,QAAQ,gBAAgB,YAAY,QAAQ,cAAe,QAAO,QAAQ,cAAc,CAAC;AAC7F,UAAI,QAAQ,SAAS,eAAgB,QAAO;AAC5C,UAAI,QAAQ,SAAS,YAAa,QAAO;AACzC,UAAI,QAAQ,SAAS,aAAc,QAAO;AAC1C,UAAI,QAAQ,SAAS,UAAW,QAAO;AACvC,UAAI,QAAQ,SAAS,SAAU,QAAO;AACtC,UAAI,QAAQ,gBAAgB,WAAY,QAAO;AAC/C,UAAI,QAAQ,SAAS,YAAa,QAAO;AACzC,UAAI,QAAQ,SAAS,MAAO,QAAO;AACnC,UAAI,QAAQ,SAAS,UAAW,QAAO;AACvC,UAAI,QAAQ,SAAS,wBAAwB,QAAQ,SAAS,uBAAuB;AACpF,YAAI,MAAM,IAAI,YAAY,KAAK,MAAM,IAAI,gBAAgB,EAAG,QAAO;AACnE,YAAI,MAAM,IAAI,YAAY,KAAK,MAAM,IAAI,eAAe,EAAG,QAAO;AAClE,eAAO;AAAA,MACR;AAEA,UAAI,kBAAkB,SAAU,QAAO;AACvC,UAAI,cAAe,QAAO,KAAK,IAAI,QAAQ,IAAI,UAAU,aAAa,EAAE,EAAE,cAAe,CAAC;AAAA,IAC3F;AACA,QAAI,QAAQ,eAAe;AAC1B,UAAI,QAAQ,gBAAgB,SAAU,QAAO,QAAQ,cAAc,CAAC;AACpE,aAAO,KAAK,OAAO,QAAQ,aAAa;AAAA,IACzC;AACA,QAAI,SAAS,WAAY,QAAO;AAChC,QAAI,QAAQ,SAAS,kBAAmB,QAAO;AAC/C,QAAI,QAAQ,gBAAgB,UAAW,QAAO;AAC9C,QAAI,QAAQ,SAAS,UAAW,QAAO;AACvC,QAAI,QAAQ,SAAS,cAAc,QAAQ,SAAS,WAAY,QAAO;AACvE,QAAI,QAAQ,SAAS,cAAc,MAAM,IAAI,aAAa,EAAG,QAAO;AACpE,QAAI,QAAQ,SAAS,QAAS,QAAO;AACrC,QAAI,QAAQ,SAAS,YAAa,QAAO;AACzC,QAAI,QAAQ,SAAS,UAAW,QAAO;AACvC,QAAI,QAAQ,SAAS,YAAa,QAAO;AACzC,QACC,YAAY,aAAa,YAAY,iBAAkB,YAAY,oBAAoB,CAAC,CAAC,QAAQ,IAAI,QAAQ,EAC5G,QAAO;AACT,QAAI,QAAQ,SAAS,QAAS,QAAO;AACrC,QAAI,YAAY,cAAe,QAAO;AACtC,QAAI,YAAY,cAAe,QAAO;AACtC,QAAI,QAAQ,IAAK,QAAQ,QAAQ,SAAS,aAAa,SAAS,kBAAmB,gBAAgB;AACnG,QAAI,CAAC,eAAe,WAAW,cAAc,OAAO,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,GAAG;AAC9E,UAAI,QAAQ,UAAU,OAAO,MAAM,QAAQ,UAAU,OAAO,OAAO,SAAS,eAAe;AAC1F,eAAO;AAAA,MACR,OAAO;AACN,eAAQ,QAAQ,IAAI,UAAU,IAAI,QAAQ,IAAI,SAAS,IAAK,gBAAgB;AAAA,MAC7E;AAAA,IACD;AACA,QAAI,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,SAAS,GAAG;AACnD,UAAI,YAAY,YAAY;AAC3B,eAAO,GAAG,KAAK,OAAO,CAAC,SAAS,QAAQ,UAAU,QAAQ,MAAM,CAAC,CAAC;AAAA,MACnE,OAAO;AACN,eAAO;AAAA,MACR;AAAA,IACD;AACA,QAAI,MAAM,IAAI,YAAY,EAAG,QAAO;AACpC,QAAI,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,WAAW,EAAG,QAAO;AAC5D,QAAI,MAAM,IAAI,YAAY,GAAG;AAC5B,aAAQ,YAAY,gBAAgB,CAAC,CAAC,QAAQ,IAAI,UAAU,IAAK,oBAAoB;AAAA,IACtF;AACA,SAAK,YAAY,UAAU,MAAM,IAAI,QAAQ,MAAM,CAAC,MAAM,IAAI,WAAW,KAAK,QAAQ,OAAO,aAAa;AACzG,aAAQ,MAAM,SAAS,MAAM,KAAK,YAAY,gBAAgB,YAAY,gBAAiB,cAAc;AAAA,IAC1G;AACA,QAAI,YAAY,cAAe,QAAO,MAAM,IAAI,SAAS,IAAI,eAAe;AAC5E,QAAI,QAAQ,OAAO,eAAe,SAAS,gBAAiB,QAAO;AACnE,QAAI,YAAY,iBAAiB,QAAQ,IAAI,YAAY,EAAG,QAAO;AACnE,QAAI,YAAY,WAAY,QAAO,MAAM,IAAI,aAAa,IAAI,eAAe;AAC7E,QAAI,MAAM,IAAI,YAAY,EAAG,QAAO;AACpC,QAAI,MAAM,IAAI,YAAY,KAAK,MAAM,IAAI,aAAa,KAAK,MAAM,IAAI,SAAS,EAAG,QAAO;AACxF,QAAI,MAAM,IAAI,MAAM,KAAK,CAAC,MAAM,IAAI,WAAW,KAAK,CAAC,CAAC,aAAa,gBAAgB,WAAW,EAAE,SAAS,OAAO,GAAG;AAClH,aAAO;AAAA,IACR;AACA,QAAI,SAAS,UAAW,QAAO;AAAA,EAChC;AAAA,EAEA,QACC,SACA,OACA,OACA,SACA,aACA,SACA,QACA,eACA,MACS;AACT,UAAM,qBAAqB,QAAQ,UAAU,KAAK,QAAQ,UAAU,MAAM,QAAQ,UAAU;AAE5F,UAAM,YACL,SAAS,iBACT,QAAQ,UAAU,OAAO,MAAM,QAAQ,UAAU,OAAO,OACxD,CAAC,QAAQ,IAAI,UAAU,KAAK,CAAC,MAAM,IAAI,SAAS;AAGjD,QACC,MAAM,IAAI,SAAS,KAAK,MAAM,IAAI,aAAa,KAAK,QAAQ,IAAI,MAAM,KAAK,CAAC,KAAK,gBAAgB,SAAS,QAAQ,EAAE,EACnH,QAAO;AACT,QAAI,QAAQ,IAAI,SAAS,MAAM,GAAG;AACjC,aACC,aAAa,QAAQ,UAAU,OAAO,MAAM,KAAK,aAAa,GAAG,CAAC,IAC/D,iBAAiB;AAAA,IACtB;AACA,QAAI,QAAQ,IAAI,SAAS,MAAM,KAAK,MAAM,IAAI,OAAO,EAAG,QAAO;AAC/D,QAAI,QAAQ,IAAI,UAAU,MAAM,KAAK,QAAQ,OAAO,aACnD,CAAC,cAAc,WAAW,eAAe,UAAU,WAAW,EAAE,MAAM,OAAK,CAAC,MAAM,IAAI,CAAC,CAAC,GACvF;AACD,aACC,cAAc,QAAQ,UAAU,OAAO,OAAO,YAAY,gBAAgB,YAAY,iBACtF,KAAK,aAAa,GAAG,CAAC,IACnB,iBAAiB;AAAA,IACtB;AAEA,QAAI,YAAY,YAAY,MAAM,IAAI,WAAW,KAAK,CAAC,QAAQ,IAAI,YAAY,EAAG,QAAO;AACzF,QAAI,MAAM,SAAS,QAAQ,KAAK,MAAM,IAAI,SAAS,KAAK,CAAC,CAAC,QAAQ,IAAI,QAAQ,EAAG,QAAO;AACxF,QAAI,QAAQ,OAAO,YAAY,QAAQ,OAAO,SAAU,QAAO;AAC/D,QAAI,SAAS,iBAAiB,CAAC,CAAC,QAAQ,IAAI,YAAY,KAAK,CAAC,MAAM,IAAI,aAAa,GAAG;AACvF,aAAO;AAAA,IACR;AACA,QAAI,QAAQ,OAAO,SAAU,QAAO;AACpC,QAAI,QAAQ,OAAO,WAAY,QAAO;AACtC,QAAI,CAAC,QAAQ,IAAI,QAAQ,MACxB,CAAC,gBAAgB,iBAAiB,gBAAgB,EAAE,KAAK,OAAK,SAAS,CAAC,KAAK,MAAM,IAAI,WAAW,IAChG;AACF,aAAO;AAAA,IACR;AACA,QAAI,MAAM,IAAI,SAAS,KAAK,QAAQ,IAAI,OAAO,EAAG,QAAO;AACzD,QACE,YAAY,gBACZ,QAAQ,OAAO,UACf,YAAY,iBAAiB,QAAQ,UAAU,KAAK,QAAQ,UAAU,OAAO,OAAO,KAAK,aAAa,GAAG,CAAC,KAE1G,YAAY,iBAAiB,CAAC,QAAQ,IAAI,OAAO,KAAK,QAAQ,IAAI,UAAU,KAC5E,KAAK,IAAI,iBAAiB,YAAY,OAAO,IAAI,KAChD,QAAQ,UAAU,KAAK,QAAQ,UAAU,MAAO,OAAO,KAAK,aAAa,GAAG,CAAC,EAE9E,QAAO;AACT,QAAI,CAAC,eAAe,WAAW,eAAe,YAAY,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,EAAG,QAAO;AAC5F,QACC,KAAK,IAAI,iBAAiB,UAAU,OAAO,KAAK,KAChD,YAAY,cAAc,QAAQ,OAAO,cACxC;AACD,aAAO;AAAA,IACR;AACA,SACE,SAAS,kBAAkB,MAAM,IAAI,WAAW,MAAM,UAAU,qBAAqB,OACtF,CAAC,QAAQ,IAAI,UAAU,MAAM,QAAQ,IAAI,SAAS,KAAK,QAAQ,IAAI,OAAO,OACzE,CAAC,QAAQ,IAAI,QAAQ,KAAK,YAAY,aACtC,QAAO;AAGT,QAAI,SAAS,gBAAgB;AAC5B,aACC,QAAQ,IAAI,UAAU,IAAI,QAAQ,IAAI,SAAS,KAAK,KACpD,CAAC,UAAU,aAAa,SAAS,YAAY,EAAE,MAAM,OAAK,CAAC,MAAM,IAAI,CAAC,CAAC,KACvE,KAAK,IAAI,iBAAiB,QAAQ,OAAO,IAAI,IAC1C,aAAa;AAAA,IAClB;AACA,QAAI,CAAC,QAAQ,IAAI,QAAQ,GAAG;AAC3B,cACE,MAAM,IAAI,OAAO,KAAK,MAAM,IAAI,YAAY,MAAM,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,QAAQ,IAAI,QAAQ,IAC/F,gBAAgB;AAAA,IACrB;AACA,QACC,CAAC,iBAAiB,iBAAiB,aAAa,EAAE,KAAK,OAAK,SAAS,CAAC,MACrE,KAAK,IAAI,iBAAiB,QAAQ,OAAO,IAAI,KAAK,QAAQ,OAAO,cAClE,YAAY,SACX,QAAO;AACT,WAAO;AAAA,EACR;AAAA,EAES,SAAS,SAA0B;AAE3C,QAAI,KAAK,YAAa,QAAO,KAAK;AAClC,QAAI,KAAK,OAAO,GAAG;AAElB,YAAM,OAAO,KAAK,WAAW,QAAQ,EAAE;AACvC,UAAI,KAAK,MAAO,QAAO,KAAK;AAAA,IAC7B,OAAO;AAEN,YAAM,OAAO,KAAK,WAAW,QAAQ,EAAE;AACvC,UAAI,KAAK,MAAO,QAAO,KAAK;AAAA,IAC7B;AAEA,QAAI,KAAK,QAAQ,GAAG;AACnB,YAAM,aAAsC;AAAA,QAC3C,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,IAAI;AAAA,QACJ,MAAM;AAAA,MACP;AACA,UAAI,WAAW,QAAQ,IAAI,EAAG,QAAO,WAAW,QAAQ,IAAI;AAAA,IAC7D;AAEA,WAAO;AAAA,EACR;AAAA,EAES,UACR,SACA,cAA4C,CAAC,GAC7C,SAAS,OACoB;AAC7B,cAAU,KAAK,IAAI,QAAQ,IAAI,OAAO;AACtC,UAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,UAAM,OAAO,KAAK,WAAW,QAAQ,EAAE,EAAE,MAAM;AAC/C,UAAM,eAAe,CAAC;AAEtB,QAAI,WAAW;AACf,eAAWA,QAAO,MAAM;AACvB,UAAI,CAAC,YAAY,SAASA,KAAI,SAAS,cAAe,YAAW;AAAA,IAClE;AACA,eAAWA,QAAO,MAAM;AAEvB,UAAI,YAAY,SAASA,KAAI,SAAS,cAAe;AAErD,UAAI,YAAY,CAAC,iBAAiB,aAAa,EAAE,SAASA,KAAI,IAAI,EAAG;AACrE,mBAAa,KAAKA,IAAG;AAAA,IACtB;AACA,UAAM,MAAM,KAAK,cAAc,YAAY;AAC3C,UAAM,OAAO,IAAI;AACjB,UAAM,WAAqB,MAAM,KAAK,IAAI,QAAQ;AAClD,UAAM,iBAAiB,IAAI;AAC3B,UAAM,gBAAgB,KAAK,cAAc,cAAc,KAAK;AAE5D,QAAI,UAAU;AACd,QAAI,OAAO;AAEX,UAAM,MAAM,EAAE,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AAClE,UAAM,MAAM,EAAE,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AAElE,UAAM,QAAQ,QAAQ;AACtB,UAAM,gBAAgB,IAAI;AAE1B,UAAM,YAAa,QAAQ,cAAc,CAAC,QAAQ,kBAAmB,OAAO,OAAO,QAAQ,SAAS,IAAI;AAGxG,UAAM,QAAQ,KAAK;AAAA,MAAc;AAAA,MAAO;AAAA,MAAW;AAAA,MAAa;AAAA,MAAS;AAAA,MAAQ;AAAA,MAChF;AAAA,MAAe;AAAA,IAAI;AACpB,UAAM,UAAU,KAAK,cAAc,OAAO,SAAS,eAAe,SAAS;AAG3E,cAAU,KAAK;AAAA,MAAW,IAAI,IAAI,KAAK;AAAA,MAAG;AAAA,MAAO;AAAA,MAAe;AAAA,MAAS;AAAA,MAAU;AAAA,MAAa;AAAA,MAC/F;AAAA,MAAe;AAAA,IAAI;AAGpB,WAAO,KAAK,gBAAgB,SAAS,OAAO,OAAO,SAAS,aAAa,SAAS,QAAQ,eAAe,IAAI;AAC7G,QAAI,SAAS,QAAW;AACvB,aAAO,KAAK,QAAQ,SAAS,OAAO,OAAO,SAAS,aAAa,SAAS,QAAQ,eAAe,IAAI;AAAA,IACtG;AAGA,QAAI,SAAS,eAAe,MAAM,SAAS,QAAQ,GAAG;AACrD,aAAO;AAAA,IACR;AAEA,UAAM,QAAQ,KAAK,SAAS,OAAO;AAGnC,SACE,CAAC,QAAQ,IAAI,UAAU,KAAM,QAAQ,IAAI,UAAU,KAAK,MAAM,MAAM,IAAI,UAAU,KAAK,MAAM,IAAI,WAAW,OAC7G,CAAC,MAAM,IAAI,SAAS,KAAK,CAAC,MAAM,IAAI,WAAW,GAC9C;AACD,UAAI,MAAM;AACV,UAAI,MAAM;AAAA,IACX;AAEA,QAAI,YAAY,iBAAiB,CAAC,QAAQ,IAAI,SAAS,GAAG;AACzD,UAAI,MAAM;AACV,UAAI,MAAM;AAAA,IACX;AAIA,QAAI,iBAAiB;AACrB,eAAW,QAAQ,OAAO;AACzB,UAAI,KAAK,WAAW,aAAa,EAAG,kBAAiB;AAAA,IACtD;AAGA,QAAI,kBAAkB,QAAQ,KAAK;AAClC,UAAI;AACJ,iBAAW,QAAQ,OAAO;AACzB,YAAI,KAAK,WAAW,aAAa,EAAG,UAAS,KAAK,OAAO,EAAE;AAAA,MAC5D;AACA,UAAI,CAAC,OAAQ,OAAM,IAAI,MAAM,6DAA6D;AAC1F,YAAM,QAAQ,IAAI,QAAQ,IAAI,gBAAgB,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,MAAM,EAAE;AACnF,UAAI;AACJ,WAAK,MAAM,OAAO;AACjB,YAAI,EAAE,IAAI,MAAM,EAAE;AAAA,MACnB;AAAA,IACD;AAGA,UAAM,aAAa,YAAY;AAC/B,UAAM,aAAa,aAAa,IAAI,KAAK,IAAI,iBAAiB,QAAQ,OAAO;AAC7E,WAAO,IAAI,KAAK,GAAG;AAClB,YAAM,KAAK,KAAK,MAAM,KAAK,MAAM,IAAI,QAAQ,UAAU,KAAK,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,QAAQ,MAAM,EAAE;AACrH,UAAI,MAAM,IAAI,YAAY,KAAK,CAAC,CAAC,gBAAgB,WAAW,EAAE,SAAS,IAAI,GAAG;AAC7E,YAAI,SAAS,kBAAkB,YAAY,mBAAmB;AAE7D,cAAI,KAAK,MAAM,EAAG;AAAA,QACnB,OAAO;AAEN,cAAI,KAAK,IAAI,EAAG;AAAA,QACjB;AAAA,MACD,WAAW,MAAM,IAAI,WAAW,MAAM,SAAS,kBAAkB,YAAY,aAAa;AAEzF,YAAI,KAAK,MAAM,EAAG;AAAA,MACnB,WAAW,CAAC,gBAAgB,UAAU,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,GAAG;AAEhE,YAAI,KAAK,IAAI,EAAG;AAAA,MACjB,OAAO;AAEN,YAAI,cAAc,KAAK,YAAY,cAAe;AAClD,YAAI,eAAe,KAAK,CAAC,gBAAgB,aAAa,UAAU,EAAE,SAAS,IAAI,EAAG;AAClF,YAAI,SAAS,kBAAkB,MAAM,IAAI,cAAc,EAAG;AAE1D,YAAI,SAAS,kBAAkB,MAAM,IAAI,gBAAgB,EAAG;AAAA,MAC7D;AACA,UAAI,MAAM;AAAA,IACX;AAGA,QAAI,UAAU,YAAY;AACzB,aAAO,IAAI,MAAM,GAAG;AACnB,cAAM,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI,QAAQ,UAAU,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC,IAAI,QAAQ,MAAM,CAAC;AAClH,cAAM,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI,QAAQ,UAAU,MAAM,IAAI,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,CAAC,IAAI,QAAQ,MAAM,CAAC;AAClH,YAAI,OAAO,IAAK;AAChB,YAAI,OAAO;AAAA,MACZ;AAAA,IACD;AAEA,QAAI,CAAC,YAAY,cAAc,WAAW,EAAE,KAAK,OAAK,MAAM,IAAI,CAAC,CAAC,GAAG;AACpE,UAAI,MAAM;AACV,UAAI,MAAO,kBAAkB,QAAQ,MAAO,IAAI,MAAM,KAAK;AAAA,IAC5D;AAGA,UAAM,gBAAgB,MAAM,KAAK,KAAK;AACtC,SAAK,KAAK,QAAQ,aAAa;AAG/B,QAAI,QAAQ,OAAO,cAAc,SAAS,eAAe;AACxD,YAAM,YAAa,MAAM,IAAI,YAAY,IAAI,eAAe;AAC5D,WAAK,QAAQ,eAAe,cAAc,QAAQ,SAAS,CAAC;AAC5D,oBAAc,QAAQ,SAAS;AAAA,IAChC;AACA,WAAO;AAAA,MACN,MAAM,QAAQ;AAAA,MACd,SAAS;AAAA,MACT,QAAQ,QAAQ,gBAAgB,aAAa,MAAM,QAAQ;AAAA,MAC3D,OAAO,KAAK,aAAa,GAAG,IAAI;AAAA,MAChC;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAES,aAAa;AACrB,SAAK,oCAAoC;AAEzC,UAAM,OAAO,KAAK,KAAK,QAAQ;AAC/B,UAAM,YAAY,KAAK,IAAI,QAAQ,aAAa,KAAK,MAAM;AAC3D,UAAM,UAAwC,CAAC;AAG/C,UAAM,aAAa,CAAC,CAAC,KAAK,iBAAiB,UAAU,IAAI,gBAAgB;AACzE,UAAM,WAAW,KAAK,IAAI,MAAM,MAAM;AACtC,UAAM,OAAO,KAAK,iBAAiB,KAAK,OAAO,QAAQ;AAEvD,UAAM,aAAsC,CAAC;AAC7C,QAAI,UAAU;AAEd,UAAM,YAAqC,CAAC;AAC5C,UAAM,iBAA0C,CAAC;AACjD,UAAM,iBAA0C,CAAC;AACjD,UAAM,uBAAgD,CAAC;AACvD,UAAM,cAA4C,CAAC;AACnD,QAAI,qBAAqB;AAIzB,eAAW,YAAY,CAAC,MAAM,KAAK,GAAG;AACrC,UAAI,QAAQ,UAAU,KAAK,YAAa;AAExC,YAAM,cAAc,OAAO,KAAK,KAAK,UAAU;AAC/C,YAAM,CAAC,aAAa,eAAe,IAAI,KAAK,eAAe,MAAM,SAAS,YAAY,WAAW;AACjG,aAAO,gBAAgB,UAAU,QAAQ,SAAS,KAAK,aAAa;AACnE,cAAM,cAAc,KAAK,gBAAgB,eAAe;AACxD,cAAM,qBAAgC,CAAC;AAEvC,YAAI,UAAU;AACd,mBAAW,QAAQ,YAAY,WAAW,GAAG;AAC5C,gBAAMC,WAAU,KAAK,IAAI,QAAQ,IAAI,IAAI;AACzC,cAAI,CAAC,WAAWA,SAAQ,OAAQ,WAAU;AAAA,QAC3C;AACA,mBAAW,QAAQ,YAAY,WAAW,GAAG;AAC5C,gBAAMA,WAAU,KAAK,IAAI,QAAQ,IAAI,IAAI;AAEzC,cAAI,WAAWA,SAAQ,OAAQ;AAE/B,cAAI,WAAW,CAACA,SAAQ,OAAQ;AAChC,6BAAmB,KAAKA,QAAO;AAAA,QAChC;AACA,cAAM,UAAU,KAAK,OAAO,kBAAkB;AAE9C,YAAI,CAAC,QAAQ,OAAQ;AAGrB,YAAI,WAAW,QAAQ,WAAW,EAAG;AAGrC,YAAI,WAAW,QAAQ,OAAQ;AAE/B,cAAM,QAAQ,QAAQ;AACtB,cAAM,YAAY,MAAM,MAAM,EAAE,KAAK,EAAE,KAAK;AAC5C,cAAM,kBACL,KAAK,IAAI,iBAAiB,OAAO,OAAO,IAAI,KAC3C,KAAK,IAAI,iBAAiB,OAAO,OAAO,IAAI,MAAM,MAAM,SAAS,OAAO;AAG1E,cAAM,cAAc,KAAK,MAAM,KAAK,cAAc,CAAC,KAAK;AAExD,YAAI,UAAU;AACb,cAAI,CAAC,cAAc,CAAC,KAAK,eAAe;AAEvC,gBAAI,OAAO;AACX,uBAAW,YAAY,OAAO;AAC7B,kBAAI,UAAU,QAAQ,KAAK,IAAI,aAAa;AAC3C,uBAAO;AACP;AAAA,cACD;AAAA,YACD;AACA,gBAAI,KAAM;AAGV,uBAAW,YAAY,KAAK,IAAI,MAAM,MAAM,GAAG;AAE9C,kBAAI,KAAK,IAAI,iBAAiB,UAAU,OAAO,IAAI,GAAG;AACrD,oBAAI,CAAC,eAAe,QAAQ,EAAG,gBAAe,QAAQ,IAAI;AAC1D,oBAAI,eAAe,QAAQ,KAAK,IAAI,aAAa;AAChD,yBAAO;AACP;AAAA,gBACD;AAAA,cACD;AACA,kBAAI,KAAK,IAAI,iBAAiB,UAAU,OAAO,IAAI,GAAG;AACrD,oBAAI,CAAC,qBAAqB,QAAQ,EAAG,sBAAqB,QAAQ,IAAI;AACtE,oBAAI,qBAAqB,QAAQ,KAAK,aAAa;AAClD,yBAAO;AACP;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AACA,gBAAI,KAAM;AAGV,gBACC,KAAK,IAAI,iBAAiB,QAAQ,OAAO,MAAM,KAC/C,OAAO,OAAO,QAAQ,SAAS,EAAE,OAAO,OAAK,CAAC,YAAY,QAAQ,EAAE,SAAS,CAAC,CAAC,EAAE,QAChF;AACD,kBAAI,CAAC,eAAe,MAAM,EAAG,gBAAe,MAAM,IAAI;AACtD,kBAAI,eAAe,MAAM,KAAK,IAAI,YAAa;AAAA,YAChD;AAGA,gBAAI,iBAAiB;AACpB,kBAAI,CAAC,eAAe,YAAY,EAAG,gBAAe,YAAY,IAAI;AAClE,kBAAI,eAAe,YAAY,KAAK,IAAI,YAAa;AAAA,YACtD;AAGA,gBAAI,CAAC,KAAK,eAAgB,KAAK,SAAS,OAAO,MAAM,OAAQ,sBAAsB,aAAa;AAC/F;AAAA,YACD;AAAA,UACD;AAGA,cAAI,CAAC,KAAK,iBAAiB,cAAe,eAAe,SAAS,KAAK,IAAI,YAAc;AAAA,QAC1F;AAEA,cAAM,MAAM,KAAK;AAAA,UAChB;AAAA,UACA;AAAA,UACA,QAAQ,WAAW,KAAK,cAAc;AAAA,QACvC;AAEA,cAAM,OAAO,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI;AAGxC,YAAI,KAAK,SAAS,YAAY,MAAO;AAGrC,YAAI,IAAI,YAAY,cAAc,QAAQ,SAAS,EAAG;AAGtD,gBAAQ,QAAQ,GAAG;AAGnB,YAAI,QAAQ,WAAW,KAAK,YAAa;AAGzC,mBAAW,QAAQ,WAAW,IAAI;AAGlC,mBAAW,YAAY,OAAO;AAC7B,cAAI,YAAY,WAAW;AAC1B,sBAAU,QAAQ;AAAA,UACnB,OAAO;AACN,sBAAU,QAAQ,IAAI;AAAA,UACvB;AAAA,QACD;AACA,YAAI,aAAa,gBAAgB;AAChC,yBAAe,SAAS;AAAA,QACzB,OAAO;AACN,yBAAe,SAAS,IAAI;AAAA,QAC7B;AAGA,mBAAW,YAAY,KAAK,IAAI,MAAM,MAAM,GAAG;AAE9C,cAAI,KAAK,IAAI,iBAAiB,UAAU,OAAO,IAAI,GAAG;AACrD,2BAAe,QAAQ;AAAA,UACxB;AACA,cAAI,KAAK,IAAI,iBAAiB,UAAU,OAAO,IAAI,GAAG;AACrD,iCAAqB,QAAQ;AAAA,UAC9B;AAAA,QACD;AAEA,YAAI,CAAC,YAAY,QAAQ,EAAE,SAAS,IAAI,OAAO,KAAK,KAAK,IAAI,iBAAiB,QAAQ,OAAO,MAAM,GAAG;AACrG,yBAAe,MAAM;AAAA,QACtB;AACA,YAAI,gBAAiB,gBAAe,YAAY;AAGhD,YAAI,IAAI,UAAU,IAAK;AAGvB,YAAI,KAAK,aAAa,QAAQ,SAAS,gBAAiB,WAAU;AAClE,YAAI,KAAK,MAAO,aAAY,QAAQ;AACpC,YAAI,IAAI,YAAY,kBAAkB,IAAI,MAAM,SAAS,MAAM,EAAG,aAAY,OAAO;AACrF,YAAI,IAAI,MAAM,SAAS,WAAW,KAAK,IAAI,YAAY,aAAa,CAAC,KAAK,YAAa,aAAY,OAAO;AAC1G,YAAI,IAAI,YAAY,cAAe,aAAY,OAAO;AACtD,YAAI,IAAI,MAAM,SAAS,UAAU,KAAK,IAAI,YAAY,aAAa,CAAC,KAAK,YAAa,aAAY,MAAM;AACxG,YAAI,IAAI,MAAM,SAAS,cAAc,KAAK,IAAI,MAAM,SAAS,UAAU,EAAG,aAAY,aAAa;AACnG,YAAI,IAAI,MAAM,SAAS,QAAQ,EAAG,aAAY,UAAU,YAAY,UAAU,KAAK;AACnF,YAAI,IAAI,MAAM,SAAS,aAAa,EAAG,aAAY,cAAc;AACjE,YAAI,IAAI,MAAM,SAAS,WAAW,EAAG,aAAY,YAAY;AAC7D,YAAI,IAAI,MAAM,SAAS,aAAa,EAAG,aAAY,cAAc;AACjE,YAAI,IAAI,MAAM,SAAS,OAAO,EAAG,aAAY,QAAQ;AACrD,YAAI,IAAI,MAAM,SAAS,WAAW,EAAG,aAAY,YAAY;AAC7D,YAAI,IAAI,MAAM,SAAS,YAAY,KAAM,IAAI,MAAM,SAAS,SAAS,KAAK,IAAI,MAAM,SAAS,aAAa,GAAI;AAC7G,sBAAY,UAAU;AAAA,QACvB;AAAA,MACD;AAAA,IACD;AACA,QAAI,QAAQ,SAAS,KAAK,eAAe,QAAQ,SAAS,IAAI;AAC7D,YAAM,IAAI,MAAM,qCAAqC,KAAK,MAAM,UAAU,IAAI,GAAG;AAAA,IAClF;AAEA,WAAO;AAAA,EACR;AAAA,EAMS,iBACR,SAAkB,UAA+C,MACtB;AAC3C,UAAM,SAAK,iBAAK,QAAQ,IAAI;AAC5B,UAAM,UAAU,KAAK,kBAAkB,IAAI,EAAE,EAAE,EAAE;AAEjD,UAAM,WAAoC;AAAA,MACzC,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,aAAa;AAAA,IACd;AACA,UAAM,WAAoC;AAAA,MACzC,WAAW;AAAA,MACX,WAAW;AAAA,MACX,aAAa;AAAA,MACb,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,IACd;AACA,UAAM,gBAAyC;AAAA,MAC9C,aAAa;AAAA,MACb,WAAW;AAAA,MACX,OAAO;AAAA,IACR;AACA,UAAM,0BAAmD;AAAA,MACxD,WAAW;AAAA,MAAa,WAAW;AAAA,MACnC,WAAW;AAAA,MAAY,YAAY;AAAA,MAAY,aAAa;AAAA,MAC5D,WAAW;AAAA,MAAa,UAAU;AAAA,MAAa,UAAU;AAAA,MACzD,WAAW;AAAA,MAAQ,WAAW;AAAA,IAC/B;AACA,UAAM,mBAAmB,CAAC,WAAW,WAAW,eAAe,YAAY;AAI3E,QAAI,gBAAgG,CAAC;AACrG,UAAM,eAAe,CAAC;AACtB,eAAW,UAAU,SAAS;AAC7B,UAAI,KAAK,iBAAiB,CAAC,QAAQ,MAAM,SAAS,KAAK,aAAa,EAAG;AAGvE,YAAM,eAAyB,CAAC;AAChC,iBAAW,cAAc,OAAO,MAAM;AACrC,cAAMC,QAAO,KAAK,IAAI,MAAM,IAAI,UAAU;AAC1C,YAAI,SAAS,aAAa,SAAS,YAAY,KAAKA,MAAK,UAAW;AACpE,YAAI,SAAS,UAAU,SAAS,SAAS,KAAKA,MAAK,MAAO;AAC1D,YAAI,SAASA,MAAK,EAAE,KAAK,SAAS,IAAIA,MAAK,EAAE,KAAK,SAASA,MAAK,EAAE,EAAG;AACrE,qBAAa,KAAK,UAAU;AAAA,MAC7B;AACA,UAAI,aAAa,WAAW,EAAG;AAC/B,YAAM,aAAa,KAAK,OAAO,YAAY;AAG3C,YAAM,mBAA6B,CAAC;AACpC,iBAAW,iBAAiB,OAAO,SAAS;AAC3C,cAAMC,WAAU,KAAK,IAAI,UAAU,IAAI,aAAa;AACpD,YAAI,wBAAwBA,SAAQ,EAAE,KAAK,SAAS,YAAY,wBAAwBA,SAAQ,EAAE,EAAG;AACrG,YAAI,SAAS,WAAW,iBAAiB,SAASA,SAAQ,EAAE,EAAG;AAC/D,yBAAiB,KAAK,aAAa;AAAA,MACpC;AACA,UAAI,iBAAiB,WAAW,EAAG;AACnC,YAAM,gBAAgB,KAAK,OAAO,gBAAgB;AAElD,UAAI,SAAS;AACb,UAAI,kBAAkB;AACtB,YAAM,iBAAiB,CAAC;AACxB,iBAAW,QAAQ,OAAO,OAAO;AAChC,cAAM,eAAe,KAAK,OAAO,KAAK,MAAM;AAC5C,cAAM,aAAS,iBAAK,KAAK,YAAY,CAAC;AACtC,YAAI,SAAS,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,MAAM,GAAG;AACjE,mBAAS;AACT;AAAA,QACD;AACA,YAAI,cAAc,MAAM,KAAK,CAAC,SAAS,IAAI,cAAc,MAAM,CAAC,GAAG;AAClE,4BAAkB;AAAA,QACnB;AACA,uBAAe,KAAK,YAAY;AAAA,MACjC;AACA,UAAI,OAAQ;AAEZ,YAAM,cAAc,EAAE,KAAK,QAAQ,cAAc,gBAAgB,MAAM,YAAY,SAAS,cAAc;AAC1G,oBAAc,KAAK,WAAW;AAC9B,UAAI,gBAAiB,cAAa,KAAK,WAAW;AAAA,IACnD;AACA,QAAI,aAAa,OAAQ,iBAAgB;AAEzC,QAAI,CAAC,cAAc,QAAQ;AAC1B,UAAI,CAAC,SAAS,YAAa,QAAO;AAClC,iBAAW,UAAU,SAAS;AAC7B,sBAAc,KAAK,EAAE,KAAK,OAAO,CAAC;AAAA,MACnC;AAAA,IACD;AAEA,UAAM,UAAU,KAAK,OAAO,aAAa;AACzC,UAAM,QAAQ,CAAC;AACf,eAAW,CAAC,GAAG,QAAQ,KAAK,QAAQ,IAAI,MAAM,QAAQ,GAAG;AACxD,YAAM,KAAK,QAAQ,eAAe,SAAS,QAAQ,aAAa,CAAC,CAAC,IAAI,KAAK,OAAO,QAAQ,CAAC;AAAA,IAC5F;AAEA,UAAM,OAAO,QAAQ,QAAQ,KAAK,cAAc,QAAQ,IAAI,IAAI;AAChE,UAAM,UAAU,QAAQ,WAAW,KAAK,cAAc,QAAQ,IAAI,OAAO;AACzE,UAAM,SAAS,KAAK,cAAc,QAAQ,IAAI,MAAM;AACpD,UAAM,QAAQ,KAAK,eAAe,QAAQ,IAAI,UAAU,SAAS,OAAO,IAAI;AAE5E,WAAO;AAAA,MACN,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AAAA,MAClC,SAAS,QAAQ,IAAI;AAAA,MACrB,QAAQ,QAAQ,IAAI,UAAU,QAAQ,WAAW,KAAK,aAAa,GAAG,CAAC,IAAI,MAAM;AAAA,MACjF,MAAM,QAAQ;AAAA,MACd,SAAS,WAAW,QAAQ,UAAU,GAAG;AAAA,MACzC,OAAO,OAAO,QAAQ,IAAI,UAAU,cAAc,KAAK,aAAa,GAAG,IAAI,IAAI,QAAQ,IAAI;AAAA,MAC3F;AAAA,MACA,WAAW,OAAO,QAAQ,IAAI,cAAc,cAAc,MAAM,QAAQ,IAAI;AAAA,MAC5E,KAAK,EAAE,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,QAAQ,IAAI,IAAI;AAAA,MACzE,KAAK,EAAE,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,QAAQ,IAAI,IAAI;AAAA,MAC/E,QAAQ,UAAU;AAAA,MAClB;AAAA,IACD;AAAA,EACD;AAAA,EAES,kBAAkB,MAAqB,QAAQ,GAAwC;AAC/F,SAAK,oCAAoC;AAEzC,UAAM,cAAe,SAAS;AAC9B,UAAM,aAAa,CAAC,CAAC,KAAK,iBAAiB,KAAK,IAAI,QAAQ,aAAa,KAAK,MAAM,EAAE,IAAI,gBAAgB;AAI1G,QAAI,CAAC,KAAK,aAAa;AACtB,WAAK,cAAc,aAAa,SAAS,KAAK,OAAO,CAAC,QAAQ,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI,CAAC;AAAA,IAClG,WAAW,cAAc,KAAK,gBAAgB,QAAQ;AAErD,YAAM,IAAI,MAAM,8EAA8E,KAAK,WAAW,EAAE;AAAA,IACjH;AAEA,UAAM,aAAsC;AAAA,MAC3C,MAAM;AAAA,MACN,IAAI;AAAA,MAAG,MAAM;AAAA,MACb,IAAI;AAAA,MAAG,MAAM;AAAA,MACb,IAAI;AAAA,MAAG,MAAM;AAAA,MACb,IAAI;AAAA,MAAG,MAAM;AAAA,MACb,IAAI;AAAA,IACL;AAEA,UAAM,UAAU,CAAC;AACjB,UAAM,cAAc,OAAO,KAAK,KAAK,kBAAkB,KAAK,WAAW,CAAC;AAExE,UAAM,WAAW,KAAK,IAAI,MAAM,MAAM;AACtC,UAAM,OAAO,KAAK,OAAO,QAAQ;AAEjC,UAAM,WAAqB;AAAA,MAC1B,WAAW,CAAC;AAAA,MAAG,gBAAgB,CAAC;AAAA,MAAG,YAAY,CAAC;AAAA,MAAG,WAAW;AAAA,MAAG,QAAQ;AAAA,MACzE,KAAK,CAAC;AAAA,MAAG;AAAA,MAAa,YAAY,CAAC;AAAA,MAAG,aAAa,CAAC;AAAA,IACrD;AACA,UAAM,uBAAuB,CAAC,aAAa,aAAa;AACxD,UAAM,gBAAyC;AAAA,MAC9C,aAAa;AAAA,MACb,WAAW;AAAA,MACX,OAAO;AAAA,IACR;AACA,UAAM,sBAA+C;AAAA,MACpD,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,YAAY;AAAA,IACb;AACA,UAAM,sBAAiD;AAAA,MACtD,SAAS,CAAC,OAAO;AAAA,MAAG,aAAa,CAAC,OAAO;AAAA,MAAG,YAAY,CAAC,OAAO;AAAA,MAChE,WAAW,CAAC,MAAM;AAAA,MAAG,WAAW,CAAC,MAAM;AAAA,MACvC,cAAc,CAAC,UAAU;AAAA,MAAG,YAAY,CAAC,UAAU;AAAA,MAAG,YAAY,CAAC,UAAU;AAAA,MAC7E,WAAW,CAAC,OAAO;AAAA,MACnB,UAAU,CAAC,OAAO,MAAM;AAAA,MACxB,UAAU,CAAC,QAAQ;AAAA,IACpB;AAEA,WAAO,YAAY,UAAU,QAAQ,SAAS,KAAK,aAAa;AAC/D,YAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,KAAK,gBAAgB,WAAW,CAAC;AACtE,UAAI,CAAC,QAAQ,OAAQ;AAGrB,UACC,KAAK,eAAe,cAAc,QAAQ,QAAQ,cAClD,WAAW,QAAQ,IAAI,IAAI,WAAW,KAAK,WAAW,EACrD;AAEF,YAAM,eAAe,KAAK,kBAAkB,KAAK,WAAW,EAAE,QAAQ,EAAE,EAAE;AAG1E,UAAI,SAAS,WAAW,QAAQ,WAAW,EAAG;AAG9C,UAAI,CAAC,SAAS,UAAW,UAAS,YAAY;AAC9C,UAAI,SAAS,aAAa,KAAK,aAAa,SAAU;AAEtD,YAAM,MAAM,KAAK,iBAAiB,SAAS,UAAU,KAAK,WAAW;AACrE,UAAI,CAAC,IAAK;AAEV,YAAM,WAAW,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI;AAG5C,UAAI,SAAS,aAAa,KAAK,SAAS,UAAW;AAGnD,UAAI,SAAS,UAAU,SAAS,UAAU,KAAK,SAAS,MAAO;AAE/D,UAAI,QAAQ,QAAQ;AAEpB,YAAM,cAAc,KAAK,MAAM,KAAK,cAAc,CAAC,KAAK;AAGxD,UAAI,YAAY;AAEf,YAAI,SAAS,WAAW;AACvB,gBAAM,cAAc,KAAK,IAAI,QAAQ,IAAI,SAAS,SAAS;AAC3D,cAAI,MAAM,SAAS,YAAY,MAAM,OAAQ,SAAQ,CAAC,QAAQ,MAAM,CAAC,CAAC;AAEtE,cAAI,YAAY,MAAM,CAAC,KAAK,MAAM,CAAC,KAAK,YAAY,MAAM,CAAC,MAAM,MAAM,CAAC,GAAG;AAC1E,oBAAQ,CAAC,YAAY,MAAM,CAAC,CAAC;AAAA,UAC9B;AAAA,QACD;AACA,YAAI,CAAC,MAAM,SAAS,IAAI,EAAG;AAAA,MAC5B,OAAO;AAEN,YAAI,OAAO;AACX,mBAAW,YAAY,OAAO;AAC7B,cAAI,SAAS,UAAU,QAAQ,KAAK,IAAI,eAAe,KAAK,aAAa,GAAG,CAAC,GAAG;AAC/E,mBAAO;AACP;AAAA,UACD;AAAA,QACD;AACA,YAAI,KAAM;AAGV,YAAIC,aAAY,MAAM,MAAM,EAAE,KAAK,EAAE,KAAK;AAC1C,YAAI,IAAI,YAAY,aAAa,IAAI,YAAY,WAAW;AAE3D,UAAAA,aAAY,IAAI;AAAA,QACjB;AACA,YAAI,SAAS,eAAeA,UAAS,KAAK,YAAa;AAAA,MACxD;AAGA,cAAQ,KAAK,GAAG;AAChB,YAAM,YAAY,MAAM,MAAM,EAAE,KAAK,EAAE,KAAK;AAE5C,iBAAW,YAAY,OAAO;AAC7B,YAAI,YAAY,SAAS,WAAW;AACnC,mBAAS,UAAU,QAAQ;AAAA,QAC5B,OAAO;AACN,mBAAS,UAAU,QAAQ,IAAI;AAAA,QAChC;AAAA,MACD;AACA,eAAS,eAAe,SAAS,IAAK,SAAS,eAAe,SAAS,IAAI,KAAM;AAEjF,eAAS,WAAW,QAAQ,WAAW,IAAI;AAE3C,UAAI,SAAS,UAAW,UAAS;AACjC,UAAI,SAAS,OAAO;AACnB,YAAI,CAAC,SAAS,OAAQ,UAAS,SAAS;AACxC,iBAAS;AAAA,MACV;AACA,UAAI,SAAS,MAAM,SAAS,KAAK;AAChC,iBAAS,IAAI,SAAS,EAAE;AAAA,MACzB,OAAO;AACN,iBAAS,IAAI,SAAS,EAAE,IAAI;AAAA,MAC7B;AAEA,YAAM,eAAe,KAAK,IAAI,UAAU,IAAI,IAAI,OAAO;AACvD,UAAI,aAAa,MAAM,qBAAqB;AAC3C,iBAAS,UAAU,oBAAoB,aAAa,EAAE;AAAA,MACvD;AAEA,iBAAW,QAAQ,IAAI,OAAO;AAC7B,cAAM,aAAS,iBAAK,IAAI;AACxB,YAAI,UAAU,SAAS,KAAK;AAC3B,mBAAS,IAAI,MAAM;AAAA,QACpB,OAAO;AACN,mBAAS,IAAI,MAAM,IAAI;AAAA,QACxB;AACA,YAAI,UAAU,eAAe;AAC5B,mBAAS,IAAI,cAAc,MAAM,CAAC,IAAI;AAAA,QACvC;AAAA,MACD;AAEA,iBAAW,YAAY,KAAK,IAAI,MAAM,MAAM,GAAG;AAE9C,YAAI,SAAS,YAAY,QAAQ,KAAK,EAAG;AACzC,YAAI,oBAAoB,aAAa,EAAE,GAAG,SAAS,QAAQ,KAAK,CAAC,KAAK,IAAI,YAAY,UAAU,KAAK,GAAG;AAEvG,mBAAS,YAAY,QAAQ,KAAK,SAAS,YAAY,QAAQ,KAAK,KAAK;AACzE,cAAI,SAAS,YAAY,QAAQ,KAAK,EAAG,UAAS,WAAW,QAAQ,IAAI;AACzE;AAAA,QACD;AACA,cAAM,UAAU,KAAK,IAAI,iBAAiB,UAAU,KAAK;AACzD,YAAI,UAAU,GAAG;AAChB,mBAAS,YAAY,QAAQ,KAAK,SAAS,YAAY,QAAQ,KAAK,KAAK;AACzE,cAAI,SAAS,YAAY,QAAQ,KAAK,EAAG,UAAS,WAAW,QAAQ,IAAI;AAAA,QAC1E,WAAW,UAAU,GAAG;AACvB,mBAAS,WAAW,QAAQ,KAAK,SAAS,WAAW,QAAQ,KAAK,KAAK;AAAA,QACxE;AAAA,MACD;AAAA,IACD;AACA,QAAI,QAAQ,SAAS,KAAK,YAAa,QAAO,KAAK,kBAAkB,MAAM,EAAE,KAAK;AAGlF,QAAI,CAAC,SAAS,aAAa;AAC1B,iBAAW,kBAAkB,sBAAsB;AAClD,YAAI,CAAC,SAAS,IAAI,cAAc,EAAG,QAAO,KAAK,kBAAkB,MAAM,EAAE,KAAK;AAAA,MAC/E;AACA,iBAAW,YAAY,SAAS,YAAY;AAC3C,YAAI,SAAS,WAAW,QAAQ,KAAK,EAAG,QAAO,KAAK,kBAAkB,MAAM,EAAE,KAAK;AAAA,MACpF;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAIS,oBACR,SAAkB,UACyB;AAC3C,UAAM,SAAK,iBAAK,QAAQ,IAAI;AAE5B,UAAM,UAAU,KAAK,qBAAqB,EAAE,EAAE;AAE9C,UAAM,WAAoC;AAAA,MACzC,WAAW;AAAA,MACX,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,WAAW;AAAA,IACZ;AACA,UAAM,gBAAyC,CAAC;AAChD,UAAM,0BAAmD;AAAA,MACxD,WAAW;AAAA,MACX,UAAU;AAAA,MAAa,UAAU;AAAA,IAClC;AACA,UAAM,mBAAmB,CAAC,WAAW,WAAW,eAAe,YAAY;AAI3E,QAAI,gBAAgH,CAAC;AACrH,UAAM,eAAe,CAAC;AACtB,eAAW,UAAU,SAAS;AAC7B,UAAI,KAAK,iBAAiB,CAAC,QAAQ,MAAM,SAAS,KAAK,aAAa,EAAG;AAEvE,YAAM,OAAO,KAAK,IAAI,MAAM,IAAI,OAAO,IAAI;AAC3C,UAAI,SAAS,aAAa,SAAS,YAAY,KAAK,KAAK,UAAW;AACpE,UAAI,SAAS,UAAU,SAAS,SAAS,KAAK,KAAK,MAAO;AAC1D,UAAI,SAAS,IAAI,KAAK,EAAE,EAAG;AAE3B,YAAM,UAAU,KAAK,IAAI,UAAU,IAAI,OAAO,OAAO;AACrD,UAAI,wBAAwB,QAAQ,EAAE,KAAK,SAAS,YAAY,wBAAwB,QAAQ,EAAE,EAAG;AACrG,UAAI,SAAS,WAAW,iBAAiB,SAAS,QAAQ,EAAE,EAAG;AAE/D,UAAI,OAAO,YAAY,UAAU,SAAS,YAAY,YAAa;AAEnE,UAAI,SAAS;AACb,UAAI,kBAAkB;AACtB,YAAM,iBAAiB,CAAC;AACxB,iBAAW,QAAQ,OAAO,OAAO;AAChC,cAAM,eAAe,KAAK,OAAO,KAAK,MAAM;AAC5C,cAAM,aAAS,iBAAK,KAAK,YAAY,CAAC;AACtC,YAAI,SAAS,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,MAAM,GAAG;AACjE,mBAAS;AACT;AAAA,QACD;AACA,YAAI,cAAc,MAAM,KAAK,CAAC,SAAS,IAAI,cAAc,MAAM,CAAC,GAAG;AAClE,4BAAkB;AAAA,QACnB;AACA,uBAAe,KAAK,YAAY;AAAA,MACjC;AACA,UAAI,OAAQ;AACZ,oBAAc,KAAK,EAAE,KAAK,QAAQ,cAAc,eAAe,CAAC;AAChE,UAAI,gBAAiB,cAAa,KAAK,EAAE,KAAK,QAAQ,cAAc,eAAe,CAAC;AAAA,IACrF;AACA,QAAI,aAAa,OAAQ,iBAAgB;AAEzC,QAAI,CAAC,cAAc,QAAQ;AAC1B,UAAI,CAAC,SAAS,YAAa,QAAO;AAClC,iBAAW,UAAU,SAAS;AAC7B,sBAAc,KAAK,EAAE,KAAK,OAAO,CAAC;AAAA,MACnC;AAAA,IACD;AAEA,UAAM,UAAU,KAAK,OAAO,aAAa;AACzC,UAAM,QAAQ,CAAC;AACf,eAAW,CAAC,GAAG,QAAQ,KAAK,QAAQ,IAAI,MAAM,QAAQ,GAAG;AACxD,YAAM,KAAK,QAAQ,eAAe,SAAS,QAAQ,aAAa,CAAC,CAAC,IAAI,KAAK,OAAO,QAAQ,CAAC;AAAA,IAC5F;AAEA,WAAO;AAAA,MACN,MAAM,QAAQ,IAAI,YAAY,QAAQ,IAAI,QAAQ,QAAQ;AAAA,MAC1D,SAAS,QAAQ,IAAI;AAAA,MACrB,QAAQ,QAAQ,IAAI,UAAU,QAAQ,WAAW,KAAK,aAAa,GAAG,CAAC,IAAI,MAAM;AAAA,MACjF,MAAM,KAAK,cAAc,QAAQ,IAAI,IAAI,KAAK;AAAA,MAC9C,SAAS,QAAQ,IAAI,WAAW,QAAQ,UAAU,GAAG;AAAA,MACrD,OAAO,OAAO,QAAQ,IAAI,UAAU,cAAc,KAAK,aAAa,GAAG,IAAI,IAAI,QAAQ,IAAI;AAAA,MAC3F,OAAO,QAAQ,IAAI,SAAS;AAAA,MAC5B,WAAW,OAAO,QAAQ,IAAI,cAAc,cAAc,MAAM,QAAQ,IAAI;AAAA,MAC5E,KAAK,EAAE,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,QAAQ,IAAI,IAAI;AAAA,MACzE,KAAK,EAAE,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,QAAQ,IAAI,IAAI;AAAA,MAC/E,QAAQ,QAAQ,IAAI,UAAU;AAAA,MAC9B;AAAA,IACD;AAAA,EACD;AAAA,EAES,qBAAqB,MAAqB,QAAQ,GAAwC;AAClG,SAAK,oCAAoC;AAEzC,UAAM,cAAe,SAAS;AAE9B,UAAM,UAAU,CAAC;AAEjB,UAAM,cAAc,OAAO,KAAK,KAAK,oBAAoB;AAEzD,UAAM,WAAqB;AAAA,MAC1B,WAAW,CAAC;AAAA,MAAG,gBAAgB,CAAC;AAAA,MAAG,YAAY,CAAC;AAAA,MAAG,WAAW;AAAA,MAAG,QAAQ;AAAA,MACzE,eAAe;AAAA,MAAG,KAAK,CAAC;AAAA,MAAG;AAAA,MAAa,YAAY,CAAC;AAAA,MAAG,aAAa,CAAC;AAAA,IACvE;AACA,UAAM,uBAAiC,CAAC;AACxC,UAAM,gBAAyC,CAAC;AAChD,UAAM,sBAA+C;AAAA,MACpD,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,YAAY;AAAA,IACb;AACA,UAAM,sBAAiD;AAAA,MACtD,aAAa,CAAC,OAAO;AAAA,MACrB,WAAW,CAAC,MAAM;AAAA,MAClB,cAAc,CAAC,UAAU;AAAA,MAAG,YAAY,CAAC,UAAU;AAAA,MACnD,UAAU,CAAC,OAAO,MAAM;AAAA,MACxB,UAAU,CAAC,QAAQ;AAAA,IACpB;AAEA,WAAO,YAAY,UAAU,QAAQ,SAAS,KAAK,aAAa;AAC/D,YAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,KAAK,gBAAgB,WAAW,CAAC;AACtE,UAAI,CAAC,QAAQ,OAAQ;AAErB,YAAM,eAAe,KAAK,qBAAqB,QAAQ,EAAE,EAAE;AAC3D,UAAI,CAAC,SAAS,UAAW,UAAS,YAAY;AAG9C,UAAI,SAAS,WAAW,QAAQ,WAAW,EAAG;AAG9C,UAAI,SAAS,aAAa,SAAS,SAAS,SAAS,SAAS,MAAM,KAAK,aAAa,SAAU;AAGhG,YAAM,cAAc,KAAK,MAAM,KAAK,cAAc,CAAC,KAAK;AAGxD,YAAM,QAAQ,QAAQ;AACtB,UAAI,OAAO;AACX,iBAAW,QAAQ,OAAO;AACzB,YAAI,SAAS,UAAU,IAAI,KAAK,IAAI,eAAe,KAAK,aAAa,GAAG,CAAC,GAAG;AAC3E,iBAAO;AACP;AAAA,QACD;AAAA,MACD;AACA,UAAI,KAAM;AAGV,UAAI,aAAa,UAAU;AAC1B,YAAI,CAAC,SAAS,cAAe,UAAS,gBAAgB;AACtD,iBAAS;AAAA,MACV;AACA,UAAI,SAAS,iBAAiB,SAAS,iBAAiB,KAAK,aAAa,SAAU;AAEpF,YAAM,MAAM,KAAK,oBAAoB,SAAS,QAAQ;AACtD,UAAI,CAAC,IAAK;AAGV,UAAI,YAAY,MAAM,MAAM,EAAE,KAAK,EAAE,KAAK;AAC1C,UAAI,IAAI,YAAY,aAAa,IAAI,YAAY,WAAW;AAE3D,oBAAY,IAAI;AAAA,MACjB;AACA,UAAI,SAAS,eAAe,SAAS,KAAK,YAAa;AAGvD,cAAQ,KAAK,GAAG;AAGhB,iBAAW,QAAQ,OAAO;AACzB,YAAI,QAAQ,SAAS,WAAW;AAC/B,mBAAS,UAAU,IAAI;AAAA,QACxB,OAAO;AACN,mBAAS,UAAU,IAAI,IAAI;AAAA,QAC5B;AAAA,MACD;AACA,eAAS,eAAe,SAAS,IAAK,SAAS,eAAe,SAAS,IAAI,KAAM;AAEjF,eAAS,WAAW,QAAQ,WAAW,IAAI;AAG3C,YAAM,WAAW,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI;AAC5C,UAAI,SAAS,UAAW,UAAS;AACjC,UAAI,SAAS,OAAO;AACnB,YAAI,CAAC,SAAS,OAAQ,UAAS,SAAS;AACxC,iBAAS;AAAA,MACV;AACA,eAAS,IAAI,SAAS,EAAE,IAAI;AAE5B,YAAM,eAAe,KAAK,IAAI,UAAU,IAAI,IAAI,OAAO;AACvD,UAAI,aAAa,MAAM,qBAAqB;AAC3C,iBAAS,UAAU,oBAAoB,aAAa,EAAE;AAAA,MACvD;AAEA,iBAAW,QAAQ,IAAI,OAAO;AAC7B,cAAM,aAAS,iBAAK,IAAI;AACxB,YAAI,UAAU,SAAS,KAAK;AAC3B,mBAAS,IAAI,MAAM;AAAA,QACpB,OAAO;AACN,mBAAS,IAAI,MAAM,IAAI;AAAA,QACxB;AACA,YAAI,UAAU,eAAe;AAC5B,mBAAS,IAAI,cAAc,MAAM,CAAC,IAAI;AAAA,QACvC;AAAA,MACD;AAEA,iBAAW,YAAY,KAAK,IAAI,MAAM,MAAM,GAAG;AAE9C,YAAI,SAAS,YAAY,QAAQ,KAAK,EAAG;AACzC,YAAI,oBAAoB,aAAa,EAAE,GAAG,SAAS,QAAQ,KAAK,CAAC,KAAK,IAAI,YAAY,UAAU,KAAK,GAAG;AAEvG,mBAAS,YAAY,QAAQ,KAAK,SAAS,YAAY,QAAQ,KAAK,KAAK;AACzE,cAAI,SAAS,YAAY,QAAQ,KAAK,EAAG,UAAS,WAAW,QAAQ,IAAI;AACzE;AAAA,QACD;AACA,cAAM,UAAU,KAAK,IAAI,iBAAiB,UAAU,KAAK;AACzD,YAAI,UAAU,GAAG;AAChB,mBAAS,YAAY,QAAQ,KAAK,SAAS,YAAY,QAAQ,KAAK,KAAK;AACzE,cAAI,SAAS,YAAY,QAAQ,KAAK,EAAG,UAAS,WAAW,QAAQ,IAAI;AAAA,QAC1E,WAAW,UAAU,GAAG;AACvB,mBAAS,WAAW,QAAQ,KAAK,SAAS,WAAW,QAAQ,KAAK,KAAK;AAAA,QACxE;AAAA,MACD;AAAA,IACD;AACA,QAAI,QAAQ,SAAS,KAAK,YAAa,QAAO,KAAK,qBAAqB,MAAM,EAAE,KAAK;AAGrF,QAAI,CAAC,SAAS,aAAa;AAC1B,iBAAW,kBAAkB,sBAAsB;AAClD,YAAI,CAAC,SAAS,IAAI,cAAc,EAAG,QAAO,KAAK,qBAAqB,MAAM,EAAE,KAAK;AAAA,MAClF;AACA,iBAAW,QAAQ,SAAS,YAAY;AACvC,YAAI,SAAS,WAAW,IAAI,KAAK,EAAG,QAAO,KAAK,qBAAqB,MAAM,EAAE,KAAK;AAAA,MACnF;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;AAEA,IAAO,gBAAQ;",
  "names": ["set", "species", "item", "ability", "typeCombo"]
}
