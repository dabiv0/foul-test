{
  "version": 3,
  "sources": ["../../data/cg-teams.ts"],
  "sourcesContent": ["/**\r\n * Computer-Generated Teams\r\n *\r\n * Generates teams based on heuristics, most of which carry over across generations.\r\n * Teams generated will not always be competitively great, but they will have variety\r\n * and be fun to play (i.e., tries to avoid awful sets).\r\n *\r\n * The [Gen 9] Computer-Generated Teams format is personally maintained by Annika,\r\n * and is not part of any official Smogon or PS format selection. If you enjoy playing\r\n * with teams you didn't make yourself, you may want to check out Random Battles, Battle Factory,\r\n * and/or the sample teams for usage-based formats like OU.\r\n *\r\n * The core of the generator is the weightedRandomPick function, which chooses from an array\r\n * of options based on a weight associated with each option. This way, better/stronger/more useful options\r\n * are more likely to be chosen, but there's still an opportunity for weaker, more situational,\r\n * or higher-risk/higher-reward options to be chosen. However, for moves, the 'worst' moves are excluded\r\n * altogether, both to reduce the likelihood of a bad moveset and improve generator performance.\r\n *\r\n * Certain less-relevant aspects of the set are not randomized at all, such as:\r\n *   - IVs (all 31s, with 0 Attack IV if the Pok\u00E9mon has no Physical moves in case of Confusion)\r\n *   - EVs (84 per stat, for +21 to each)\r\n *   - Nature (always Quirky, which has no effect)\r\n *   - Happiness (there are no Happiness-based moves in Gen IX)\r\n *\r\n * Currently, leveling is based on a Pok\u00E9mon's position within Smogon's usage-based tiers,\r\n * but an automatic leveling system is planned for the future. This would involve storing win and loss\r\n * data by Pok\u00E9mon species in a database, and increasing and decreasing the levels of Pok\u00E9mon species\r\n * each day based on their win/loss ratio. For example, if 60% of matches with a Pok\u00E9mon species are wins,\r\n * the species is probably overleveled!\r\n *\r\n * Other aspects of the team generator that may be worth implementing in the future include:\r\n *   - Explicit support for weather-oriented teams (boosting moves and typings that synergize with that weather)\r\n *   - Tracking type coverage to make it more likely that a moveset can hit every type\r\n */\r\n\r\nimport type { SQLDatabaseManager } from '../lib/sql';\r\nimport { Dex, PRNG, SQL } from '../sim';\r\nimport type { EventMethods } from '../sim/dex-conditions';\r\nimport {\r\n\tABILITY_MOVE_BONUSES,\r\n\tABILITY_MOVE_TYPE_BONUSES,\r\n\tHARDCODED_MOVE_WEIGHTS,\r\n\tMOVE_PAIRINGS,\r\n\tTARGET_HP_BASED_MOVES,\r\n\tWEIGHT_BASED_MOVES,\r\n} from './cg-team-data';\r\n\r\ninterface TeamStats {\r\n\thazardSetters: { [moveid: string]: number };\r\n\ttypeWeaknesses: { [type: string]: number };\r\n\thazardRemovers: number;\r\n}\r\ninterface MovesStats {\r\n\tattackTypes: { [type: string]: number };\r\n\tsetup: { atk: number, def: number, spa: number, spd: number, spe: number };\r\n\tnoSleepTalk: number;\r\n\thazards: number;\r\n\tstallingMoves: number;\r\n\tnonStatusMoves: number;\r\n\thealing: number;\r\n}\r\n\r\n// We put a limit on the number of Pok\u00E9mon on a team that can be weak to a given type.\r\nconst MAX_WEAK_TO_SAME_TYPE = 3;\r\n/** An estimate of the highest raw speed in the metagame */\r\nconst TOP_SPEED = 300;\r\n\r\nconst levelOverride: { [speciesID: string]: number } = {};\r\nexport let levelUpdateInterval: NodeJS.Timeout | null = null;\r\n\r\n// can't import the function cg-teams-leveling.ts uses to this context for some reason\r\nconst useBaseSpecies = [\r\n\t'Pikachu',\r\n\t'Gastrodon',\r\n\t'Magearna',\r\n\t'Dudunsparce',\r\n\t'Maushold',\r\n\t'Keldeo',\r\n\t'Zarude',\r\n\t'Polteageist',\r\n\t'Sinistcha',\r\n\t'Sawsbuck',\r\n\t'Vivillon',\r\n\t'Florges',\r\n\t'Minior',\r\n\t'Toxtricity',\r\n\t'Tatsugiri',\r\n\t'Alcremie',\r\n];\r\n\r\nasync function updateLevels(database: SQL.DatabaseManager) {\r\n\tconst updateSpecies = await database.prepare(\r\n\t\t'UPDATE gen9computergeneratedteams SET wins = 0, losses = 0, level = ? WHERE species_id = ?'\r\n\t);\r\n\tconst updateHistory = await database.prepare(\r\n\t\t`INSERT INTO gen9_historical_levels (level, species_id, timestamp) VALUES (?, ?, ${Date.now()})`\r\n\t);\r\n\tconst data: { species_id: ID, wins: number, losses: number, level: number }[] = await database.all(\r\n\t\t'SELECT species_id, wins, losses, level FROM gen9computergeneratedteams'\r\n\t);\r\n\tfor (let { species_id, wins, losses, level } of data) {\r\n\t\tconst total = wins + losses;\r\n\r\n\t\tif (total > 10) {\r\n\t\t\tif (wins / total >= 0.55) level--;\r\n\t\t\tif (wins / total <= 0.45) level++;\r\n\t\t\tlevel = Math.max(1, Math.min(100, level));\r\n\t\t\tawait updateSpecies?.run([level, species_id]);\r\n\t\t\tawait updateHistory?.run([level, species_id]);\r\n\t\t}\r\n\r\n\t\tlevelOverride[species_id] = level;\r\n\t}\r\n}\r\n\r\nexport let cgtDatabase: SQLDatabaseManager;\r\nif (global.Config && Config.usesqlite && Config.usesqliteleveling) {\r\n\tcgtDatabase = SQL(module, { file: './databases/battlestats.db' });\r\n\r\n\t// update every 2 hours\r\n\tvoid updateLevels(cgtDatabase);\r\n\tlevelUpdateInterval = setInterval(() => void updateLevels(cgtDatabase), 1000 * 60 * 60 * 2);\r\n}\r\n\r\nexport default class TeamGenerator {\r\n\tdex: ModdedDex;\r\n\tformat: Format;\r\n\tteamSize: number;\r\n\tforceLevel?: number;\r\n\tprng: PRNG;\r\n\titemPool: Item[];\r\n\tspecialItems: { [pokemon: string]: string };\r\n\r\n\tconstructor(format: Format | string, seed: PRNG | PRNGSeed | null) {\r\n\t\tthis.dex = Dex.forFormat(format);\r\n\t\tthis.format = Dex.formats.get(format);\r\n\t\tthis.teamSize = this.format.ruleTable?.maxTeamSize || 6;\r\n\t\tthis.prng = PRNG.get(seed);\r\n\t\tthis.itemPool = this.dex.items.all().filter(i => i.exists && i.isNonstandard !== 'Past' && !i.isPokeball);\r\n\t\tthis.specialItems = {};\r\n\t\tfor (const i of this.itemPool) {\r\n\t\t\tif (i.itemUser && !i.isNonstandard) {\r\n\t\t\t\tfor (const user of i.itemUser) {\r\n\t\t\t\t\tif (Dex.species.get(user).requiredItems?.[0] !== i.name) this.specialItems[user] = i.id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst rules = Dex.formats.getRuleTable(this.format);\r\n\t\tif (rules.adjustLevel) this.forceLevel = rules.adjustLevel;\r\n\t}\r\n\r\n\tgetTeam(): PokemonSet[] {\r\n\t\tlet speciesPool = this.dex.species.all().filter(s => {\r\n\t\t\tif (!s.exists) return false;\r\n\t\t\tif (s.isNonstandard || s.isNonstandard === 'Unobtainable') return false;\r\n\t\t\tif (s.nfe) return false;\r\n\t\t\tif (s.battleOnly && (!s.requiredItems?.length || s.name.endsWith('-Tera'))) return false;\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\tconst teamStats: TeamStats = {\r\n\t\t\thazardSetters: {},\r\n\t\t\ttypeWeaknesses: {},\r\n\t\t\thazardRemovers: 0,\r\n\t\t};\r\n\r\n\t\tconst team: PokemonSet[] = [];\r\n\t\twhile (team.length < this.teamSize && speciesPool.length) {\r\n\t\t\tconst species = this.prng.sample(speciesPool);\r\n\r\n\t\t\tconst haveRoomToReject = speciesPool.length >= (this.teamSize - team.length);\r\n\t\t\tconst isGoodFit = this.speciesIsGoodFit(species, teamStats);\r\n\t\t\tif (haveRoomToReject && !isGoodFit) continue;\r\n\r\n\t\t\tspeciesPool = speciesPool.filter(s => s.baseSpecies !== species.baseSpecies);\r\n\t\t\tteam.push(this.makeSet(species, teamStats));\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\r\n\tprotected makeSet(species: Species, teamStats: TeamStats): PokemonSet {\r\n\t\tconst abilityPool: string[] = Object.values(species.abilities);\r\n\t\tconst abilityWeights = abilityPool.map(a => this.getAbilityWeight(this.dex.abilities.get(a)));\r\n\t\tconst ability = this.weightedRandomPick(abilityPool, abilityWeights);\r\n\t\tconst level = this.forceLevel || TeamGenerator.getLevel(species);\r\n\r\n\t\tconst moves: Move[] = [];\r\n\t\tlet movesStats: MovesStats = {\r\n\t\t\tsetup: { atk: 0, def: 0, spa: 0, spd: 0, spe: 0 },\r\n\t\t\tattackTypes: {},\r\n\t\t\tnoSleepTalk: 0,\r\n\t\t\thazards: 0,\r\n\t\t\tstallingMoves: 0,\r\n\t\t\thealing: 0,\r\n\t\t\tnonStatusMoves: 0,\r\n\t\t};\r\n\r\n\t\tlet movePool: IDEntry[] = [...this.dex.species.getMovePool(species.id)];\r\n\t\tif (!movePool.length) throw new Error(`No moves for ${species.id}`);\r\n\r\n\t\t// Consider either the top 15 moves or top 30% of moves, whichever is greater.\r\n\t\tconst numberOfMovesToConsider = Math.min(movePool.length, Math.max(15, Math.trunc(movePool.length * 0.3)));\r\n\t\tlet movePoolIsTrimmed = false;\r\n\t\t// Many moves' weights, such as Swords Dance, are dependent on having other moves in the moveset already\r\n\t\t// and end up very low when calculated with no moves chosen. This makes it difficult to add these moves without\r\n\t\t// weighing every move 4 times, and trimming once after the initial weighing makes them impossible for most Pokemon.\r\n\t\t// To get around this, after weighing against an empty moveset, trimming, and adding three moves, we weigh ALL\r\n\t\t// moves again against the populated moveset, then put the chosen 3 moves back into the pool with their\r\n\t\t// original empty-set weights, trim the pool again, and start over. This process results in about 15% fewer calls\r\n\t\t// to getMoveWeight than considering every move every time does.\r\n\t\tlet isRound2 = false;\r\n\t\t// this is just a second reference the array because movePool gets set to point to a new array before the old one\r\n\t\t// gets mutated\r\n\t\tconst movePoolCopy = movePool;\r\n\t\tlet interimMovePool: { move: IDEntry, weight: number }[] = [];\r\n\t\twhile (moves.length < 4 && movePool.length) {\r\n\t\t\tlet weights;\r\n\t\t\tif (!movePoolIsTrimmed) {\r\n\t\t\t\tif (!isRound2) {\r\n\t\t\t\t\tfor (const moveID of movePool) {\r\n\t\t\t\t\t\tconst move = this.dex.moves.get(moveID);\r\n\t\t\t\t\t\tconst weight = this.getMoveWeight(move, teamStats, species, moves, movesStats, ability, level);\r\n\t\t\t\t\t\tinterimMovePool.push({ move: moveID, weight });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tinterimMovePool.sort((a, b) => b.weight - a.weight);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst originalWeights: typeof interimMovePool = [];\r\n\t\t\t\t\tfor (const move of moves) {\r\n\t\t\t\t\t\toriginalWeights.push(interimMovePool.find(m => m.move === move.id)!);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinterimMovePool = originalWeights;\r\n\r\n\t\t\t\t\tfor (const moveID of movePoolCopy) {\r\n\t\t\t\t\t\tconst move = this.dex.moves.get(moveID);\r\n\t\t\t\t\t\tif (moves.includes(move)) continue;\r\n\t\t\t\t\t\tconst weight = this.getMoveWeight(move, teamStats, species, moves, movesStats, ability, level);\r\n\t\t\t\t\t\tinterimMovePool.push({ move: moveID, weight });\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tinterimMovePool.sort((a, b) => b.weight - a.weight);\r\n\t\t\t\t\tmoves.splice(0);\r\n\t\t\t\t\tmovesStats = {\r\n\t\t\t\t\t\tsetup: { atk: 0, def: 0, spa: 0, spd: 0, spe: 0 },\r\n\t\t\t\t\t\tattackTypes: {},\r\n\t\t\t\t\t\tnoSleepTalk: 0,\r\n\t\t\t\t\t\thazards: 0,\r\n\t\t\t\t\t\tstallingMoves: 0,\r\n\t\t\t\t\t\thealing: 0,\r\n\t\t\t\t\t\tnonStatusMoves: 0,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tmovePool = [];\r\n\t\t\t\tweights = [];\r\n\r\n\t\t\t\tfor (let i = 0; i < numberOfMovesToConsider; i++) {\r\n\t\t\t\t\tmovePool.push(interimMovePool[i].move);\r\n\t\t\t\t\tweights.push(interimMovePool[i].weight);\r\n\t\t\t\t}\r\n\t\t\t\tmovePoolIsTrimmed = true;\r\n\t\t\t} else {\r\n\t\t\t\tweights = movePool.map(\r\n\t\t\t\t\tm => this.getMoveWeight(this.dex.moves.get(m), teamStats, species, moves, movesStats, ability, level)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tconst moveID = this.weightedRandomPick(movePool, weights, { remove: true });\r\n\r\n\t\t\tconst move = this.dex.moves.get(moveID);\r\n\t\t\tmoves.push(move);\r\n\t\t\tif (TeamGenerator.moveIsHazard(moves[moves.length - 1])) {\r\n\t\t\t\tteamStats.hazardSetters[moveID] = (teamStats.hazardSetters[moveID] || 0) + 1;\r\n\t\t\t\tmovesStats.hazards++;\r\n\t\t\t}\r\n\t\t\tif (['defog', 'courtchange', 'tidyup', 'rapidspin', 'mortalspin'].includes(moveID)) teamStats.hazardRemovers++;\r\n\t\t\tconst boosts = move.boosts || move.self?.boosts || move.selfBoost?.boosts ||\r\n\t\t\t\tability !== 'Sheer Force' && move.secondary?.self?.boosts;\r\n\t\t\tif (move.category === 'Status') {\r\n\t\t\t\tif (boosts) {\r\n\t\t\t\t\tfor (const stat in boosts) {\r\n\t\t\t\t\t\tconst chance = Math.min(100, move.secondary?.chance || 100 * (ability === 'Serene Grace' ? 2 : 1));\r\n\t\t\t\t\t\tconst boost = (boosts[stat as StatIDExceptHP] || 0) * chance / 100;\r\n\t\t\t\t\t\tif (boost) {\r\n\t\t\t\t\t\t\tif (movesStats.setup[stat as StatIDExceptHP] < 0 && boost > 0) {\r\n\t\t\t\t\t\t\t\tmovesStats.setup[stat as StatIDExceptHP] = boost;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tmovesStats.setup[stat as StatIDExceptHP] += boost;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (boost > 1) movesStats.noSleepTalk++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmovesStats.noSleepTalk++;\r\n\t\t\t\t}\r\n\t\t\t\tif (move.heal) movesStats.healing++;\r\n\t\t\t\tif (move.stallingMove) movesStats.stallingMoves++;\r\n\t\t\t} else {\r\n\t\t\t\tmovesStats.nonStatusMoves++;\r\n\t\t\t\tconst bp = +move.basePower;\r\n\t\t\t\tconst moveType = TeamGenerator.moveType(move, species);\r\n\t\t\t\tif ((movesStats.attackTypes[moveType] || 0) < bp) movesStats.attackTypes[moveType] = bp;\r\n\t\t\t}\r\n\r\n\t\t\tif (!isRound2 && moves.length === 3) {\r\n\t\t\t\tisRound2 = true;\r\n\t\t\t\tmovePoolIsTrimmed = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// add paired moves, like RestTalk\r\n\t\t\tconst pairedMove = MOVE_PAIRINGS[moveID];\r\n\t\t\tconst alreadyHavePairedMove = moves.some(m => m.id === pairedMove);\r\n\t\t\tif (\r\n\t\t\t\tmoves.length < 4 &&\r\n\t\t\t\tpairedMove &&\r\n\t\t\t\t!(pairedMove === 'sleeptalk' && movesStats.noSleepTalk) &&\r\n\t\t\t\t!alreadyHavePairedMove &&\r\n\t\t\t\t// We don't check movePool because sometimes paired moves are bad.\r\n\t\t\t\tthis.dex.species.getLearnsetData(species.id).learnset?.[pairedMove]\r\n\t\t\t) {\r\n\t\t\t\tmoves.push(this.dex.moves.get(pairedMove));\r\n\t\t\t\tconst pairedMoveIndex = movePool.indexOf(pairedMove);\r\n\t\t\t\tif (pairedMoveIndex > -1) movePool.splice(pairedMoveIndex, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet item = '';\r\n\t\tconst nonStatusMoves = moves.filter(m => this.dex.moves.get(m).category !== 'Status');\r\n\t\tif (species.requiredItem) {\r\n\t\t\titem = species.requiredItem;\r\n\t\t} else if (species.requiredItems) {\r\n\t\t\titem = this.prng.sample(species.requiredItems.filter(i => !this.dex.items.get(i).isNonstandard));\r\n\t\t} else if (this.specialItems[species.name] && nonStatusMoves.length) {\r\n\t\t\t// If the species has a special item, we should use it.\r\n\t\t\titem = this.specialItems[species.name];\r\n\t\t} else if (moves.every(m => m.id !== 'acrobatics')) { // Don't assign an item if the set includes Acrobatics...\r\n\t\t\tconst weights = [];\r\n\t\t\tconst items = [];\r\n\t\t\tfor (const i of this.itemPool) {\r\n\t\t\t\tconst weight = this.getItemWeight(i, teamStats, species, moves, ability, level);\r\n\t\t\t\tif (weight !== 0) {\r\n\t\t\t\t\tweights.push(weight);\r\n\t\t\t\t\titems.push(i.name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!item) item = this.weightedRandomPick(items, weights);\r\n\t\t} else if (['Quark Drive', 'Protosynthesis'].includes(ability)) {\r\n\t\t\t// ...unless the Pokemon can use Booster Energy\r\n\t\t\titem = 'Booster Energy';\r\n\t\t}\r\n\r\n\t\tconst ivs: PokemonSet['ivs'] = {\r\n\t\t\thp: 31,\r\n\t\t\tatk: moves.some(move => this.dex.moves.get(move).category === 'Physical') ? 31 : 0,\r\n\t\t\tdef: 31,\r\n\t\t\tspa: 31,\r\n\t\t\tspd: 31,\r\n\t\t\tspe: 31,\r\n\t\t};\r\n\r\n\t\t// For Tera Type, we just pick a random type if it's got Tera Blast, Revelation Dance, or no attacking moves\r\n\t\t// In the latter case, we avoid picking a type the Pokemon already is, and in the other two we avoid picking a\r\n\t\t// type that matches the Pokemon's other moves\r\n\t\t// Otherwise, we pick the type of one of its attacking moves\r\n\t\t// Pokemon with 3 or more attack types and Pokemon with both Tera Blast and Contrary can also get Stellar type\r\n\t\t// but Pokemon with Adaptability never get Stellar because Tera Stellar makes Adaptability have no effect\r\n\t\t// Ogerpon's formes are forced to the Tera type that matches their forme\r\n\t\t// Terapagos is forced to Stellar type\r\n\t\t// Pokemon with Black Sludge don't generally want to tera to a type other than Poison\r\n\t\tconst hasTeraBlast = moves.some(m => m.id === 'terablast');\r\n\t\tconst hasRevelationDance = moves.some(m => m.id === 'revelationdance');\r\n\t\tlet attackingTypes = nonStatusMoves.map(m => TeamGenerator.moveType(this.dex.moves.get(m), species));\r\n\t\tlet teraType;\r\n\t\tif (species.requiredTeraType) {\r\n\t\t\tteraType = species.requiredTeraType;\r\n\t\t} else if (item === 'blacksludge' && this.prng.randomChance(2, 3)) {\r\n\t\t\tteraType = 'Poison';\r\n\t\t} else if (hasTeraBlast && ability === 'Contrary' && this.prng.randomChance(2, 3)) {\r\n\t\t\tteraType = 'Stellar';\r\n\t\t} else {\r\n\t\t\tconst noStellar = ability === 'Adaptability' || new Set(attackingTypes).size < 3;\r\n\t\t\tconst noAttacks = !nonStatusMoves.length;\r\n\t\t\tif (hasTeraBlast || hasRevelationDance || noAttacks) {\r\n\t\t\t\tattackingTypes = this.dex.types.names().filter(t => !(noAttacks ? species.types : attackingTypes).includes(t));\r\n\t\t\t\tif (noStellar) attackingTypes.splice(attackingTypes.indexOf('Stellar'));\r\n\t\t\t} else {\r\n\t\t\t\tif (!noStellar) attackingTypes.push('Stellar');\r\n\t\t\t}\r\n\t\t\tteraType = this.prng.sample(attackingTypes);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tname: species.name,\r\n\t\t\tspecies: species.name,\r\n\t\t\titem,\r\n\t\t\tability,\r\n\t\t\tmoves: moves.map(m => m.name),\r\n\t\t\tnature: 'Quirky',\r\n\t\t\tgender: species.gender,\r\n\t\t\tevs: { hp: 84, atk: 84, def: 84, spa: 84, spd: 84, spe: 84 },\r\n\t\t\tivs,\r\n\t\t\tlevel,\r\n\t\t\tteraType,\r\n\t\t\tshiny: this.prng.randomChance(1, 1024),\r\n\t\t\thappiness: 255,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @returns true if the Pok\u00E9mon is a good fit for the team so far, and no otherwise\r\n\t */\r\n\tprotected speciesIsGoodFit(species: Species, stats: TeamStats): boolean {\r\n\t\t// type check\r\n\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\tconst effectiveness = this.dex.getEffectiveness(typeName, species.types);\r\n\t\t\tif (effectiveness === 1) { // WEAKNESS!\r\n\t\t\t\tif (stats.typeWeaknesses[typeName] === undefined) {\r\n\t\t\t\t\tstats.typeWeaknesses[typeName] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif (stats.typeWeaknesses[typeName] >= MAX_WEAK_TO_SAME_TYPE) {\r\n\t\t\t\t\t// too many weaknesses to this type\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// species passes; increment counters\r\n\t\tfor (const typeName of this.dex.types.names()) {\r\n\t\t\tconst effectiveness = this.dex.getEffectiveness(typeName, species.types);\r\n\t\t\tif (effectiveness === 1) {\r\n\t\t\t\tstats.typeWeaknesses[typeName]++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A weighting for the Pok\u00E9mon's ability.\r\n\t */\r\n\tprotected getAbilityWeight(ability: Ability): number {\r\n\t\treturn ability.rating + 1; // Some ability ratings are -1\r\n\t}\r\n\r\n\tprotected static moveIsHazard(move: Move): boolean {\r\n\t\treturn !!(move.sideCondition && move.target === 'foeSide') || ['stoneaxe', 'ceaselessedge'].includes(move.id);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A weight for a given move on a given Pok\u00E9mon.\r\n\t */\r\n\tprotected getMoveWeight(\r\n\t\tmove: Move,\r\n\t\tteamStats: TeamStats,\r\n\t\tspecies: Species,\r\n\t\tmovesSoFar: Move[],\r\n\t\tmovesStats: MovesStats,\r\n\t\tability: string,\r\n\t\tlevel: number,\r\n\t): number {\r\n\t\tif (!move.exists) return 0;\r\n\t\t// this is NOT doubles, so there will be no adjacent ally\r\n\t\tif (move.target === 'adjacentAlly') return 0;\r\n\r\n\t\t// There's an argument to be made for using Terapagos-Stellar's stats instead\r\n\t\t// but the important thing is to not use Terapagos-Base's stats since it never battles in that forme\r\n\t\tif (ability === 'Tera Shift') species = this.dex.species.get('Terapagos-Terastal');\r\n\r\n\t\t// Attack and Special Attack are scaled by level^2 because in addition to stats themselves being scaled by level,\r\n\t\t// damage dealt by attacks is also scaled by the user's level\r\n\t\tconst adjustedStats: StatsTable = {\r\n\t\t\thp: species.baseStats.hp * level / 100 + level,\r\n\t\t\tatk: species.baseStats.atk * level * level / 10000,\r\n\t\t\tdef: species.baseStats.def * level / 100,\r\n\t\t\tspa: species.baseStats.spa * level * level / 10000,\r\n\t\t\tspd: species.baseStats.spd * level / 100,\r\n\t\t\tspe: species.baseStats.spe * level / 100,\r\n\t\t};\r\n\r\n\t\tif (move.category === 'Status') {\r\n\t\t\t// The initial value of this weight determines how valuable status moves are vs. attacking moves.\r\n\t\t\t// You can raise it to make random status moves more valuable or lower it and increase multipliers\r\n\t\t\t// to make only CERTAIN status moves valuable.\r\n\t\t\tlet weight = 2400;\r\n\r\n\t\t\t// inflicts status\r\n\t\t\tif (move.status) weight *= TeamGenerator.statusWeight(move.status) * 2;\r\n\r\n\t\t\t// hazard setters: very important, but we don't need 2 pokemon to set the same hazard on a team\r\n\t\t\tif (TeamGenerator.moveIsHazard(move) && (teamStats.hazardSetters[move.id] || 0) < 1) {\r\n\t\t\t\tweight *= move.id === 'spikes' ? 12 : 16;\r\n\r\n\t\t\t\t// if we are ALREADY setting hazards, setting MORE is really good\r\n\t\t\t\tif (movesStats.hazards) weight *= 2;\r\n\t\t\t}\r\n\r\n\t\t\t// hazard removers: even more important than hazard setters, since they remove everything at once\r\n\t\t\t// we still don't need too many on one team, though\r\n\t\t\tif (['defog', 'courtchange', 'tidyup'].includes(move.id) && !teamStats.hazardRemovers) {\r\n\t\t\t\tweight *= 32;\r\n\r\n\t\t\t\t// these moves can also lessen the effectiveness of the user's team's own hazards\r\n\t\t\t\tweight *= 0.8 ** Object.values(teamStats.hazardSetters).reduce((total, num) => total + num, 0);\r\n\t\t\t}\r\n\r\n\t\t\t// boosts\r\n\t\t\tweight *= this.boostWeight(move, movesSoFar, species, ability, level);\r\n\t\t\tweight *= this.opponentDebuffWeight(move);\r\n\r\n\t\t\t// nonstandard boosting moves\r\n\t\t\tif (move.id === 'focusenergy' && ability !== 'Super Luck') {\r\n\t\t\t\tconst highCritMoves = movesSoFar.filter(m => m.critRatio && m.critRatio > 1);\r\n\t\t\t\tweight *= 1 + highCritMoves.length * (ability === 'Sniper' ? 2 : 1);\r\n\t\t\t} else if (move.id === 'tailwind' && ability === 'Wind Rider' && movesSoFar.some(m => m.category === 'Physical')) {\r\n\t\t\t\tweight *= 2.5; // grants +1 attack, but isn't spammable\r\n\t\t\t}\r\n\r\n\t\t\t// protection moves - useful for bulky/stally pokemon\r\n\t\t\tif (!movesStats.stallingMoves) {\r\n\t\t\t\tif (adjustedStats.def >= 80 || adjustedStats.spd >= 80 || adjustedStats.hp >= 80) {\r\n\t\t\t\t\tswitch (move.volatileStatus) {\r\n\t\t\t\t\tcase 'endure':\r\n\t\t\t\t\t\tweight *= 2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'protect':\r\n\t\t\t\t\t\tweight *= 3;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'kingsshield': case 'silktrap':\r\n\t\t\t\t\t\tweight *= 4;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'banefulbunker': case 'burningbulwark': case 'spikyshield':\r\n\t\t\t\t\t\tweight *= 5;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Hardcoded boosts\r\n\t\t\tif (move.id in HARDCODED_MOVE_WEIGHTS) weight *= HARDCODED_MOVE_WEIGHTS[move.id];\r\n\r\n\t\t\t// Rest and Sleep Talk are pretty bad on Pokemon that can't fall asleep\r\n\t\t\tconst sleepImmunities = [\r\n\t\t\t\t'Comatose',\r\n\t\t\t\t'Purifying Salt',\r\n\t\t\t\t'Shields Down',\r\n\t\t\t\t'Insomnia',\r\n\t\t\t\t'Vital Spirit',\r\n\t\t\t\t'Sweet Veil',\r\n\t\t\t\t'Misty Surge',\r\n\t\t\t\t'Electric Surge',\r\n\t\t\t\t'Hadron Engine',\r\n\t\t\t];\r\n\t\t\tif (['sleeptalk', 'rest'].includes(move.id) && sleepImmunities.includes(ability)) return 0;\r\n\r\n\t\t\t// Sleep Talk is bad with moves that can't be used repeatedly, a.k.a. most status moves\r\n\t\t\t// the exceptions allowed here are moves which boost a stat by exactly 1 and moves that wake the user up\r\n\t\t\tif (move.id === 'sleeptalk') {\r\n\t\t\t\tif (movesStats.noSleepTalk) weight *= 0.1;\r\n\t\t\t} else if (movesSoFar.some(m => m.id === 'sleeptalk')) {\r\n\t\t\t\tlet sleepTalkSpammable = ['takeheart', 'junglehealing', 'healbell'].includes(move.id);\r\n\t\t\t\tif (move.boosts) {\r\n\t\t\t\t\tfor (const stat in move.boosts) {\r\n\t\t\t\t\t\tif (move.boosts[stat as StatIDExceptHP] === 1) {\r\n\t\t\t\t\t\t\tsleepTalkSpammable = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!sleepTalkSpammable) weight *= 0.1;\r\n\t\t\t}\r\n\r\n\t\t\t// Pok\u00E9mon with high Attack and Special Attack stats shouldn't have too many status moves,\r\n\t\t\t// but on bulkier Pok\u00E9mon it's more likely to be worth it.\r\n\t\t\tconst goodAttacker = adjustedStats.atk > 65 || adjustedStats.spa > 65;\r\n\t\t\tif (goodAttacker && movesStats.nonStatusMoves < 2) {\r\n\t\t\t\tweight *= 0.3;\r\n\t\t\t}\r\n\r\n\t\t\tif (movesSoFar.length === 3 && movesStats.nonStatusMoves === 0) {\r\n\t\t\t\t// uh oh\r\n\t\t\t\tweight *= 0.6;\r\n\t\t\t\tfor (const stat in movesStats.setup) {\r\n\t\t\t\t\tif (movesStats.setup[stat as StatIDExceptHP] > 0) {\r\n\t\t\t\t\t\t// having no attacks is bad; having setup but no attacks is REALLY bad\r\n\t\t\t\t\t\tweight *= 0.6;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// don't need 2 healing moves\r\n\t\t\tif (move.heal && movesStats.healing) weight *= 0.5;\r\n\r\n\t\t\treturn weight;\r\n\t\t}\r\n\r\n\t\tlet basePower = move.basePower;\r\n\t\t// For Grass Knot and friends, let's just assume they average out to around 60 base power.\r\n\t\t// Same with Crush Grip and Hard Press\r\n\t\tif (WEIGHT_BASED_MOVES.includes(move.id) || TARGET_HP_BASED_MOVES.includes(move.id)) basePower = 60;\r\n\t\t/** A value from 0 to 1, where 0 is the fastest and 1 is the slowest */\r\n\t\tconst slownessRating = Math.max(0, TOP_SPEED - adjustedStats.spe) / TOP_SPEED;\r\n\t\t// not how this calc works but it should be close enough\r\n\t\tif (move.id === 'gyroball') basePower = 150 * slownessRating * slownessRating;\r\n\t\tif (move.id === 'electroball') basePower = 150 * (1 - slownessRating) * (1 - slownessRating);\r\n\r\n\t\tlet baseStat = move.category === 'Physical' ? adjustedStats.atk : adjustedStats.spa;\r\n\t\tif (move.id === 'foulplay') baseStat = adjustedStats.spe * level / 100;\r\n\t\tif (move.id === 'bodypress') baseStat = adjustedStats.def * level / 100;\r\n\t\t// 10% bonus for never-miss moves\r\n\t\tlet accuracy = move.accuracy === true || ability === 'No Guard' ? 110 : move.accuracy;\r\n\t\tif (accuracy < 100) {\r\n\t\t\tif (ability === 'Compound Eyes') accuracy = Math.min(100, Math.round(accuracy * 1.3));\r\n\t\t\tif (ability === 'Victory Star') accuracy = Math.min(100, Math.round(accuracy * 1.1));\r\n\t\t}\r\n\t\taccuracy /= 100;\r\n\r\n\t\tconst moveType = TeamGenerator.moveType(move, species);\r\n\r\n\t\tlet powerEstimate = basePower * baseStat * accuracy;\r\n\t\t// STAB\r\n\t\tif (species.types.includes(moveType)) powerEstimate *= ability === 'Adaptability' ? 2 : 1.5;\r\n\t\tif (ability === 'Technician' && move.basePower <= 60) powerEstimate *= 1.5;\r\n\t\tif (ability === 'Sheer Force' && (move.secondary || move.secondaries)) powerEstimate *= 1.3;\r\n\t\tconst numberOfHits = Array.isArray(move.multihit) ?\r\n\t\t\t(ability === 'Skill Link' ? move.multihit[1] : (move.multihit[0] + move.multihit[1]) / 2) :\r\n\t\t\tmove.multihit || 1;\r\n\t\tpowerEstimate *= numberOfHits;\r\n\r\n\t\tif (species.requiredItems) {\r\n\t\t\tconst item: Item & EventMethods = this.dex.items.get(this.specialItems[species.name]);\r\n\t\t\tif (item.onBasePower && (species.types.includes(moveType) || item.name.endsWith('Mask'))) powerEstimate *= 1.2;\r\n\t\t} else if (this.specialItems[species.name]) {\r\n\t\t\tconst item: Item & EventMethods = this.dex.items.get(this.specialItems[species.name]);\r\n\t\t\tif (item.onBasePower && species.types.includes(moveType)) powerEstimate *= 1.2;\r\n\t\t\tif (item.id === 'lightball') powerEstimate *= 2;\r\n\t\t}\r\n\r\n\t\t// If it uses the attacking stat that we don't boost, it's less useful!\r\n\t\tconst specialSetup = movesStats.setup.spa;\r\n\t\tconst physicalSetup = movesStats.setup.atk;\r\n\t\tif (move.category === 'Physical' && !['bodypress', 'foulplay'].includes(move.id)) {\r\n\t\t\tpowerEstimate *= Math.max(0.5, 1 + physicalSetup) / Math.max(0.5, 1 + specialSetup);\r\n\t\t}\r\n\t\tif (move.category === 'Special') powerEstimate *= Math.max(0.5, 1 + specialSetup) / Math.max(0.5, 1 + physicalSetup);\r\n\r\n\t\tlet abilityBonus = (\r\n\t\t\t(ABILITY_MOVE_BONUSES[this.dex.toID(ability)]?.[move.id] || 1) *\r\n\t\t\t(ABILITY_MOVE_TYPE_BONUSES[this.dex.toID(ability)]?.[moveType] || 1)\r\n\t\t);\r\n\r\n\t\tconst missilePrimers = ['surf', 'dive'];\r\n\t\tif (ability === 'Gulp Missile' && missilePrimers.includes(move.id)) {\r\n\t\t\t// we want exactly one move that activates gulp missile\r\n\t\t\tif (!movesSoFar.find(m => m.id === (missilePrimers.find(p => p !== move.id)))) {\r\n\t\t\t\tabilityBonus = 3;\r\n\t\t\t} else {\r\n\t\t\t\tabilityBonus = 0.75;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet weight = powerEstimate * abilityBonus;\r\n\t\tif (move.id in HARDCODED_MOVE_WEIGHTS) weight *= HARDCODED_MOVE_WEIGHTS[move.id];\r\n\t\t// semi-hardcoded move weights that depend on having control over the item\r\n\t\tif (!this.specialItems[species.name] && !species.requiredItem) {\r\n\t\t\tif (move.id === 'acrobatics') weight *= 1.75;\r\n\t\t\tif (move.id === 'facade') {\r\n\t\t\t\tif (!['Comatose', 'Purifying Salt', 'Shields Down', 'Natural Cure', 'Misty Surge'].includes(ability)) weight *= 1.5;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// priority is more useful when you're slower\r\n\t\t// except Upper Hand, which is anti-priority and thus better on faster Pokemon\r\n\t\t// TODO: make weight scale with priority\r\n\t\tif (move.priority > 0 && move.id !== 'upperhand') weight *= (Math.max(105 - adjustedStats.spe, 0) / 105) * 0.5 + 1;\r\n\t\tif (move.priority < 0 || move.id === 'upperhand') weight *= Math.min((1 / adjustedStats.spe) * 25, 1);\r\n\r\n\t\t// flags\r\n\t\tif (move.flags.charge || (move.flags.recharge && ability !== 'Truant')) weight *= 0.5;\r\n\t\tif (move.flags.contact) {\r\n\t\t\tif (ability === 'Tough Claws') weight *= 1.3;\r\n\t\t\tif (ability === 'Unseen Fist') weight *= 1.1;\r\n\t\t\tif (ability === 'Poison Touch') weight *= TeamGenerator.statusWeight('psn', 1 - (0.7 ** numberOfHits));\r\n\t\t}\r\n\t\tif (move.flags.bite && ability === 'Strong Jaw') weight *= 1.5;\r\n\t\t// 5% boost for ability to bypass subs\r\n\t\tif (move.flags.bypasssub) weight *= 1.05;\r\n\t\tif (move.flags.pulse && ability === 'Mega Launcher') weight *= 1.5;\r\n\t\tif (move.flags.punch && ability === 'Iron Fist') weight *= 1.2;\r\n\t\tif (!move.flags.protect) weight *= 1.05;\r\n\t\tif (move.flags.slicing && ability === 'Sharpness') weight *= 1.5;\r\n\t\tif (move.flags.sound && ability === 'Punk Rock') weight *= 1.3;\r\n\r\n\t\t// boosts/secondaries\r\n\t\t// TODO: consider more possible secondaries\r\n\t\tweight *= this.boostWeight(move, movesSoFar, species, ability, level);\r\n\t\tconst secondaryChance = Math.min((move.secondary?.chance || 100) * (ability === 'Serene Grace' ? 2 : 1) / 100, 100);\r\n\t\tif (move.secondary || move.secondaries) {\r\n\t\t\tif (ability === 'Sheer Force') {\r\n\t\t\t\tweight *= 1.3;\r\n\t\t\t} else {\r\n\t\t\t\tconst secondaries = move.secondaries || [move.secondary!];\r\n\t\t\t\tfor (const secondary of secondaries) {\r\n\t\t\t\t\tif (secondary.status) {\r\n\t\t\t\t\t\tweight *= TeamGenerator.statusWeight(secondary.status, secondaryChance, slownessRating);\r\n\t\t\t\t\t\tif (ability === 'Poison Puppeteer' && ['psn', 'tox'].includes(secondary.status)) {\r\n\t\t\t\t\t\t\tweight *= TeamGenerator.statusWeight('confusion', secondaryChance);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (secondary.volatileStatus) {\r\n\t\t\t\t\t\tweight *= TeamGenerator.statusWeight(secondary.volatileStatus, secondaryChance, slownessRating);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ability === 'Toxic Chain') weight *= TeamGenerator.statusWeight('tox', 1 - (0.7 ** numberOfHits));\r\n\r\n\t\t// Special effect if something special happened earlier in the turn\r\n\t\t// More useful on slower Pokemon\r\n\t\tif (move.id === 'lashout') weight *= 1 + 0.2 * slownessRating;\r\n\t\tif (move.id === 'burningjealousy') weight *= TeamGenerator.statusWeight('brn', 0.2 * slownessRating);\r\n\t\tif (move.id === 'alluringvoice') weight *= TeamGenerator.statusWeight('confusion', 0.2 * slownessRating);\r\n\r\n\t\t// self-inflicted confusion or locking yourself in\r\n\t\tif (move.self?.volatileStatus) weight *= 0.8;\r\n\r\n\t\t// downweight moves if we already have an attacking move of the same type\r\n\t\tif ((movesStats.attackTypes[moveType] || 0) > 60) weight *= 0.5;\r\n\r\n\t\tif (move.selfdestruct) weight *= 0.3;\r\n\t\tif (move.recoil && ability !== 'Rock Head' && ability !== 'Magic Guard') {\r\n\t\t\tweight *= 1 - (move.recoil[0] / move.recoil[1]);\r\n\t\t\tif (ability === 'Reckless') weight *= 1.2;\r\n\t\t}\r\n\t\tif (move.hasCrashDamage && ability !== 'Magic Guard') {\r\n\t\t\tweight *= 1 - 0.75 * (1.2 - accuracy);\r\n\t\t\tif (ability === 'Reckless') weight *= 1.2;\r\n\t\t}\r\n\t\tif (move.mindBlownRecoil) weight *= 0.25;\r\n\t\tif (move.flags['futuremove']) weight *= 0.3;\r\n\r\n\t\tlet critRate = move.willCrit ? 4 : move.critRatio || 1;\r\n\t\tif (ability === 'Super Luck') critRate++;\r\n\t\tif (movesSoFar.some(m => m.id === 'focusenergy')) {\r\n\t\t\tcritRate += 2;\r\n\t\t\tweight *= 0.9; // a penalty the extra turn of setup\r\n\t\t}\r\n\t\tif (critRate > 4) critRate = 4;\r\n\t\tweight *= 1 + [0, 1 / 24, 1 / 8, 1 / 2, 1][critRate] * (ability === 'Sniper' ? 1 : 0.5);\r\n\r\n\t\t// these two hazard removers don't clear hazards on the opponent's field, but can be blocked by type immunities\r\n\t\tif (['rapidspin', 'mortalspin'].includes(move.id)) {\r\n\t\t\tweight *= 1 + 20 * (0.25 ** teamStats.hazardRemovers);\r\n\t\t}\r\n\r\n\t\t// these moves have a hard-coded 16x bonus\r\n\t\tif (move.id === 'stoneaxe' && teamStats.hazardSetters.stealthrock) weight /= 4;\r\n\t\tif (move.id === 'ceaselessedge' && teamStats.hazardSetters.spikes) weight /= 2;\r\n\r\n\t\tif (move.drain) {\r\n\t\t\tconst drainedFraction = move.drain[0] / move.drain[1];\r\n\t\t\tweight *= 1 + (drainedFraction * 0.5);\r\n\t\t}\r\n\r\n\t\t// Oricorio should rarely get Tera Blast, as Revelation Dance is strictly better\r\n\t\t// Tera Blast is also bad on species with forced Tera types, a.k.a. Ogerpon and Terapagos\r\n\t\tif (move.id === 'terablast' && (species.baseSpecies === 'Oricorio' || species.requiredTeraType)) weight *= 0.5;\r\n\r\n\t\treturn weight;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns The effective type of moves with variable types such as Judgment\r\n\t */\r\n\tprotected static moveType(move: Move, species: Species) {\r\n\t\tswitch (move.id) {\r\n\t\tcase 'ivycudgel':\r\n\t\tcase 'ragingbull':\r\n\t\t\tif (species.types.length > 1) return species.types[1];\r\n\t\t\t// falls through for Ogerpon and Tauros's respective base formes\r\n\t\tcase 'judgment':\r\n\t\tcase 'revelationdance':\r\n\t\t\treturn species.types[0];\r\n\t\t}\r\n\t\treturn move.type;\r\n\t}\r\n\r\n\tprotected static moveIsPhysical(move: Move, species: Species) {\r\n\t\tif (move.category === 'Physical') {\r\n\t\t\treturn !(move.damageCallback || move.damage);\r\n\t\t} else if (['terablast', 'terastarstorm', 'photongeyser', 'shellsidearm'].includes(move.id)) {\r\n\t\t\treturn species.baseStats.atk > species.baseStats.spa;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected static moveIsSpecial(move: Move, species: Species) {\r\n\t\tif (move.category === 'Special') {\r\n\t\t\treturn !(move.damageCallback || move.damage);\r\n\t\t} else if (['terablast', 'terastarstorm', 'photongeyser', 'shellsidearm'].includes(move.id)) {\r\n\t\t\treturn species.baseStats.atk <= species.baseStats.spa;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A multiplier to a move weighting based on the status it inflicts.\r\n\t */\r\n\tprotected static statusWeight(status: string, chance = 1, slownessRating?: number): number {\r\n\t\tif (chance !== 1) return 1 + (TeamGenerator.statusWeight(status) - 1) * chance;\r\n\r\n\t\tswitch (status) {\r\n\t\tcase 'brn': return 2;\r\n\t\tcase 'frz': return 5;\r\n\t\t// paralysis is especially valuable on slow pokemon that can become faster than an opponent by paralyzing it\r\n\t\t// but some pokemon are so slow that most paralyzed pokemon would still outspeed them anyway\r\n\t\tcase 'par': return slownessRating && slownessRating > 0.25 ? 2 + slownessRating : 2;\r\n\t\tcase 'psn': return 1.75;\r\n\t\tcase 'tox': return 4;\r\n\t\tcase 'slp': return 4;\r\n\t\tcase 'confusion': return 1.5;\r\n\t\tcase 'healblock': return 1.75;\r\n\t\tcase 'flinch': return slownessRating ? slownessRating * 3 : 1;\r\n\t\tcase 'saltcure': return 2;\r\n\t\tcase 'sparklingaria': return 0.95;\r\n\t\tcase 'syrupbomb': return 1.5;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A multiplier to a move weighting based on the boosts it produces for the user.\r\n\t */\r\n\tprotected boostWeight(move: Move, movesSoFar: Move[], species: Species, ability: string, level: number): number {\r\n\t\tconst physicalIsRelevant = (\r\n\t\t\tTeamGenerator.moveIsPhysical(move, species) ||\r\n\t\t\tmovesSoFar.some(\r\n\t\t\t\tm => TeamGenerator.moveIsPhysical(m, species) && !m.overrideOffensiveStat && !m.overrideOffensivePokemon\r\n\t\t\t)\r\n\t\t);\r\n\t\tconst specialIsRelevant = (\r\n\t\t\tTeamGenerator.moveIsSpecial(move, species) ||\r\n\t\t\tmovesSoFar.some(m => TeamGenerator.moveIsSpecial(m, species))\r\n\t\t);\r\n\r\n\t\tconst adjustedStats: StatsTable = {\r\n\t\t\thp: species.baseStats.hp * level / 100 + level,\r\n\t\t\tatk: species.baseStats.atk * level * level / 10000,\r\n\t\t\tdef: species.baseStats.def * level / 100,\r\n\t\t\tspa: species.baseStats.spa * level * level / 10000,\r\n\t\t\tspd: species.baseStats.spd * level / 100,\r\n\t\t\tspe: species.baseStats.spe * level / 100,\r\n\t\t};\r\n\r\n\t\tlet weight = 0;\r\n\t\tconst accuracy = move.accuracy === true ? 100 : move.accuracy / 100;\r\n\t\tconst secondaryChance = move.secondary && ability !== 'Sheer Force' ?\r\n\t\t\tMath.min(((move.secondary.chance || 100) * (ability === 'Serene Grace' ? 2 : 1) / 100), 100) * accuracy : 0;\r\n\t\tconst abilityMod = ability === 'Simple' ? 2 : ability === 'Contrary' ? -1 : 1;\r\n\t\tconst bodyPressMod = movesSoFar.some(m => m.id === 'bodyPress') ? 2 : 1;\r\n\t\tconst electroBallMod = movesSoFar.some(m => m.id === 'electroball') ? 2 : 1;\r\n\t\tfor (const { chance, boosts } of [\r\n\t\t\t{ chance: 1, boosts: move.boosts },\r\n\t\t\t{ chance: 1, boosts: move.self?.boosts },\r\n\t\t\t{ chance: 1, boosts: move.selfBoost?.boosts },\r\n\t\t\t{\r\n\t\t\t\tchance: secondaryChance,\r\n\t\t\t\tboosts: move.secondary?.self?.boosts,\r\n\t\t\t},\r\n\t\t]) {\r\n\t\t\tif (!boosts || chance === 0) continue;\r\n\t\t\tconst statusMod = move.category === 'Status' ? 1 : 0.5;\r\n\r\n\t\t\tif (boosts.atk && physicalIsRelevant) weight += chance * boosts.atk * abilityMod * 2 * statusMod;\r\n\t\t\tif (boosts.spa && specialIsRelevant) weight += chance * boosts.spa * abilityMod * 2 * statusMod;\r\n\r\n\t\t\t// TODO: should these scale by base stat magnitude instead of using ternaries?\r\n\t\t\t// defense/special defense boost is less useful if we have some bulk to start with\r\n\t\t\tif (boosts.def) {\r\n\t\t\t\tweight += chance * boosts.def * abilityMod * bodyPressMod * (adjustedStats.def > 60 ? 0.5 : 1) * statusMod;\r\n\t\t\t}\r\n\t\t\tif (boosts.spd) weight += chance * boosts.spd * abilityMod * (adjustedStats.spd > 60 ? 0.5 : 1) * statusMod;\r\n\r\n\t\t\t// speed boost is less useful for fast pokemon\r\n\t\t\tif (boosts.spe) {\r\n\t\t\t\tweight += chance * boosts.spe * abilityMod * electroBallMod * (adjustedStats.spe > 95 ? 0.5 : 1) * statusMod;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn weight >= 0 ? 1 + weight : 1 / (1 - weight);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A weight for a move based on how much it will reduce the opponent's stats.\r\n\t */\r\n\tprotected opponentDebuffWeight(move: Move): number {\r\n\t\tif (!['allAdjacentFoes', 'allAdjacent', 'foeSide', 'normal'].includes(move.target)) return 1;\r\n\r\n\t\tlet averageNumberOfDebuffs = 0;\r\n\t\tfor (const { chance, boosts } of [\r\n\t\t\t{ chance: 1, boosts: move.boosts },\r\n\t\t\t{\r\n\t\t\t\tchance: move.secondary ? ((move.secondary.chance || 100) / 100) : 0,\r\n\t\t\t\tboosts: move.secondary?.boosts,\r\n\t\t\t},\r\n\t\t]) {\r\n\t\t\tif (!boosts || chance === 0) continue;\r\n\r\n\t\t\tconst numBoosts = Object.values(boosts).filter(x => x < 0).length;\r\n\t\t\taverageNumberOfDebuffs += chance * numBoosts;\r\n\t\t}\r\n\r\n\t\treturn 1 + (0.5 * averageNumberOfDebuffs);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns A weight for an item.\r\n\t */\r\n\tprotected getItemWeight(\r\n\t\titem: Item, teamStats: TeamStats, species: Species, moves: Move[], ability: string, level: number\r\n\t): number {\r\n\t\tconst adjustedStats: StatsTable = {\r\n\t\t\thp: species.baseStats.hp * level / 100 + level,\r\n\t\t\tatk: species.baseStats.atk * level * level / 10000,\r\n\t\t\tdef: species.baseStats.def * level / 100,\r\n\t\t\tspa: species.baseStats.spa * level * level / 10000,\r\n\t\t\tspd: species.baseStats.spd * level / 100,\r\n\t\t\tspe: species.baseStats.spe * level / 100,\r\n\t\t};\r\n\t\tconst statusImmunities = ['Comatose', 'Purifying Salt', 'Shields Down', 'Natural Cure', 'Misty Surge'];\r\n\r\n\t\tlet weight;\r\n\t\tswitch (item.id) {\r\n\t\t// Choice Items\r\n\t\tcase 'choiceband':\r\n\t\t\treturn moves.every(x => TeamGenerator.moveIsPhysical(x, species) && x.priority < 3) ? 50 : 0;\r\n\t\tcase 'choicespecs':\r\n\t\t\treturn moves.every(x => TeamGenerator.moveIsSpecial(x, species)) ? 50 : 0;\r\n\t\tcase 'choicescarf':\r\n\t\t\tif (moves.some(x => x.category === 'Status' || x.secondary?.self?.boosts?.spe || x.priority > 1)) return 0;\r\n\t\t\tif (adjustedStats.spe > 50 && adjustedStats.spe < 120) return 50;\r\n\t\t\treturn 10;\r\n\r\n\t\t// Generally Decent Items\r\n\t\tcase 'lifeorb':\r\n\t\t\treturn moves.filter(x => x.category !== 'Status' && !x.damage && !x.damageCallback).length * 8;\r\n\t\tcase 'focussash':\r\n\t\t\tif (ability === 'Sturdy') return 0;\r\n\t\t\t// frail\r\n\t\t\tif (adjustedStats.hp < 65 && adjustedStats.def < 65 && adjustedStats.spd < 65) return 35;\r\n\t\t\treturn 10;\r\n\t\tcase 'heavydutyboots':\r\n\t\t\tswitch (this.dex.getEffectiveness('Rock', species)) {\r\n\t\t\tcase 2: return 50; // double super effective\r\n\t\t\tcase 1: return 30; // super effective\r\n\t\t\tcase 0: return 10; // neutral\r\n\t\t\t}\r\n\t\t\treturn 5; // not very effective/other\r\n\t\tcase 'assaultvest':\r\n\t\t\tif (moves.some(x => x.category === 'Status')) return 0;\r\n\t\t\treturn 30;\r\n\t\tcase 'scopelens':\r\n\t\t\tconst attacks = moves.filter(x => x.category !== 'Status' && !x.damage && !x.damageCallback && !x.willCrit);\r\n\t\t\tif (moves.some(m => m.id === 'focusenergy')) {\r\n\t\t\t\tif (ability === 'Super Luck') return 0; // we're already lucky enough, thank you\r\n\t\t\t\treturn attacks.length * (ability === 'Sniper' ? 16 : 12);\r\n\t\t\t} else if (attacks.filter(x => (x.critRatio || 1) > 1).length || ability === 'Super Luck') {\r\n\t\t\t\treturn attacks.reduce((total, x) => {\r\n\t\t\t\t\tlet ratio = ability === 'Super Luck' ? 2 : 1;\r\n\t\t\t\t\tif ((x.critRatio || 1) > 1) ratio++;\r\n\t\t\t\t\treturn total + [0, 3, 6, 12][ratio] * (ability === 'Sniper' ? 4 / 3 : 1);\r\n\t\t\t\t}, 0);\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\tcase 'eviolite':\r\n\t\t\treturn species.nfe || species.id === 'dipplin' ? 100 : 0;\r\n\r\n\t\t// status\r\n\t\tcase 'flameorb':\r\n\t\t\tif (species.types.includes('Fire')) return 0;\r\n\t\t\tif (statusImmunities.includes(ability)) return 0;\r\n\t\t\tif (['Thermal Exchange', 'Water Bubble', 'Water Veil'].includes(ability)) return 0;\r\n\t\t\tweight = ['Guts', 'Flare Boost'].includes(ability) ? 30 : 0;\r\n\t\t\tif (moves.some(m => m.id === 'facade')) {\r\n\t\t\t\tif (!weight && !moves.some(m => TeamGenerator.moveIsPhysical(m, species) && m.id !== 'facade')) {\r\n\t\t\t\t\tweight = 30;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tweight *= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn weight;\r\n\t\tcase 'toxicorb':\r\n\t\t\tif (species.types.includes('Poison') || species.types.includes('Steel')) return 0;\r\n\t\t\tif (statusImmunities.includes(ability)) return 0;\r\n\t\t\tif (ability === 'Immunity') return 0;\r\n\t\t\t// If facade is our only physical attack, Flame Orb is preferred\r\n\t\t\tif (!moves.some(m => TeamGenerator.moveIsPhysical(m, species) && m.id !== 'facade') &&\r\n\t\t\t\t!species.types.includes('Fire') && ['Thermal Exchange', 'Water Bubble', 'Water Veil'].includes(ability)\r\n\t\t\t) return 0;\r\n\r\n\t\t\tweight = 0;\r\n\t\t\tif (['Poison Heal', 'Toxic Boost'].includes('ability')) weight += 25;\r\n\t\t\tif (moves.some(m => m.id === 'facade')) weight += 25;\r\n\r\n\t\t\treturn weight;\r\n\r\n\t\t// Healing\r\n\t\tcase 'leftovers':\r\n\t\t\treturn moves.some(m => m.stallingMove) ? 40 : 20;\r\n\t\tcase 'blacksludge':\r\n\t\t\t// Even poison types don't really like Black Sludge in Gen 9 because it discourages them from terastallizing\r\n\t\t\t// to a type other than Poison, and thus reveals their Tera type when it activates\r\n\t\t\treturn species.types.includes('Poison') ? moves.some(m => m.stallingMove) ? 20 : 10 : 0;\r\n\r\n\t\t// berries\r\n\t\tcase 'sitrusberry': case 'magoberry':\r\n\t\t\treturn 20;\r\n\r\n\t\tcase 'throatspray':\r\n\t\t\tif (moves.some(m => m.flags.sound) && moves.some(m => m.category === 'Special')) return 30;\r\n\t\t\treturn 0;\r\n\r\n\t\tdefault:\r\n\t\t\t// probably not a very good item\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns The level a Pok\u00E9mon should be.\r\n\t */\r\n\tprotected static getLevel(species: Species): number {\r\n\t\tif (['Zacian', 'Zamazenta'].includes(species.name)) {\r\n\t\t\tspecies = Dex.species.get(species.otherFormes![0]);\r\n\t\t} else if (species.baseSpecies === 'Squawkabilly') {\r\n\t\t\tif (['Yellow', 'White'].includes(species.forme)) {\r\n\t\t\t\tspecies = Dex.species.get('Squawkabilly-Yellow');\r\n\t\t\t} else {\r\n\t\t\t\tspecies = Dex.species.get('Squawkabilly');\r\n\t\t\t}\r\n\t\t} else if (useBaseSpecies.includes(species.baseSpecies)) {\r\n\t\t\tspecies = Dex.species.get(species.baseSpecies);\r\n\t\t}\r\n\t\tif (levelOverride[species.id]) return levelOverride[species.id];\r\n\r\n\t\tswitch (species.tier) {\r\n\t\tcase 'AG': return 60;\r\n\t\tcase 'Uber': return 70;\r\n\t\tcase 'OU': case 'Unreleased': return 80;\r\n\t\tcase 'UU': return 90;\r\n\t\tcase 'LC': case 'NFE': return 100;\r\n\t\t}\r\n\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Picks a choice from `choices` based on the weights in `weights`.\r\n\t * `weights` must be the same length as `choices`.\r\n\t */\r\n\tweightedRandomPick<T>(\r\n\t\tchoices: T[],\r\n\t\tweights: number[],\r\n\t\toptions?: { remove?: boolean }\r\n\t) {\r\n\t\tif (!choices.length) throw new Error(`Can't pick from an empty list`);\r\n\t\tif (choices.length !== weights.length) throw new Error(`Choices and weights must be the same length`);\r\n\r\n\t\t/* console.log(choices.reduce((acc, element, index) => {\r\n\t\t\treturn {\r\n\t\t\t\t ...acc,\r\n\t\t\t\t [element as string]: weights[index],\r\n\t\t\t};\r\n\t  }, {})) */\r\n\r\n\t\tconst totalWeight = weights.reduce((a, b) => a + b, 0);\r\n\r\n\t\tlet randomWeight = this.prng.random(0, totalWeight);\r\n\t\tfor (let i = 0; i < choices.length; i++) {\r\n\t\t\trandomWeight -= weights[i];\r\n\t\t\tif (randomWeight < 0) {\r\n\t\t\t\tconst choice = choices[i];\r\n\t\t\t\tif (options?.remove) choices.splice(i, 1);\r\n\t\t\t\treturn choice;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options?.remove && choices.length) return choices.pop()!;\r\n\t\treturn choices[choices.length - 1];\r\n\t}\r\n\r\n\tsetSeed(seed: PRNGSeed) {\r\n\t\tthis.prng.setSeed(seed);\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": ["moveID", "move", "weight"]
}
