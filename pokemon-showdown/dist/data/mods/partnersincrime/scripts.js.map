{
  "version": 3,
  "sources": ["../../../../data/mods/partnersincrime/scripts.ts"],
  "sourcesContent": ["import { Pokemon, Side } from \"../../../sim\";\r\nimport { Field } from \"../../../sim/field\";\r\n\r\nexport const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\tinherit: 'gen9',\r\n\tfieldEvent(eventid, targets) {\r\n\t\tconst callbackName = `on${eventid}`;\r\n\t\tlet getKey: undefined | 'duration';\r\n\t\tif (eventid === 'Residual') {\r\n\t\t\tgetKey = 'duration';\r\n\t\t}\r\n\t\tlet handlers = this.findFieldEventHandlers(this.field, `onField${eventid}`, getKey);\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tif (side.n < 2 || !side.allySide) {\r\n\t\t\t\thandlers = handlers.concat(this.findSideEventHandlers(side, `onSide${eventid}`, getKey));\r\n\t\t\t}\r\n\t\t\tfor (const active of side.active) {\r\n\t\t\t\tif (!active) continue;\r\n\t\t\t\tif (eventid === 'SwitchIn') {\r\n\t\t\t\t\thandlers = handlers.concat(this.findPokemonEventHandlers(active, `onAny${eventid}`));\r\n\t\t\t\t}\r\n\t\t\t\tif (targets && !targets.includes(active)) continue;\r\n\t\t\t\t// The ally of the pokemon\r\n\t\t\t\tconst ally = active.side.active.find(mon => mon && mon !== active && !mon.fainted);\r\n\t\t\t\tif (eventid === 'SwitchIn' && ally?.m.innate && targets && !targets.includes(ally)) {\r\n\t\t\t\t\tconst volatileState = ally.volatiles[ally.m.innate];\r\n\t\t\t\t\tif (volatileState) {\r\n\t\t\t\t\t\tconst volatile = this.dex.conditions.getByID(ally.m.innate as ID);\r\n\t\t\t\t\t\t// @ts-expect-error dynamic lookup\r\n\t\t\t\t\t\tlet callback = volatile[callbackName];\r\n\t\t\t\t\t\t// @ts-expect-error dynamic lookup\r\n\t\t\t\t\t\tif (this.gen >= 5 && !volatile.onSwitchIn && !volatile.onAnySwitchIn) {\r\n\t\t\t\t\t\t\tcallback = volatile.onStart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (callback !== undefined) {\r\n\t\t\t\t\t\t\tconst allyHandler = this.resolvePriority({\r\n\t\t\t\t\t\t\t\teffect: volatile, callback, state: volatileState, end: ally.removeVolatile, effectHolder: ally,\r\n\t\t\t\t\t\t\t}, callbackName);\r\n\t\t\t\t\t\t\t// if only one Pokemon is switching in, activate its ally's new innate at the speed of the one switching in\r\n\t\t\t\t\t\t\tallyHandler.speed = this.resolvePriority({\r\n\t\t\t\t\t\t\t\teffect: volatile, callback, state: volatileState, end: ally.removeVolatile, effectHolder: active,\r\n\t\t\t\t\t\t\t}, callbackName).speed;\r\n\t\t\t\t\t\t\thandlers.push(allyHandler);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\thandlers = handlers.concat(this.findPokemonEventHandlers(active, callbackName, getKey));\r\n\t\t\t\thandlers = handlers.concat(this.findSideEventHandlers(side, callbackName, undefined, active));\r\n\t\t\t\thandlers = handlers.concat(this.findFieldEventHandlers(this.field, callbackName, undefined, active));\r\n\t\t\t\thandlers = handlers.concat(this.findBattleEventHandlers(callbackName, getKey, active));\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.speedSort(handlers);\r\n\t\twhile (handlers.length) {\r\n\t\t\tconst handler = handlers[0];\r\n\t\t\thandlers.shift();\r\n\t\t\tconst effect = handler.effect;\r\n\t\t\tif ((handler.effectHolder as Pokemon).fainted || (handler.state?.pic as Pokemon)?.fainted) continue;\r\n\t\t\tif (eventid === 'Residual' && handler.end && handler.state?.duration) {\r\n\t\t\t\thandler.state.duration--;\r\n\t\t\t\tif (!handler.state.duration) {\r\n\t\t\t\t\tconst endCallArgs = handler.endCallArgs || [handler.effectHolder, effect.id];\r\n\t\t\t\t\thandler.end.call(...endCallArgs as [any, ...any[]]);\r\n\t\t\t\t\tif (this.ended) return;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// effect may have been removed by a prior handler, i.e. Toxic Spikes being absorbed during a double switch\r\n\t\t\tif (handler.state?.target instanceof Pokemon) {\r\n\t\t\t\tlet expectedStateLocation;\r\n\t\t\t\tif (effect.effectType === 'Ability' && !handler.state.id.startsWith('ability:')) {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.abilityState;\r\n\t\t\t\t} else if (effect.effectType === 'Item' && !handler.state.id.startsWith('item:')) {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.itemState;\r\n\t\t\t\t} else if (effect.effectType === 'Status') {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.statusState;\r\n\t\t\t\t} else {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.volatiles[effect.id];\r\n\t\t\t\t}\r\n\t\t\t\tif (expectedStateLocation !== handler.state) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (handler.state?.target instanceof Side && !handler.state.isSlotCondition) {\r\n\t\t\t\tif ((handler.state.target.sideConditions[effect.id] !== handler.state)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (handler.state?.target instanceof Field) {\r\n\t\t\t\tlet expectedStateLocation;\r\n\t\t\t\tif (effect.effectType === 'Weather') {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.weatherState;\r\n\t\t\t\t} else if (effect.effectType === 'Terrain') {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.terrainState;\r\n\t\t\t\t} else {\r\n\t\t\t\t\texpectedStateLocation = handler.state.target.pseudoWeather[effect.id];\r\n\t\t\t\t}\r\n\t\t\t\tif (expectedStateLocation !== handler.state) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet handlerEventid = eventid;\r\n\t\t\tif ((handler.effectHolder as Side).sideConditions) handlerEventid = `Side${eventid}`;\r\n\t\t\tif ((handler.effectHolder as Field).pseudoWeather) handlerEventid = `Field${eventid}`;\r\n\t\t\tif (handler.callback) {\r\n\t\t\t\tthis.singleEvent(handlerEventid, effect, handler.state, handler.effectHolder, null, null, undefined, handler.callback);\r\n\t\t\t}\r\n\r\n\t\t\tthis.faintMessages();\r\n\t\t\tif (this.ended) return;\r\n\t\t}\r\n\t},\r\n\tendTurn() {\r\n\t\tthis.turn++;\r\n\t\tthis.lastSuccessfulMoveThisTurn = null;\r\n\r\n\t\t// Partners in Crime moveSlot updating\r\n\t\t// Must be highest priority so imprison doesn't lag behind.\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tfor (const pokemon of side.active) {\r\n\t\t\t\tpokemon.moveSlots = pokemon.moveSlots.filter(move => pokemon.m.curMoves.includes(move.id));\r\n\t\t\t\tpokemon.m.curMoves = this.dex.deepClone(pokemon.moves);\r\n\t\t\t\tconst ally = side.active.find(mon => mon && mon !== pokemon && !mon.fainted);\r\n\t\t\t\tlet allyMoves = ally ? this.dex.deepClone(ally.moveSlots) : [];\r\n\t\t\t\tif (ally) {\r\n\t\t\t\t\t// @ts-expect-error modded\r\n\t\t\t\t\tallyMoves = allyMoves.filter(move => !pokemon.moves.includes(move.id) && ally.m.curMoves.includes(move.id));\r\n\t\t\t\t\tfor (const aMove of allyMoves) {\r\n\t\t\t\t\t\taMove.pp = this.clampIntRange(aMove.maxpp - (pokemon.m.trackPP.get(aMove.id) || 0), 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpokemon.moveSlots = pokemon.moveSlots.concat(allyMoves);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst dynamaxEnding: Pokemon[] = [];\r\n\t\tfor (const pokemon of this.getAllActive()) {\r\n\t\t\tif (pokemon.volatiles['dynamax']?.turns === 3) {\r\n\t\t\t\tdynamaxEnding.push(pokemon);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dynamaxEnding.length > 1) {\r\n\t\t\tthis.updateSpeed();\r\n\t\t\tthis.speedSort(dynamaxEnding);\r\n\t\t}\r\n\t\tfor (const pokemon of dynamaxEnding) {\r\n\t\t\tpokemon.removeVolatile('dynamax');\r\n\t\t}\r\n\r\n\t\t// Gen 1 partial trapping ends when either Pokemon or a switch in faints to residual damage\r\n\t\tif (this.gen === 1) {\r\n\t\t\tfor (const pokemon of this.getAllActive()) {\r\n\t\t\t\tif (pokemon.volatiles['partialtrappinglock']) {\r\n\t\t\t\t\tconst target = pokemon.volatiles['partialtrappinglock'].locked;\r\n\t\t\t\t\tif (target.hp <= 0 || !target.volatiles['partiallytrapped']) {\r\n\t\t\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (pokemon.volatiles['partiallytrapped']) {\r\n\t\t\t\t\tconst source = pokemon.volatiles['partiallytrapped'].source;\r\n\t\t\t\t\tif (source.hp <= 0 || !source.volatiles['partialtrappinglock']) {\r\n\t\t\t\t\t\tdelete pokemon.volatiles['partiallytrapped'];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst trappedBySide: boolean[] = [];\r\n\t\tconst stalenessBySide: ('internal' | 'external' | undefined)[] = [];\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tlet sideTrapped = true;\r\n\t\t\tlet sideStaleness: 'internal' | 'external' | undefined;\r\n\t\t\tfor (const pokemon of side.active) {\r\n\t\t\t\tif (!pokemon) continue;\r\n\t\t\t\tpokemon.moveThisTurn = '';\r\n\t\t\t\tpokemon.newlySwitched = false;\r\n\t\t\t\tpokemon.moveLastTurnResult = pokemon.moveThisTurnResult;\r\n\t\t\t\tpokemon.moveThisTurnResult = undefined;\r\n\t\t\t\tif (this.turn !== 1) {\r\n\t\t\t\t\tpokemon.usedItemThisTurn = false;\r\n\t\t\t\t\tpokemon.statsRaisedThisTurn = false;\r\n\t\t\t\t\tpokemon.statsLoweredThisTurn = false;\r\n\t\t\t\t\t// It shouldn't be possible in a normal battle for a Pokemon to be damaged before turn 1's move selection\r\n\t\t\t\t\t// However, this could be potentially relevant in certain OMs\r\n\t\t\t\t\tpokemon.hurtThisTurn = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpokemon.maybeDisabled = false;\r\n\t\t\t\tpokemon.maybeLocked = false;\r\n\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\t\t\tmoveSlot.disabled = false;\r\n\t\t\t\t\tmoveSlot.disabledSource = '';\r\n\t\t\t\t}\r\n\t\t\t\tif (pokemon.volatiles['encore']) {\r\n\t\t\t\t\t// Encore check happens earlier than PiC move swapping, so end encore here.\r\n\t\t\t\t\tconst encoredMove = pokemon.volatiles['encore'].move;\r\n\t\t\t\t\tif (!pokemon.moves.includes(encoredMove)) {\r\n\t\t\t\t\t\tpokemon.removeVolatile('encore');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.runEvent('DisableMove', pokemon);\r\n\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\t\t\tconst activeMove = this.dex.getActiveMove(moveSlot.id);\r\n\t\t\t\t\tthis.singleEvent('DisableMove', activeMove, null, pokemon);\r\n\t\t\t\t\tif (activeMove.flags['cantusetwice'] && pokemon.lastMove?.id === moveSlot.id) {\r\n\t\t\t\t\t\tpokemon.disableMove(pokemon.lastMove.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If it was an illusion, it's not any more\r\n\t\t\t\tif (pokemon.getLastAttackedBy() && this.gen >= 7) pokemon.knownType = true;\r\n\r\n\t\t\t\tfor (let i = pokemon.attackedBy.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst attack = pokemon.attackedBy[i];\r\n\t\t\t\t\tif (attack.source.isActive) {\r\n\t\t\t\t\t\tattack.thisTurn = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpokemon.attackedBy.splice(pokemon.attackedBy.indexOf(attack), 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.gen >= 7) {\r\n\t\t\t\t\t// In Gen 7, the real type of every Pokemon is visible to all players via the bottom screen while making choices\r\n\t\t\t\t\tconst seenPokemon = pokemon.illusion || pokemon;\r\n\t\t\t\t\tconst realTypeString = seenPokemon.getTypes(true).join('/');\r\n\t\t\t\t\tif (realTypeString !== seenPokemon.apparentType) {\r\n\t\t\t\t\t\tthis.add('-start', pokemon, 'typechange', realTypeString, '[silent]');\r\n\t\t\t\t\t\tseenPokemon.apparentType = realTypeString;\r\n\t\t\t\t\t\tif (pokemon.addedType) {\r\n\t\t\t\t\t\t\t// The typechange message removes the added type, so put it back\r\n\t\t\t\t\t\t\tthis.add('-start', pokemon, 'typeadd', pokemon.addedType, '[silent]');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpokemon.trapped = pokemon.maybeTrapped = false;\r\n\t\t\t\tthis.runEvent('TrapPokemon', pokemon);\r\n\t\t\t\tif (!pokemon.knownType || this.dex.getImmunity('trapped', pokemon)) {\r\n\t\t\t\t\tthis.runEvent('MaybeTrapPokemon', pokemon);\r\n\t\t\t\t}\r\n\t\t\t\t// canceling switches would leak information\r\n\t\t\t\t// if a foe might have a trapping ability\r\n\t\t\t\tif (this.gen > 2) {\r\n\t\t\t\t\tfor (const source of pokemon.foes()) {\r\n\t\t\t\t\t\tconst species = (source.illusion || source).species;\r\n\t\t\t\t\t\tif (!species.abilities) continue;\r\n\t\t\t\t\t\tfor (const abilitySlot in species.abilities) {\r\n\t\t\t\t\t\t\tconst abilityName = species.abilities[abilitySlot as keyof Species['abilities']];\r\n\t\t\t\t\t\t\tif (abilityName === source.ability) {\r\n\t\t\t\t\t\t\t\t// pokemon event was already run above so we don't need\r\n\t\t\t\t\t\t\t\t// to run it again.\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconst ruleTable = this.ruleTable;\r\n\t\t\t\t\t\t\tif ((ruleTable.has('+hackmons') || !ruleTable.has('obtainableabilities')) && !this.format.team) {\r\n\t\t\t\t\t\t\t\t// hackmons format\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t} else if (abilitySlot === 'H' && species.unreleasedHidden) {\r\n\t\t\t\t\t\t\t\t// unreleased hidden ability\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconst ability = this.dex.abilities.get(abilityName);\r\n\t\t\t\t\t\t\tif (ruleTable.has('-ability:' + ability.id)) continue;\r\n\t\t\t\t\t\t\tif (pokemon.knownType && !this.dex.getImmunity('trapped', pokemon)) continue;\r\n\t\t\t\t\t\t\tthis.singleEvent('FoeMaybeTrapPokemon', ability, {}, pokemon, source);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (pokemon.fainted) continue;\r\n\r\n\t\t\t\tsideTrapped = sideTrapped && pokemon.trapped;\r\n\t\t\t\tconst staleness = pokemon.volatileStaleness || pokemon.staleness;\r\n\t\t\t\tif (staleness) sideStaleness = sideStaleness === 'external' ? sideStaleness : staleness;\r\n\t\t\t\tpokemon.activeTurns++;\r\n\t\t\t}\r\n\t\t\ttrappedBySide.push(sideTrapped);\r\n\t\t\tstalenessBySide.push(sideStaleness);\r\n\t\t\tside.faintedLastTurn = side.faintedThisTurn;\r\n\t\t\tside.faintedThisTurn = null;\r\n\t\t}\r\n\r\n\t\tif (this.maybeTriggerEndlessBattleClause(trappedBySide, stalenessBySide)) return;\r\n\r\n\t\tif (this.gameType === 'triples' && this.sides.every(side => side.pokemonLeft === 1)) {\r\n\t\t\t// If both sides have one Pokemon left in triples and they are not adjacent, they are both moved to the center.\r\n\t\t\tconst actives = this.getAllActive();\r\n\t\t\tif (actives.length > 1 && !actives[0].isAdjacent(actives[1])) {\r\n\t\t\t\tthis.swapPosition(actives[0], 1, '[silent]');\r\n\t\t\t\tthis.swapPosition(actives[1], 1, '[silent]');\r\n\t\t\t\tthis.add('-center');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.add('turn', this.turn);\r\n\t\tif (this.gameType === 'multi') {\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tif (side.canDynamaxNow()) {\r\n\t\t\t\t\tif (this.turn === 1) {\r\n\t\t\t\t\t\tthis.addSplit(side.id, ['-candynamax', side.id]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.add('-candynamax', side.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.gen === 2) this.quickClawRoll = this.randomChance(60, 256);\r\n\t\tif (this.gen === 3) this.quickClawRoll = this.randomChance(1, 5);\r\n\r\n\t\tthis.makeRequest('move');\r\n\t},\r\n\tpokemon: {\r\n\t\tsetAbility(ability, source, isFromFormeChange) {\r\n\t\t\tif (!this.hp) return false;\r\n\t\t\tconst BAD_ABILITIES = ['trace', 'imposter', 'neutralizinggas', 'illusion', 'wanderingspirit'];\r\n\t\t\tif (typeof ability === 'string') ability = this.battle.dex.abilities.get(ability);\r\n\t\t\tconst oldAbility = this.ability;\r\n\t\t\tif (!isFromFormeChange) {\r\n\t\t\t\tif (ability.flags['cantsuppress'] || this.getAbility().flags['cantsuppress']) return false;\r\n\t\t\t}\r\n\t\t\tif (!this.battle.runEvent('SetAbility', this, source, this.battle.effect, ability)) return false;\r\n\t\t\tthis.battle.singleEvent('End', this.battle.dex.abilities.get(oldAbility), this.abilityState, this, source);\r\n\t\t\tconst ally = this.side.active.find(mon => mon && mon !== this && !mon.fainted);\r\n\t\t\tif (ally?.m.innate) {\r\n\t\t\t\tally.removeVolatile(ally.m.innate);\r\n\t\t\t\tdelete ally.m.innate;\r\n\t\t\t}\r\n\t\t\tif (this.battle.effect && this.battle.effect.effectType === 'Move' && !isFromFormeChange) {\r\n\t\t\t\tthis.battle.add('-endability', this, this.battle.dex.abilities.get(oldAbility),\r\n\t\t\t\t\t`[from] move: ${this.battle.dex.moves.get(this.battle.effect.id)}`);\r\n\t\t\t}\r\n\t\t\tthis.ability = ability.id;\r\n\t\t\tthis.abilityState = this.battle.initEffectState({ id: ability.id, target: this });\r\n\t\t\tif (ability.id && this.battle.gen > 3) {\r\n\t\t\t\tthis.battle.singleEvent('Start', ability, this.abilityState, this, source);\r\n\t\t\t\tif (ally && ally.ability !== this.ability) {\r\n\t\t\t\t\tif (!this.m.innate) {\r\n\t\t\t\t\t\tthis.m.innate = 'ability:' + ally.getAbility().id;\r\n\t\t\t\t\t\tthis.addVolatile(this.m.innate);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!BAD_ABILITIES.includes(ability.id)) {\r\n\t\t\t\t\t\tally.m.innate = 'ability:' + ability.id;\r\n\t\t\t\t\t\tally.addVolatile(ally.m.innate);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Entrainment\r\n\t\t\tif (this.m.innate?.endsWith(ability.id)) {\r\n\t\t\t\tthis.removeVolatile(this.m.innate);\r\n\t\t\t\tdelete this.m.innate;\r\n\t\t\t}\r\n\t\t\treturn oldAbility;\r\n\t\t},\r\n\t\thasAbility(ability) {\r\n\t\t\tif (this.ignoringAbility()) return false;\r\n\t\t\tconst ownAbility = this.ability;\r\n\t\t\tconst ally = this.side.active.find(mon => mon && mon !== this && !mon.fainted);\r\n\t\t\tconst allyAbility = ally ? ally.ability : \"\";\r\n\t\t\tif (!Array.isArray(ability)) {\r\n\t\t\t\tif (ownAbility === this.battle.toID(ability) || allyAbility === this.battle.toID(ability)) return true;\r\n\t\t\t} else {\r\n\t\t\t\tif (ability.map(this.battle.toID).includes(ownAbility) || ability.map(this.battle.toID).includes(allyAbility)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\ttransformInto(pokemon, effect) {\r\n\t\t\tconst species = pokemon.species;\r\n\t\t\tif (\r\n\t\t\t\tpokemon.fainted || this.illusion || pokemon.illusion || (pokemon.volatiles['substitute'] && this.battle.gen >= 5) ||\r\n\t\t\t\t(pokemon.transformed && this.battle.gen >= 2) || (this.transformed && this.battle.gen >= 5) ||\r\n\t\t\t\tspecies.name === 'Eternatus-Eternamax' || (['Ogerpon', 'Terapagos'].includes(species.baseSpecies) &&\r\n\t\t\t\t\t(this.terastallized || pokemon.terastallized))\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.battle.dex.currentMod === 'gen1stadium' && (\r\n\t\t\t\tspecies.name === 'Ditto' ||\r\n\t\t\t\t(this.species.name === 'Ditto' && pokemon.moves.includes('transform'))\r\n\t\t\t)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.setSpecies(species, effect, true)) return false;\r\n\r\n\t\t\tthis.transformed = true;\r\n\t\t\tthis.weighthg = pokemon.weighthg;\r\n\r\n\t\t\tconst types = pokemon.getTypes(true, true);\r\n\t\t\tthis.setType(pokemon.volatiles['roost'] ? pokemon.volatiles['roost'].typeWas : types, true);\r\n\t\t\tthis.addedType = pokemon.addedType;\r\n\t\t\tthis.knownType = this.isAlly(pokemon) && pokemon.knownType;\r\n\t\t\tthis.apparentType = pokemon.apparentType;\r\n\r\n\t\t\tlet statName: StatIDExceptHP;\r\n\t\t\tfor (statName in this.storedStats) {\r\n\t\t\t\tthis.storedStats[statName] = pokemon.storedStats[statName];\r\n\t\t\t\tif (this.modifiedStats) this.modifiedStats[statName] = pokemon.modifiedStats![statName]; // Gen 1: Copy modified stats.\r\n\t\t\t}\r\n\t\t\tthis.moveSlots = [];\r\n\t\t\tthis.hpType = (this.battle.gen >= 5 ? this.hpType : pokemon.hpType);\r\n\t\t\tthis.hpPower = (this.battle.gen >= 5 ? this.hpPower : pokemon.hpPower);\r\n\t\t\tthis.timesAttacked = pokemon.timesAttacked;\r\n\t\t\tfor (const moveSlot of pokemon.moveSlots) {\r\n\t\t\t\tlet moveName = moveSlot.move;\r\n\t\t\t\tif (!pokemon.m.curMoves.includes(moveSlot.id)) continue;\r\n\t\t\t\tif (moveSlot.id === 'hiddenpower') {\r\n\t\t\t\t\tmoveName = 'Hidden Power ' + this.hpType;\r\n\t\t\t\t}\r\n\t\t\t\tthis.moveSlots.push({\r\n\t\t\t\t\tmove: moveName,\r\n\t\t\t\t\tid: moveSlot.id,\r\n\t\t\t\t\tpp: moveSlot.maxpp === 1 ? 1 : 5,\r\n\t\t\t\t\tmaxpp: this.battle.gen >= 5 ? (moveSlot.maxpp === 1 ? 1 : 5) : moveSlot.maxpp,\r\n\t\t\t\t\ttarget: moveSlot.target,\r\n\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\tused: false,\r\n\t\t\t\t\tvirtual: true,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.m.curMoves = pokemon.m.curMoves;\r\n\t\t\tlet boostName: BoostID;\r\n\t\t\tfor (boostName in pokemon.boosts) {\r\n\t\t\t\tthis.boosts[boostName] = pokemon.boosts[boostName];\r\n\t\t\t}\r\n\t\t\tif (this.battle.gen >= 6) {\r\n\t\t\t\tconst volatilesToCopy = ['dragoncheer', 'focusenergy', 'gmaxchistrike', 'laserfocus'];\r\n\t\t\t\tfor (const volatile of volatilesToCopy) this.removeVolatile(volatile);\r\n\t\t\t\tfor (const volatile of volatilesToCopy) {\r\n\t\t\t\t\tif (pokemon.volatiles[volatile]) {\r\n\t\t\t\t\t\tthis.addVolatile(volatile);\r\n\t\t\t\t\t\tif (volatile === 'gmaxchistrike') this.volatiles[volatile].layers = pokemon.volatiles[volatile].layers;\r\n\t\t\t\t\t\tif (volatile === 'dragoncheer') this.volatiles[volatile].hasDragonType = pokemon.volatiles[volatile].hasDragonType;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (effect) {\r\n\t\t\t\tthis.battle.add('-transform', this, pokemon, '[from] ' + effect.fullname);\r\n\t\t\t} else {\r\n\t\t\t\tthis.battle.add('-transform', this, pokemon);\r\n\t\t\t}\r\n\t\t\tif (this.terastallized) {\r\n\t\t\t\tthis.knownType = true;\r\n\t\t\t\tthis.apparentType = this.terastallized;\r\n\t\t\t}\r\n\t\t\tif (this.battle.gen > 2) this.setAbility(pokemon.ability, this, true, true);\r\n\r\n\t\t\t// Change formes based on held items (for Transform)\r\n\t\t\t// Only ever relevant in Generation 4 since Generation 3 didn't have item-based forme changes\r\n\t\t\tif (this.battle.gen === 4) {\r\n\t\t\t\tif (this.species.num === 487) {\r\n\t\t\t\t\t// Giratina formes\r\n\t\t\t\t\tif (this.species.name === 'Giratina' && this.item === 'griseousorb') {\r\n\t\t\t\t\t\tthis.formeChange('Giratina-Origin');\r\n\t\t\t\t\t} else if (this.species.name === 'Giratina-Origin' && this.item !== 'griseousorb') {\r\n\t\t\t\t\t\tthis.formeChange('Giratina');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.species.num === 493) {\r\n\t\t\t\t\t// Arceus formes\r\n\t\t\t\t\tconst item = this.getItem();\r\n\t\t\t\t\tconst targetForme = (item?.onPlate ? 'Arceus-' + item.onPlate : 'Arceus');\r\n\t\t\t\t\tif (this.species.name !== targetForme) {\r\n\t\t\t\t\t\tthis.formeChange(targetForme);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Pokemon transformed into Ogerpon cannot Terastallize\r\n\t\t\t// restoring their ability to tera after they untransform is handled ELSEWHERE\r\n\t\t\tif (this.species.baseSpecies === 'Ogerpon' && this.canTerastallize) this.canTerastallize = false;\r\n\t\t\tif (this.species.baseSpecies === 'Terapagos' && this.canTerastallize) this.canTerastallize = false;\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tdeductPP(move, amount, target) {\r\n\t\t\tconst gen = this.battle.gen;\r\n\t\t\tmove = this.battle.dex.moves.get(move);\r\n\t\t\tconst ppData = this.getMoveData(move);\r\n\t\t\tif (!ppData) return 0;\r\n\t\t\tppData.used = true;\r\n\t\t\tif (!ppData.pp && gen > 1) return 0;\r\n\r\n\t\t\tif (!amount) amount = 1;\r\n\t\t\tppData.pp -= amount;\r\n\t\t\tif (ppData.pp < 0 && gen > 1) {\r\n\t\t\t\tamount += ppData.pp;\r\n\t\t\t\tppData.pp = 0;\r\n\t\t\t}\r\n\t\t\tif (!this.m.curMoves.includes(move.id)) {\r\n\t\t\t\tthis.m.trackPP.set(move.id, (this.m.trackPP.get(move.id) || 0) + amount);\r\n\t\t\t}\r\n\t\t\treturn amount;\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
