{
  "version": 3,
  "sources": ["../../../../data/mods/ccapm2024/scripts.ts"],
  "sourcesContent": ["import type Dex from \"../../../sim/dex\";\r\n\r\nexport const Scripts: ModdedBattleScriptsData = {\r\n\tgen: 9,\r\n\tactions: {\r\n\t\tsecondaries(targets: SpreadMoveTargets, source: Pokemon, move: ActiveMove, moveData: ActiveMove, isSelf?: boolean) {\r\n\t\t\tif (!moveData.secondaries) return;\r\n\t\t\tfor (const foe of targets) {\r\n\t\t\t\tif (foe === false) continue;\r\n\t\t\t\tconst secondaries: Dex.SecondaryEffect[] =\r\n\t\t\t\t\tthis.battle.runEvent('ModifySecondaries', foe, source, moveData, moveData.secondaries.slice());\r\n\t\t\t\tfor (const secondary of secondaries) {\r\n\t\t\t\t\tconst secondaryRoll = this.battle.random(100);\r\n\t\t\t\t\t// User stat boosts or foe stat drops can possibly overflow if it goes beyond 256 in Gen 8 or prior\r\n\t\t\t\t\tconst secondaryOverflow = (secondary.boosts || secondary.self) && this.battle.gen <= 8;\r\n\t\t\t\t\tif (typeof secondary.chance === 'undefined' ||\r\n\t\t\t\t\t\tsecondaryRoll < (secondaryOverflow ? secondary.chance % 256 : secondary.chance)) {\r\n\t\t\t\t\t\tlet flag = true;\r\n\t\t\t\t\t\tif (moveData.secondary?.status && foe) flag = foe.setStatus(moveData.secondary.status, source);\r\n\t\t\t\t\t\tif (moveData.secondary?.volatileStatus && foe) flag = !(moveData.secondary.volatileStatus in foe.volatiles);\r\n\t\t\t\t\t\tif (moveData.secondary?.volatileStatus === 'flinch' && foe) flag = flag && foe.activeTurns >= 1 && !foe.moveThisTurn;\r\n\t\t\t\t\t\tthis.moveHit(foe, source, move, secondary, true, isSelf);\r\n\t\t\t\t\t\tif (moveData.secondary?.self?.boosts) {\r\n\t\t\t\t\t\t\tObject.entries(moveData.secondary.self.boosts).forEach(([stat, boost]) => {\r\n\t\t\t\t\t\t\t\tif (source.boosts[stat as BoostID] === 6) flag = false;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (foe) flag = flag && !(foe.hp === undefined || foe.hp <= 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (moveData.target !== 'self' && moveData.secondary?.boosts && foe) {\r\n\t\t\t\t\t\t\tconst cantLower = {\r\n\t\t\t\t\t\t\t\t'atk': ['clearbody', 'fullmetalbody', 'hypercutter', 'whitesmoke'],\r\n\t\t\t\t\t\t\t\t'def': ['bigpecks', 'clearbody', 'fullmetalbody', 'whitesmoke'],\r\n\t\t\t\t\t\t\t\t'spa': ['clearbody', 'fullmetalbody', 'whitesmoke'],\r\n\t\t\t\t\t\t\t\t'spd': ['clearbody', 'fullmetalbody', 'whitesmoke'],\r\n\t\t\t\t\t\t\t\t'spe': ['clearbody', 'fullmetalbody', 'whitesmoke'],\r\n\t\t\t\t\t\t\t\t'accuracy': ['clearbody', 'fullmetalbody', 'keeneye', 'whitesmoke'],\r\n\t\t\t\t\t\t\t\t'evasion': [] };\r\n\t\t\t\t\t\t\tfor (const k in moveData.secondary.boosts) {\r\n\t\t\t\t\t\t\t\tif (foe.boosts[k as BoostID] === -6) {\r\n\t\t\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (foe.hasAbility(cantLower[k as BoostID]) && !move.ignoreAbility) {\r\n\t\t\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (source.hasAbility('sheerforce')) flag = false;\r\n\t\t\t\t\t\tif (foe && foe.hasAbility('shielddust') && !move.ignoreAbility &&\r\n\t\t\t\t\t\t\tmove.secondary && !move.secondary.self?.boosts) {\r\n\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (flag && foe && foe.hasAbility('countermeasures') && secondary.chance) {\r\n\t\t\t\t\t\t\tthis.battle.add('-activate', foe, 'ability: Countermeasures');\r\n\t\t\t\t\t\t\tthis.battle.damage(source.baseMaxhp * (100 - secondary.chance) / 100, source, foe);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,MAAM,UAAmC;AAAA,EAC/C,KAAK;AAAA,EACL,SAAS;AAAA,IACR,YAAY,SAA4B,QAAiB,MAAkB,UAAsB,QAAkB;AAClH,UAAI,CAAC,SAAS,YAAa;AAC3B,iBAAW,OAAO,SAAS;AAC1B,YAAI,QAAQ,MAAO;AACnB,cAAM,cACL,KAAK,OAAO,SAAS,qBAAqB,KAAK,QAAQ,UAAU,SAAS,YAAY,MAAM,CAAC;AAC9F,mBAAW,aAAa,aAAa;AACpC,gBAAM,gBAAgB,KAAK,OAAO,OAAO,GAAG;AAE5C,gBAAM,qBAAqB,UAAU,UAAU,UAAU,SAAS,KAAK,OAAO,OAAO;AACrF,cAAI,OAAO,UAAU,WAAW,eAC/B,iBAAiB,oBAAoB,UAAU,SAAS,MAAM,UAAU,SAAS;AACjF,gBAAI,OAAO;AACX,gBAAI,SAAS,WAAW,UAAU,IAAK,QAAO,IAAI,UAAU,SAAS,UAAU,QAAQ,MAAM;AAC7F,gBAAI,SAAS,WAAW,kBAAkB,IAAK,QAAO,EAAE,SAAS,UAAU,kBAAkB,IAAI;AACjG,gBAAI,SAAS,WAAW,mBAAmB,YAAY,IAAK,QAAO,QAAQ,IAAI,eAAe,KAAK,CAAC,IAAI;AACxG,iBAAK,QAAQ,KAAK,QAAQ,MAAM,WAAW,MAAM,MAAM;AACvD,gBAAI,SAAS,WAAW,MAAM,QAAQ;AACrC,qBAAO,QAAQ,SAAS,UAAU,KAAK,MAAM,EAAE,QAAQ,CAAC,CAAC,MAAM,KAAK,MAAM;AACzE,oBAAI,OAAO,OAAO,IAAe,MAAM,EAAG,QAAO;AAAA,cAClD,CAAC;AAAA,YACF,OAAO;AACN,kBAAI,IAAK,QAAO,QAAQ,EAAE,IAAI,OAAO,UAAa,IAAI,MAAM;AAAA,YAC7D;AACA,gBAAI,SAAS,WAAW,UAAU,SAAS,WAAW,UAAU,KAAK;AACpE,oBAAM,YAAY;AAAA,gBACjB,OAAO,CAAC,aAAa,iBAAiB,eAAe,YAAY;AAAA,gBACjE,OAAO,CAAC,YAAY,aAAa,iBAAiB,YAAY;AAAA,gBAC9D,OAAO,CAAC,aAAa,iBAAiB,YAAY;AAAA,gBAClD,OAAO,CAAC,aAAa,iBAAiB,YAAY;AAAA,gBAClD,OAAO,CAAC,aAAa,iBAAiB,YAAY;AAAA,gBAClD,YAAY,CAAC,aAAa,iBAAiB,WAAW,YAAY;AAAA,gBAClE,WAAW,CAAC;AAAA,cAAE;AACf,yBAAW,KAAK,SAAS,UAAU,QAAQ;AAC1C,oBAAI,IAAI,OAAO,CAAY,MAAM,IAAI;AACpC,yBAAO;AACP;AAAA,gBACD;AACA,oBAAI,IAAI,WAAW,UAAU,CAAY,CAAC,KAAK,CAAC,KAAK,eAAe;AACnE,yBAAO;AACP;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AACA,gBAAI,OAAO,WAAW,YAAY,EAAG,QAAO;AAC5C,gBAAI,OAAO,IAAI,WAAW,YAAY,KAAK,CAAC,KAAK,iBAChD,KAAK,aAAa,CAAC,KAAK,UAAU,MAAM,QAAQ;AAChD,qBAAO;AAAA,YACR;AACA,gBAAI,QAAQ,OAAO,IAAI,WAAW,iBAAiB,KAAK,UAAU,QAAQ;AACzE,mBAAK,OAAO,IAAI,aAAa,KAAK,0BAA0B;AAC5D,mBAAK,OAAO,OAAO,OAAO,aAAa,MAAM,UAAU,UAAU,KAAK,QAAQ,GAAG;AAAA,YAClF;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;",
  "names": []
}
