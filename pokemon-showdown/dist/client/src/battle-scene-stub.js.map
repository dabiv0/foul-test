{
  "version": 3,
  "sources": ["../../../client/src/battle-scene-stub.ts"],
  "sourcesContent": ["import type { Pokemon, Side } from './battle';\r\nimport type { ScenePos, PokemonSprite } from './battle-animations';\r\nimport type { BattleLog } from './battle-log';\r\nimport type { ID } from './battle-dex';\r\nimport type { Args, KWArgs } from './battle-text-parser';\r\n\r\nexport class BattleSceneStub {\r\n\tanimating = false;\r\n\tacceleration = NaN;\r\n\tgen = NaN;\r\n\tactiveCount = NaN;\r\n\tnumericId = NaN;\r\n\ttimeOffset = NaN;\r\n\tinterruptionCount = NaN;\r\n\tmessagebarOpen = false;\r\n\tlog: BattleLog = { add: (args: Args, kwargs?: KWArgs) => {} } as any;\r\n\t$frame?: JQuery;\r\n\r\n\tabilityActivateAnim(pokemon: Pokemon, result: string): void { }\r\n\taddPokemonSprite(pokemon: Pokemon): PokemonSprite { return null!; }\r\n\taddSideCondition(siden: number, id: ID, instant?: boolean): void { }\r\n\tanimationOff(): void { }\r\n\tanimationOn(): void { }\r\n\tmaybeCloseMessagebar(args: Args, kwArgs: KWArgs): boolean { return false; }\r\n\tcloseMessagebar(): boolean { return false; }\r\n\tdamageAnim(pokemon: Pokemon, damage: string | number): void { }\r\n\tdestroy(): void { }\r\n\tfinishAnimations(): JQuery.Promise<JQuery> | undefined { return undefined; }\r\n\thealAnim(pokemon: Pokemon, damage: string | number): void { }\r\n\thideJoinButtons(): void { }\r\n\tincrementTurn(): void { }\r\n\tupdateAcceleration(): void { }\r\n\tmessage(message: string, hiddenMessage?: string): void { }\r\n\tpause(): void { }\r\n\tsetMute(muted: boolean): void { }\r\n\tpreemptCatchup(): void { }\r\n\tremoveSideCondition(siden: number, id: ID): void { }\r\n\treset(): void { }\r\n\tresetBgm(): void { }\r\n\tupdateBgm(): void { }\r\n\tresultAnim(\r\n\t\tpokemon: Pokemon, result: string, type: \"bad\" | \"good\" | \"neutral\" | \"par\" | \"psn\" | \"frz\" | \"slp\" | \"brn\"\r\n\t): void { }\r\n\ttypeAnim(pokemon: Pokemon, types: string): void { }\r\n\tresume(): void { }\r\n\trunMoveAnim(moveid: ID, participants: Pokemon[]): void { }\r\n\trunOtherAnim(moveid: ID, participants: Pokemon[]): void { }\r\n\trunPrepareAnim(moveid: ID, attacker: Pokemon, defender: Pokemon): void { }\r\n\trunResidualAnim(moveid: ID, pokemon: Pokemon): void { }\r\n\trunStatusAnim(moveid: ID, participants: Pokemon[]): void { }\r\n\tstartAnimations(): void { }\r\n\tteamPreview(): void { }\r\n\tresetSides(): void { }\r\n\tupdateGen(): void { }\r\n\tupdateSidebar(side: Side): void { }\r\n\tupdateSidebars(): void { }\r\n\tupdateStatbars(): void { }\r\n\tupdateWeather(instant?: boolean): void { }\r\n\tupkeepWeather(): void { }\r\n\twait(time: number): void { }\r\n\tsetFrameHTML(html: any): void { }\r\n\tsetControlsHTML(html: any): void { }\r\n\tremoveEffect(pokemon: Pokemon, id: ID, instant?: boolean) { }\r\n\taddEffect(pokemon: Pokemon, id: ID, instant?: boolean) { }\r\n\tanimSummon(pokemon: Pokemon, slot: number, instant?: boolean) { }\r\n\tanimUnsummon(pokemon: Pokemon, instant?: boolean) { }\r\n\tanimDragIn(pokemon: Pokemon, slot: number) { }\r\n\tanimDragOut(pokemon: Pokemon) { }\r\n\tresetStatbar(pokemon: Pokemon, startHidden?: boolean) { }\r\n\tupdateStatbar(pokemon: Pokemon, updatePrevhp?: boolean, updateHp?: boolean) { }\r\n\tupdateStatbarIfExists(pokemon: Pokemon, updatePrevhp?: boolean, updateHp?: boolean) { }\r\n\tanimTransform(pokemon: Pokemon, useSpeciesAnim?: boolean, isPermanent?: boolean) { }\r\n\tclearEffects(pokemon: Pokemon) { }\r\n\tremoveTransform(pokemon: Pokemon) { }\r\n\tanimFaint(pokemon: Pokemon) { }\r\n\tanimReset(pokemon: Pokemon) { }\r\n\tanim(pokemon: Pokemon, end: ScenePos, transition?: string) { }\r\n\tbeforeMove(pokemon: Pokemon) { }\r\n\tafterMove(pokemon: Pokemon) { }\r\n}\r\n\r\ndeclare const require: any;\r\ndeclare const global: any;\r\nif (typeof require === 'function') {\r\n\t// in Node\r\n\tglobal.BattleSceneStub = BattleSceneStub;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
