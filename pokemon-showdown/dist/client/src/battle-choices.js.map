{
  "version": 3,
  "sources": ["../../../client/src/battle-choices.ts"],
  "sourcesContent": ["/**\r\n * Battle choices\r\n *\r\n * PS will send requests \"what do you do this turn?\", and you send back\r\n * choices \"I switch Pikachu for Caterpie, and Squirtle uses Water Gun\"\r\n *\r\n * This file contains classes for handling requests and choices.\r\n *\r\n * Dependencies: battle-dex\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\nimport type { Battle, ServerPokemon } from \"./battle\";\r\nimport { Dex, toID, type ID } from \"./battle-dex\";\r\n\r\nexport interface BattleRequestSideInfo {\r\n\tname: string;\r\n\tid: 'p1' | 'p2' | 'p3' | 'p4';\r\n\tpokemon: ServerPokemon[];\r\n}\r\nexport interface BattleRequestActivePokemon {\r\n\tmoves: {\r\n\t\tname: string,\r\n\t\tid: ID,\r\n\t\tpp: number,\r\n\t\tmaxpp: number,\r\n\t\ttarget: Dex.MoveTarget,\r\n\t\tdisabled?: boolean,\r\n\t}[];\r\n\tmaxMoves?: {\r\n\t\tname: string,\r\n\t\tid: ID,\r\n\t\ttarget: Dex.MoveTarget,\r\n\t\tdisabled?: boolean,\r\n\t}[];\r\n\tzMoves?: ({\r\n\t\tname: string,\r\n\t\tid: ID,\r\n\t\ttarget: Dex.MoveTarget,\r\n\t\tdisabled?: false,\r\n\t} | null)[];\r\n\t/** also true if the pokemon can Gigantamax */\r\n\tcanDynamax?: boolean;\r\n\t/** if the pokemon can Gigantamax, a string containing the full name of its G-max move */\r\n\tgigantamax?: string;\r\n\tcanMegaEvo?: boolean;\r\n\tcanMegaEvoX?: boolean;\r\n\tcanMegaEvoY?: boolean;\r\n\tcanUltraBurst?: boolean;\r\n\tcanTerastallize?: string;\r\n\ttrapped?: boolean;\r\n\tmaybeTrapped?: boolean;\r\n\tmaybeDisabled?: boolean;\r\n\tmaybeLocked?: boolean;\r\n}\r\n\r\nexport interface BattleMoveRequest {\r\n\trequestType: 'move';\r\n\trqid: number;\r\n\tside: BattleRequestSideInfo;\r\n\tactive: (BattleRequestActivePokemon | null)[];\r\n\tnoCancel?: boolean;\r\n\ttargetable?: boolean;\r\n}\r\nexport interface BattleSwitchRequest {\r\n\trequestType: 'switch';\r\n\trqid: number;\r\n\tside: BattleRequestSideInfo;\r\n\tforceSwitch: boolean[];\r\n\tnoCancel?: boolean;\r\n}\r\nexport interface BattleTeamRequest {\r\n\trequestType: 'team';\r\n\trqid: number;\r\n\tside: BattleRequestSideInfo;\r\n\tmaxTeamSize?: number;\r\n\tmaxChosenTeamSize?: number;\r\n\tchosenTeamSize?: number;\r\n\tnoCancel?: boolean;\r\n}\r\nexport interface BattleWaitRequest {\r\n\trequestType: 'wait';\r\n\trqid: number;\r\n\tside: undefined;\r\n\tnoCancel?: boolean;\r\n}\r\nexport type BattleRequest = BattleMoveRequest | BattleSwitchRequest | BattleTeamRequest | BattleWaitRequest;\r\n\r\ninterface BattleMoveChoice {\r\n\tchoiceType: 'move';\r\n\t/** 1-based move */\r\n\tmove: number;\r\n\ttargetLoc: number;\r\n\t// gen 6\r\n\tmega: boolean;\r\n\tmegax: boolean;\r\n\tmegay: boolean;\r\n\t// gen 7\r\n\tz: boolean;\r\n\tultra: boolean;\r\n\t// gen 8\r\n\tmax: boolean;\r\n\t// gen 9\r\n\ttera: boolean;\r\n}\r\ninterface BattleSwitchChoice {\r\n\tchoiceType: 'switch' | 'team';\r\n\t/** 1-based pokemon */\r\n\ttargetPokemon: number;\r\n}\r\ninterface BattleMiscChoice {\r\n\tchoiceType: 'shift' | 'testfight';\r\n}\r\ntype BattleChoice = BattleMoveChoice | BattleSwitchChoice | BattleMiscChoice;\r\n\r\n/**\r\n * Tracks a partial choice, allowing you to build it up one step at a time,\r\n * and maybe even construct a UI to build it!\r\n *\r\n * Doesn't support going backwards; just use `new BattleChoiceBuilder`.\r\n */\r\nexport class BattleChoiceBuilder {\r\n\trequest: BattleRequest;\r\n\tnoCancel: boolean;\r\n\t/** Completed choices in string form */\r\n\tchoices: string[] = [];\r\n\t/** Currently active partial move choice - not used for other choices, which don't have partial states */\r\n\tcurrent: BattleMoveChoice = {\r\n\t\tchoiceType: 'move',\r\n\t\t/** if nonzero, show target screen; if zero, show move screen */\r\n\t\tmove: 0,\r\n\t\ttargetLoc: 0, // should always be 0: is not partial if `targetLoc` is known\r\n\t\tmega: false,\r\n\t\tmegax: false,\r\n\t\tmegay: false,\r\n\t\tultra: false,\r\n\t\tz: false,\r\n\t\tmax: false,\r\n\t\ttera: false,\r\n\t};\r\n\talreadySwitchingIn: number[] = [];\r\n\talreadyMega = false;\r\n\talreadyMax = false;\r\n\talreadyZ = false;\r\n\talreadyTera = false;\r\n\r\n\tconstructor(request: BattleRequest) {\r\n\t\tthis.request = request;\r\n\t\tthis.noCancel = request.noCancel || request.requestType === 'wait';\r\n\t\tthis.fillPasses();\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tlet choices = this.choices;\r\n\t\tif (this.current.move) choices = choices.concat(this.stringChoice(this.current));\r\n\t\treturn choices.join(', ').replace(/, team /g, ', ');\r\n\t}\r\n\r\n\tisDone() {\r\n\t\treturn this.choices.length >= this.requestLength();\r\n\t}\r\n\tisEmpty() {\r\n\t\tfor (const choice of this.choices) {\r\n\t\t\tif (choice !== 'pass') return false;\r\n\t\t}\r\n\t\tif (this.current.move) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** Index of the current Pok\u00E9mon to make choices for */\r\n\tindex(): number {\r\n\t\treturn this.choices.length;\r\n\t}\r\n\t/** How many choices is the server expecting? */\r\n\trequestLength() {\r\n\t\tconst request = this.request;\r\n\t\tswitch (request.requestType) {\r\n\t\tcase 'move':\r\n\t\t\treturn request.active.length;\r\n\t\tcase 'switch':\r\n\t\t\treturn request.forceSwitch.length;\r\n\t\tcase 'team':\r\n\t\t\treturn request.chosenTeamSize || 1;\r\n\t\tcase 'wait':\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\tcurrentMoveRequest(index = this.index()) {\r\n\t\tif (this.request.requestType !== 'move') return null;\r\n\t\treturn this.request.active[index];\r\n\t}\r\n\tnoMoreSwitchChoices() {\r\n\t\tif (this.request.requestType !== 'switch') return false;\r\n\t\tfor (let i = this.requestLength(); i < this.request.side.pokemon.length; i++) {\r\n\t\t\tconst pokemon = this.request.side.pokemon[i];\r\n\t\t\tif (!pokemon.fainted && !this.alreadySwitchingIn.includes(i + 1)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddChoice(choiceString: string) {\r\n\t\tlet choice: BattleChoice | null;\r\n\t\ttry {\r\n\t\t\tchoice = this.parseChoice(choiceString);\r\n\t\t} catch (err) {\r\n\t\t\treturn (err as Error).message;\r\n\t\t}\r\n\t\tif (!choice) {\r\n\t\t\treturn \"You do not need to manually choose to pass; the client handles it for you automatically\";\r\n\t\t}\r\n\t\t/** only the last choice can be uncancelable */\r\n\t\tconst isLastChoice = this.choices.length + 1 >= this.requestLength();\r\n\t\tif (choice.choiceType === 'move') {\r\n\t\t\tif (!choice.targetLoc && (this.request as BattleMoveRequest).targetable) {\r\n\t\t\t\tconst choosableTargets: unknown[] = ['normal', 'any', 'adjacentAlly', 'adjacentAllyOrSelf', 'adjacentFoe'];\r\n\t\t\t\tif (choosableTargets.includes(this.currentMove(choice)?.target)) {\r\n\t\t\t\t\tthis.current = choice;\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.currentMoveRequest()?.maybeDisabled && isLastChoice) {\r\n\t\t\t\tthis.noCancel = true;\r\n\t\t\t}\r\n\t\t\tif (choice.mega || choice.megax || choice.megay) this.alreadyMega = true;\r\n\t\t\tif (choice.z) this.alreadyZ = true;\r\n\t\t\tif (choice.max) this.alreadyMax = true;\r\n\t\t\tif (choice.tera) this.alreadyTera = true;\r\n\t\t\tthis.current = {\r\n\t\t\t\tchoiceType: 'move',\r\n\t\t\t\tmove: 0,\r\n\t\t\t\ttargetLoc: 0,\r\n\t\t\t\tmega: false,\r\n\t\t\t\tmegax: false,\r\n\t\t\t\tmegay: false,\r\n\t\t\t\tultra: false,\r\n\t\t\t\tz: false,\r\n\t\t\t\tmax: false,\r\n\t\t\t\ttera: false,\r\n\t\t\t};\r\n\t\t} else if (choice.choiceType === 'switch' || choice.choiceType === 'team') {\r\n\t\t\tif (this.currentMoveRequest()?.trapped) {\r\n\t\t\t\treturn \"You are trapped and cannot switch out\";\r\n\t\t\t}\r\n\t\t\tif (this.alreadySwitchingIn.includes(choice.targetPokemon)) {\r\n\t\t\t\tif (choice.choiceType === 'switch') {\r\n\t\t\t\t\treturn \"You've already chosen to switch that Pok\u00E9mon in\";\r\n\t\t\t\t}\r\n\t\t\t\t// remove choice instead\r\n\t\t\t\tfor (let i = 0; i < this.alreadySwitchingIn.length; i++) {\r\n\t\t\t\t\tif (this.alreadySwitchingIn[i] === choice.targetPokemon) {\r\n\t\t\t\t\t\tthis.alreadySwitchingIn.splice(i, 1);\r\n\t\t\t\t\t\tthis.choices.splice(i, 1);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn \"Unexpected bug, please report this\";\r\n\t\t\t}\r\n\t\t\tif (this.currentMoveRequest()?.maybeTrapped && isLastChoice) {\r\n\t\t\t\tthis.noCancel = true;\r\n\t\t\t}\r\n\t\t\tthis.alreadySwitchingIn.push(choice.targetPokemon);\r\n\t\t} else if (choice.choiceType === 'testfight') {\r\n\t\t\tif (isLastChoice) {\r\n\t\t\t\tthis.noCancel = true;\r\n\t\t\t}\r\n\t\t} else if (choice.choiceType === 'shift') {\r\n\t\t\tif (this.index() === 1) {\r\n\t\t\t\treturn \"Only Pok\u00E9mon not already in the center can shift to the center\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.choices.push(this.stringChoice(choice));\r\n\t\tthis.fillPasses();\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Move and switch requests will often skip over some active Pok\u00E9mon (mainly\r\n\t * fainted Pok\u00E9mon). This will fill them in automatically, so we don't need\r\n\t * to ask a user for them.\r\n\t */\r\n\tfillPasses() {\r\n\t\tconst request = this.request;\r\n\t\tswitch (request.requestType) {\r\n\t\tcase 'move':\r\n\t\t\twhile (this.choices.length < request.active.length && !request.active[this.choices.length]) {\r\n\t\t\t\tthis.choices.push('pass');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'switch':\r\n\t\t\tconst noMoreSwitchChoices = this.noMoreSwitchChoices();\r\n\t\t\twhile (this.choices.length < request.forceSwitch.length) {\r\n\t\t\t\tif (!request.forceSwitch[this.choices.length] || noMoreSwitchChoices) {\r\n\t\t\t\t\tthis.choices.push('pass');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcurrentMove(choice = this.current, index = this.index()) {\r\n\t\tconst moveIndex = choice.move - 1;\r\n\t\treturn this.currentMoveList(index, choice)?.[moveIndex] || null;\r\n\t}\r\n\r\n\tcurrentMoveList(\r\n\t\tindex = this.index(), current: { max?: boolean, z?: boolean } = this.current\r\n\t): ({ name: string, id: ID, target: Dex.MoveTarget, disabled?: boolean } | null)[] | null {\r\n\t\tconst moveRequest = this.currentMoveRequest(index);\r\n\t\tif (!moveRequest) return null;\r\n\t\tif (current.max || (moveRequest.maxMoves && !moveRequest.canDynamax)) {\r\n\t\t\treturn moveRequest.maxMoves || null;\r\n\t\t}\r\n\t\tif (current.z) {\r\n\t\t\treturn moveRequest.zMoves || null;\r\n\t\t}\r\n\t\treturn moveRequest.moves;\r\n\t}\r\n\t/**\r\n\t * Parses a choice from string form to BattleChoice form\r\n\t */\r\n\tparseChoice(choice: string, index = this.choices.length): BattleChoice | null {\r\n\t\tconst request = this.request;\r\n\t\tif (request.requestType === 'wait') throw new Error(`It's not your turn to choose anything`);\r\n\r\n\t\tif (choice === 'shift' || choice === 'testfight') {\r\n\t\t\tif (request.requestType !== 'move') {\r\n\t\t\t\tthrow new Error(`You must switch in a Pok\u00E9mon, not move.`);\r\n\t\t\t}\r\n\t\t\treturn { choiceType: choice };\r\n\t\t}\r\n\r\n\t\tif (choice.startsWith('move ')) {\r\n\t\t\tif (request.requestType !== 'move') {\r\n\t\t\t\tthrow new Error(`You must switch in a Pok\u00E9mon, not move.`);\r\n\t\t\t}\r\n\t\t\tconst moveRequest = request.active[index]!;\r\n\t\t\tchoice = choice.slice(5);\r\n\t\t\tlet current: BattleMoveChoice = {\r\n\t\t\t\tchoiceType: 'move',\r\n\t\t\t\tmove: 0,\r\n\t\t\t\ttargetLoc: 0,\r\n\t\t\t\tmega: false,\r\n\t\t\t\tmegax: false,\r\n\t\t\t\tmegay: false,\r\n\t\t\t\tultra: false,\r\n\t\t\t\tz: false,\r\n\t\t\t\tmax: false,\r\n\t\t\t\ttera: false,\r\n\t\t\t};\r\n\t\t\twhile (true) {\r\n\t\t\t\t// If data ends with a number, treat it as a target location.\r\n\t\t\t\t// We need to special case 'Conversion 2' so it doesn't get\r\n\t\t\t\t// confused with 'Conversion' erroneously sent with the target\r\n\t\t\t\t// '2' (since Conversion targets 'self', targetLoc can't be 2).\r\n\t\t\t\tif (/\\s(?:-|\\+)?[1-3]$/.test(choice) && toID(choice) !== 'conversion2') {\r\n\t\t\t\t\tif (current.targetLoc) throw new Error(`Move choice has multiple targets`);\r\n\t\t\t\t\tcurrent.targetLoc = parseInt(choice.slice(-2), 10);\r\n\t\t\t\t\tchoice = choice.slice(0, -2).trim();\r\n\t\t\t\t} else if (choice.endsWith(' mega')) {\r\n\t\t\t\t\tcurrent.mega = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -5);\r\n\t\t\t\t} else if (choice.endsWith(' megax')) {\r\n\t\t\t\t\tcurrent.megax = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -6);\r\n\t\t\t\t} else if (choice.endsWith(' megay')) {\r\n\t\t\t\t\tcurrent.megay = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -6);\r\n\t\t\t\t} else if (choice.endsWith(' zmove')) {\r\n\t\t\t\t\tcurrent.z = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -6);\r\n\t\t\t\t} else if (choice.endsWith(' ultra')) {\r\n\t\t\t\t\tcurrent.ultra = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -6);\r\n\t\t\t\t} else if (choice.endsWith(' dynamax')) {\r\n\t\t\t\t\tcurrent.max = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -8);\r\n\t\t\t\t} else if (choice.endsWith(' max')) {\r\n\t\t\t\t\tcurrent.max = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -4);\r\n\t\t\t\t} else if (choice.endsWith(' terastallize')) {\r\n\t\t\t\t\tcurrent.tera = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -13);\r\n\t\t\t\t} else if (choice.endsWith(' terastal')) {\r\n\t\t\t\t\tcurrent.tera = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -9);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (/^[0-9]+$/.test(choice)) {\r\n\t\t\t\t// Parse a one-based move index.\r\n\t\t\t\tcurrent.move = parseInt(choice, 10);\r\n\t\t\t} else {\r\n\t\t\t\t// Parse a move ID.\r\n\t\t\t\t// Move names are also allowed, but may cause ambiguity (see client issue #167).\r\n\t\t\t\tlet moveid = toID(choice);\r\n\t\t\t\tif (moveid.startsWith('hiddenpower')) moveid = 'hiddenpower' as ID;\r\n\r\n\t\t\t\tfor (let i = 0; i < moveRequest.moves.length; i++) {\r\n\t\t\t\t\tif (moveid === moveRequest.moves[i].id) {\r\n\t\t\t\t\t\tcurrent.move = i + 1;\r\n\t\t\t\t\t\tif (moveRequest.moves[i].disabled) {\r\n\t\t\t\t\t\t\tthrow new Error(`Move \"${moveRequest.moves[i].name}\" is disabled`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!current.move && moveRequest.zMoves) {\r\n\t\t\t\t\tfor (let i = 0; i < moveRequest.zMoves.length; i++) {\r\n\t\t\t\t\t\tif (!moveRequest.zMoves[i]) continue;\r\n\t\t\t\t\t\tif (moveid === moveRequest.zMoves[i]!.id) {\r\n\t\t\t\t\t\t\tcurrent.move = i + 1;\r\n\t\t\t\t\t\t\tcurrent.z = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!current.move && moveRequest.maxMoves) {\r\n\t\t\t\t\tfor (let i = 0; i < moveRequest.maxMoves.length; i++) {\r\n\t\t\t\t\t\tif (moveid === moveRequest.maxMoves[i].id) {\r\n\t\t\t\t\t\t\tif (moveRequest.maxMoves[i].disabled) {\r\n\t\t\t\t\t\t\t\tthrow new Error(`Move \"${moveRequest.maxMoves[i].name}\" is disabled`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcurrent.move = i + 1;\r\n\t\t\t\t\t\t\tcurrent.max = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (current.max && !moveRequest.canDynamax) current.max = false;\r\n\t\t\tconst move = this.currentMove(current, index);\r\n\t\t\tif (!move || move.disabled) {\r\n\t\t\t\tthrow new Error(`Move ${move?.name ?? current.move} is disabled`);\r\n\t\t\t}\r\n\t\t\treturn current;\r\n\t\t}\r\n\r\n\t\tif (choice.startsWith('switch ') || choice.startsWith('team ')) {\r\n\t\t\tchoice = choice.slice(choice.startsWith('team ') ? 5 : 7);\r\n\t\t\tconst isTeamPreview = request.requestType === 'team';\r\n\t\t\tlet current: BattleSwitchChoice = {\r\n\t\t\t\tchoiceType: isTeamPreview ? 'team' : 'switch',\r\n\t\t\t\ttargetPokemon: 0,\r\n\t\t\t};\r\n\t\t\tif (/^[0-9]+$/.test(choice)) {\r\n\t\t\t\t// Parse a one-based move index.\r\n\t\t\t\tcurrent.targetPokemon = parseInt(choice, 10);\r\n\t\t\t} else {\r\n\t\t\t\t// Parse a pokemon name\r\n\t\t\t\tconst lowerChoice = choice.toLowerCase();\r\n\t\t\t\tconst choiceid = toID(choice);\r\n\t\t\t\tlet matchLevel = 0;\r\n\t\t\t\tlet match = 0;\r\n\t\t\t\tfor (let i = 0; i < request.side.pokemon.length; i++) {\r\n\t\t\t\t\tconst serverPokemon = request.side.pokemon[i];\r\n\t\t\t\t\tlet curMatchLevel = 0;\r\n\t\t\t\t\tif (choice === serverPokemon.name) {\r\n\t\t\t\t\t\tcurMatchLevel = 10;\r\n\t\t\t\t\t} else if (lowerChoice === serverPokemon.name.toLowerCase()) {\r\n\t\t\t\t\t\tcurMatchLevel = 9;\r\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.name)) {\r\n\t\t\t\t\t\tcurMatchLevel = 8;\r\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.speciesForme)) {\r\n\t\t\t\t\t\tcurMatchLevel = 7;\r\n\t\t\t\t\t} else if (choiceid === toID(Dex.species.get(serverPokemon.speciesForme).baseSpecies)) {\r\n\t\t\t\t\t\tcurMatchLevel = 6;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (curMatchLevel > matchLevel) {\r\n\t\t\t\t\t\tmatch = i + 1;\r\n\t\t\t\t\t\tmatchLevel = curMatchLevel;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!match) {\r\n\t\t\t\t\tthrow new Error(`Couldn't find Pok\u00E9mon \"${choice}\" to switch to`);\r\n\t\t\t\t}\r\n\t\t\t\tcurrent.targetPokemon = match;\r\n\t\t\t}\r\n\t\t\tif (!isTeamPreview && current.targetPokemon - 1 < this.requestLength()) {\r\n\t\t\t\tthrow new Error(`That Pok\u00E9mon is already in battle!`);\r\n\t\t\t}\r\n\t\t\tconst target = request.side.pokemon[current.targetPokemon - 1];\r\n\t\t\tif (!target) {\r\n\t\t\t\tthrow new Error(`Couldn't find Pok\u00E9mon \"${choice}\" to switch to!`);\r\n\t\t\t}\r\n\t\t\tif (target.fainted) {\r\n\t\t\t\tthrow new Error(`${target.name} is fainted and cannot battle!`);\r\n\t\t\t}\r\n\t\t\treturn current;\r\n\t\t}\r\n\r\n\t\tif (choice === 'pass') return null;\r\n\r\n\t\tthrow new Error(`Unrecognized choice \"${choice}\"`);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a choice from `BattleChoice` into string form\r\n\t */\r\n\tstringChoice(choice: BattleChoice | null) {\r\n\t\tif (!choice) return `pass`;\r\n\t\tswitch (choice.choiceType) {\r\n\t\tcase 'move':\r\n\t\t\tconst target = choice.targetLoc ? ` ${choice.targetLoc > 0 ? '+' : ''}${choice.targetLoc}` : ``;\r\n\t\t\treturn `move ${choice.move}${this.moveSpecial(choice)}${target}`;\r\n\t\tcase 'switch':\r\n\t\tcase 'team':\r\n\t\t\treturn `${choice.choiceType} ${choice.targetPokemon}`;\r\n\t\tcase 'shift':\r\n\t\tcase 'testfight':\r\n\t\t\treturn choice.choiceType;\r\n\t\t}\r\n\t}\r\n\tmoveSpecial(choice: BattleMoveChoice) {\r\n\t\treturn (choice.max ? ' max' : '') +\r\n\t\t\t(choice.mega ? ' mega' : '') +\r\n\t\t\t(choice.megax ? ' megax' : '') +\r\n\t\t\t(choice.megay ? ' megay' : '') +\r\n\t\t\t(choice.z ? ' zmove' : '') +\r\n\t\t\t(choice.tera ? ' terastallize' : '');\r\n\t}\r\n\r\n\t/**\r\n\t * The request sent from the server is actually really gross, but we'll have\r\n\t * to wait until we transition to the new client before fixing it in the\r\n\t * protocol, in the interests of not needing to fix it twice (or needing to\r\n\t * fix it without TypeScript).\r\n\t *\r\n\t * In the meantime, this function converts a request from a shitty request\r\n\t * to a request that makes sense.\r\n\t *\r\n\t * I'm sorry for literally all of this.\r\n\t */\r\n\tstatic fixRequest(request: any, battle: Battle) {\r\n\t\tif (!request.requestType) {\r\n\t\t\trequest.requestType = 'move';\r\n\t\t\tif (request.forceSwitch) {\r\n\t\t\t\trequest.requestType = 'switch';\r\n\t\t\t} else if (request.teamPreview) {\r\n\t\t\t\trequest.requestType = 'team';\r\n\t\t\t} else if (request.wait) {\r\n\t\t\t\trequest.requestType = 'wait';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (request.requestType === 'wait') request.noCancel = true;\r\n\t\tif (request.side) {\r\n\t\t\tfor (const serverPokemon of request.side.pokemon) {\r\n\t\t\t\tbattle.parseDetails(serverPokemon.ident.substr(4), serverPokemon.ident, serverPokemon.details, serverPokemon);\r\n\t\t\t\tbattle.parseHealth(serverPokemon.condition, serverPokemon);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (request.requestType === 'team' && !request.chosenTeamSize) {\r\n\t\t\trequest.chosenTeamSize = 1;\r\n\t\t\tif (battle.gameType === 'doubles') {\r\n\t\t\t\trequest.chosenTeamSize = 2;\r\n\t\t\t}\r\n\t\t\tif (battle.gameType === 'triples' || battle.gameType === 'rotation') {\r\n\t\t\t\trequest.chosenTeamSize = 3;\r\n\t\t\t}\r\n\t\t\t// Request full team order if one of our Pok\u00E9mon has Illusion\r\n\t\t\tfor (const switchable of request.side.pokemon) {\r\n\t\t\t\tif (toID(switchable.baseAbility) === 'illusion') {\r\n\t\t\t\t\trequest.chosenTeamSize = request.side.pokemon.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (request.maxChosenTeamSize) {\r\n\t\t\t\trequest.chosenTeamSize = request.maxChosenTeamSize;\r\n\t\t\t}\r\n\t\t\tif (battle.teamPreviewCount) {\r\n\t\t\t\tconst chosenTeamSize = battle.teamPreviewCount;\r\n\t\t\t\tif (chosenTeamSize > 0 && chosenTeamSize <= request.side.pokemon.length) {\r\n\t\t\t\t\trequest.chosenTeamSize = chosenTeamSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\trequest.targetable ||= battle.mySide.active.length > 1;\r\n\r\n\t\tif (request.active) {\r\n\t\t\trequest.active = request.active.map(\r\n\t\t\t\t(active: any, i: number) => request.side.pokemon[i].fainted ? null : active\r\n\t\t\t);\r\n\t\t\tfor (const active of request.active) {\r\n\t\t\t\tif (!active) continue;\r\n\t\t\t\tfor (const move of active.moves) {\r\n\t\t\t\t\tif (move.move) move.name = move.move;\r\n\t\t\t\t\tmove.id = toID(move.name);\r\n\t\t\t\t}\r\n\t\t\t\tif (active.maxMoves) {\r\n\t\t\t\t\tif (active.maxMoves.maxMoves) {\r\n\t\t\t\t\t\tactive.gigantamax = active.maxMoves.gigantamax;\r\n\t\t\t\t\t\tactive.maxMoves = active.maxMoves.maxMoves;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (const move of active.maxMoves) {\r\n\t\t\t\t\t\tif (move.move) move.name = Dex.moves.get(move.move).name;\r\n\t\t\t\t\t\tmove.id = toID(move.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (active.canZMove) {\r\n\t\t\t\t\tactive.zMoves = active.canZMove;\r\n\t\t\t\t\tfor (const move of active.zMoves) {\r\n\t\t\t\t\t\tif (!move) continue;\r\n\t\t\t\t\t\tif (move.move) move.name = move.move;\r\n\t\t\t\t\t\tmove.id = toID(move.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
