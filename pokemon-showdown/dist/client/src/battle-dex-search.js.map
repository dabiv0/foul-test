{
  "version": 3,
  "sources": ["../../../client/src/battle-dex-search.ts"],
  "sourcesContent": ["/**\r\n * Search\r\n *\r\n * Code for searching for dex information, used by the Dex and\r\n * Teambuilder.\r\n *\r\n * Dependencies: battledata, search-index\r\n * Optional dependencies: pokedex, moves, items, abilities\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\nimport { Dex, type ModdedDex, toID, type ID } from \"./battle-dex\";\r\n\r\nexport type SearchType = (\r\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\r\n);\r\n\r\nexport type SearchRow = (\r\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\r\n);\r\n\r\ntype SearchFilter = [string, string];\r\n\r\n/** ID, SearchType, index (if alias), offset (if offset alias) */\r\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\r\ndeclare const BattleSearchIndexOffset: any;\r\ndeclare const BattleTeambuilderTable: any;\r\n\r\n/**\r\n * Backend for search UIs.\r\n */\r\nexport class DexSearch {\r\n\tquery = '';\r\n\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\r\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\r\n\r\n\tresults: SearchRow[] | null = null;\r\n\tprependResults: SearchRow[] | null = null;\r\n\texactMatch = false;\r\n\r\n\tstatic typeTable = {\r\n\t\tpokemon: 1,\r\n\t\ttype: 2,\r\n\t\ttier: 3,\r\n\t\tmove: 4,\r\n\t\titem: 5,\r\n\t\tability: 6,\r\n\t\tegggroup: 7,\r\n\t\tcategory: 8,\r\n\t\tarticle: 9,\r\n\t};\r\n\tstatic typeName = {\r\n\t\tpokemon: 'Pok\\u00e9mon',\r\n\t\ttype: 'Type',\r\n\t\ttier: 'Tiers',\r\n\t\tmove: 'Moves',\r\n\t\titem: 'Items',\r\n\t\tability: 'Abilities',\r\n\t\tegggroup: 'Egg group',\r\n\t\tcategory: 'Category',\r\n\t\tarticle: 'Article',\r\n\t};\r\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\r\n\r\n\t/**\r\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\r\n\t * things are according to the base filters, falling back to dex number (for\r\n\t * Pokemon) and name (for everything else).\r\n\t */\r\n\tsortCol: string | null = null;\r\n\treverseSort = false;\r\n\r\n\t/**\r\n\t * Filters for the search result. Does not include the two base filters\r\n\t * (format and species).\r\n\t */\r\n\tfilters: SearchFilter[] | null = null;\r\n\r\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\r\n\t\tthis.setType(searchType, formatid, species);\r\n\t}\r\n\r\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | Dex.PokemonSet = '' as ID) {\r\n\t\tif (!searchType) return null;\r\n\t\tswitch (searchType) {\r\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\r\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\r\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\r\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\r\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\r\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfind(query: string) {\r\n\t\tquery = toID(query);\r\n\t\tif (this.query === query && this.results) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.query = query;\r\n\t\tif (!query) {\r\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol, this.reverseSort) || [];\r\n\t\t\tif (!this.filters && !this.sortCol && this.prependResults) {\r\n\t\t\t\tthis.results = [...this.prependResults, ...this.results];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.results = this.textSearch(query);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | Dex.PokemonSet = '' as ID) {\r\n\t\t// invalidate caches\r\n\t\tthis.results = null;\r\n\r\n\t\tif (searchType !== this.typedSearch?.searchType) {\r\n\t\t\tthis.filters = null;\r\n\t\t\tthis.sortCol = null;\r\n\t\t}\r\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\r\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\r\n\t}\r\n\r\n\tcapitalizeFirst(str: string) {\r\n\t\treturn str.charAt(0).toUpperCase() + str.slice(1);\r\n\t}\r\n\taddFilter(entry: SearchFilter | SearchRow): boolean {\r\n\t\tif (!this.typedSearch) return false;\r\n\t\tlet [type] = entry;\r\n\t\tif (this.typedSearch.searchType === 'pokemon') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\r\n\t\t\tif (type === 'type') entry[1] = this.capitalizeFirst(entry[1]);\r\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\r\n\t\t\tif (type === 'ability') entry[1] = this.dex.abilities.get(entry[1]).name;\r\n\t\t\tif (type === 'tier') {\r\n\t\t\t\t// very hardcode\r\n\t\t\t\tconst tierTable: { [id: string]: string } = {\r\n\t\t\t\t\tuber: \"Uber\",\r\n\t\t\t\t\tcaplc: \"CAP LC\",\r\n\t\t\t\t\tcapnfe: \"CAP NFE\",\r\n\t\t\t\t};\r\n\t\t\t\tentry[1] = toID(entry[1]);\r\n\t\t\t\tentry[1] = tierTable[entry[1]] || entry[1].toUpperCase();\r\n\t\t\t}\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.results = null;\r\n\t\t\tfor (const filter of this.filters) {\r\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.filters.push(entry.slice(0, 2) as SearchFilter);\r\n\t\t\treturn true;\r\n\t\t} else if (this.typedSearch.searchType === 'move') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\r\n\t\t\tif (type === 'type') entry[1] = this.capitalizeFirst(entry[1]);\r\n\t\t\tif (type === 'category') entry[1] = this.capitalizeFirst(entry[1]);\r\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.filters.push(entry.slice(0, 2) as SearchFilter);\r\n\t\t\tthis.results = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFilter(entry?: SearchFilter): boolean {\r\n\t\tif (!this.filters) return false;\r\n\t\tif (entry) {\r\n\t\t\tconst filterid = entry.join(':');\r\n\t\t\tlet deleted: string[] | null = null;\r\n\t\t\t// delete specific filter\r\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\r\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\r\n\t\t\t\t\tdeleted = this.filters[i];\r\n\t\t\t\t\tthis.filters.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!deleted) return false;\r\n\t\t} else {\r\n\t\t\tthis.filters.pop();\r\n\t\t}\r\n\t\tif (!this.filters.length) this.filters = null;\r\n\t\tthis.results = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\ttoggleSort(sortCol: string) {\r\n\t\tif (this.sortCol === sortCol) {\r\n\t\t\tif (!this.reverseSort) {\r\n\t\t\t\tthis.reverseSort = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.sortCol = null;\r\n\t\t\t\tthis.reverseSort = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.sortCol = sortCol;\r\n\t\t\tthis.reverseSort = false;\r\n\t\t}\r\n\t\tthis.results = null;\r\n\t}\r\n\r\n\tfilterLabel(filterType: string) {\r\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\r\n\t\t\treturn 'Filter';\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tillegalLabel(id: ID) {\r\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\r\n\t}\r\n\r\n\tgetTier(species: Dex.Species) {\r\n\t\treturn this.typedSearch?.getTier(species) || '';\r\n\t}\r\n\r\n\ttextSearch(query: string): SearchRow[] {\r\n\t\tquery = toID(query);\r\n\r\n\t\tthis.exactMatch = false;\r\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\r\n\r\n\t\t// If searchType exists, we're searching mainly for results of that type.\r\n\t\t// We'll still search for results of other types, but those results\r\n\t\t// will only be used to filter results for that type.\r\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\r\n\r\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\r\n\t\tlet qFilterType: 'type' | '' = '';\r\n\t\tif (query.endsWith('type')) {\r\n\t\t\tif (query.slice(0, -4) in window.BattleTypeChart) {\r\n\t\t\t\tquery = query.slice(0, -4);\r\n\t\t\t\tqFilterType = 'type';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// i represents the location of the search index we're looking at\r\n\t\tlet i = DexSearch.getClosest(query);\r\n\t\tthis.exactMatch = (BattleSearchIndex[i][0] === query);\r\n\r\n\t\t// Even with output buffer buckets, we make multiple passes through\r\n\t\t// the search index. searchPasses is a queue of which pass we're on:\r\n\t\t// [passType, i, query]\r\n\r\n\t\t// By doing an alias pass after the normal pass, we ensure that\r\n\t\t// mid-word matches only display after start matches.\r\n\t\tlet passType: SearchPassType | '' = '';\r\n\t\t/**\r\n\t\t * pass types:\r\n\t\t * * '': time to pop the next pass off the searchPasses queue\r\n\t\t * * 'normal': start at i and stop when results no longer start with query\r\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\r\n\t\t * * 'fuzzy': start at i and stop when you have two results\r\n\t\t * * 'exact': like normal, but stop at i\r\n\t\t */\r\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\r\n\t\t/**\r\n\t\t * [passType, i, query]\r\n\t\t *\r\n\t\t * i = index of BattleSearchIndex to start from\r\n\t\t *\r\n\t\t * By doing an alias pass after the normal pass, we ensure that\r\n\t\t * mid-word matches only display after start matches.\r\n\t\t */\r\n\t\ttype SearchPass = [SearchPassType, number, string];\r\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\r\n\r\n\t\t// For performance reasons, only do an alias pass if query is at\r\n\t\t// least 2 chars long\r\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\r\n\r\n\t\t// If the query matches an official alias in BattleAliases: These are\r\n\t\t// different from the aliases in the search index and are given\r\n\t\t// higher priority. We'll do a normal pass through the index with\r\n\t\t// the alias text before any other passes.\r\n\t\tlet queryAlias;\r\n\t\tif (query in BattleAliases) {\r\n\t\t\tif (['sub', 'tr'].includes(query) || !toID(BattleAliases[query]).startsWith(query)) {\r\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\r\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\r\n\t\t\t\tsearchPasses.unshift([aliasPassType, DexSearch.getClosest(queryAlias), queryAlias]);\r\n\t\t\t}\r\n\t\t\tthis.exactMatch = true;\r\n\t\t}\r\n\r\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\r\n\t\t// Fuzzy matches will still be shown after alias matches\r\n\t\tif (!this.exactMatch && BattleSearchIndex[i][0].substr(0, query.length) !== query) {\r\n\t\t\t// No results start with this. Do a fuzzy match pass.\r\n\t\t\tlet matchLength = query.length - 1;\r\n\t\t\tif (!i) i++;\r\n\t\t\twhile (matchLength &&\r\n\t\t\t\tBattleSearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\r\n\t\t\t\tBattleSearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\r\n\t\t\t\tmatchLength--;\r\n\t\t\t}\r\n\t\t\tlet matchQuery = query.substr(0, matchLength);\r\n\t\t\twhile (i >= 1 && BattleSearchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\r\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\r\n\t\t}\r\n\r\n\t\t// We split the output buffers into 8 buckets.\r\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\r\n\t\t// pokemon, types, moves, etc (see typeTable).\r\n\r\n\t\t// When we're done, the buffers are concatenated together to form\r\n\t\t// our results, with each buffer getting its own header, unlike\r\n\t\t// multiple-pass results, which have no header.\r\n\r\n\t\t// Notes:\r\n\t\t// - if we have a searchType, that searchType's buffer will be on top\r\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\r\n\t\tlet topbufIndex = -1;\r\n\r\n\t\tlet count = 0;\r\n\t\tlet nearMatch = false;\r\n\r\n\t\t/** [type, id, typeIndex] */\r\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\r\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\r\n\t\t// We aren't actually looping through the entirety of the searchIndex\r\n\t\tfor (i = 0; i < BattleSearchIndex.length; i++) {\r\n\t\t\tif (!passType) {\r\n\t\t\t\tlet searchPass = searchPasses.shift();\r\n\t\t\t\tif (!searchPass) break;\r\n\t\t\t\tpassType = searchPass[0];\r\n\t\t\t\ti = searchPass[1];\r\n\t\t\t\tquery = searchPass[2];\r\n\t\t\t}\r\n\r\n\t\t\tlet entry = BattleSearchIndex[i];\r\n\t\t\tlet id = entry[0];\r\n\t\t\tlet type = entry[1];\r\n\r\n\t\t\tif (!id) break;\r\n\r\n\t\t\tif (passType === 'fuzzy') {\r\n\t\t\t\t// fuzzy match pass; stop after 2 results\r\n\t\t\t\tif (count >= 2) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tnearMatch = true;\r\n\t\t\t} else if (passType === 'exact') {\r\n\t\t\t\t// exact pass; stop after 1 result\r\n\t\t\t\tif (count >= 1) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (id.substr(0, query.length) !== query) {\r\n\t\t\t\t// regular pass, time to move onto our next match\r\n\t\t\t\tpassType = '';\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (entry.length > 2) {\r\n\t\t\t\t// alias entry\r\n\t\t\t\tif (passType !== 'alias') continue;\r\n\t\t\t} else {\r\n\t\t\t\t// normal entry\r\n\t\t\t\tif (passType === 'alias') continue;\r\n\t\t\t}\r\n\r\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\r\n\r\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\r\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\r\n\r\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\r\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\r\n\t\t\t// For move queries, accept types/categories as filters\r\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\r\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\r\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\r\n\t\t\t// For ability/item queries, don't accept anything else as a filter\r\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\r\n\t\t\t// Query was a type name followed 'type'; only show types\r\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\r\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\r\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\r\n\r\n\t\t\tlet matchStart = 0;\r\n\t\t\tlet matchEnd = 0;\r\n\t\t\tif (passType === 'alias') {\r\n\t\t\t\t// alias entry\r\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\r\n\t\t\t\tmatchStart = entry[3]!;\r\n\t\t\t\tlet originalIndex = entry[2]!;\r\n\t\t\t\tif (matchStart) {\r\n\t\t\t\t\tmatchEnd = matchStart + query.length;\r\n\t\t\t\t\tmatchStart += (BattleSearchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t\tmatchEnd += (BattleSearchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t}\r\n\t\t\t\tid = BattleSearchIndex[originalIndex][0];\r\n\t\t\t} else {\r\n\t\t\t\tmatchEnd = query.length;\r\n\t\t\t\tif (matchEnd) matchEnd += (BattleSearchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t}\r\n\r\n\t\t\t// some aliases are substrings\r\n\t\t\tif (queryAlias === id && query !== id) continue;\r\n\r\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\r\n\t\t\t\t// This is a filter, set it as an instafilter candidate\r\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\r\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// show types above Arceus formes\r\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\r\n\t\t\t\ttopbufIndex = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\r\n\t\t\t\t// Always show illegal results under legal results.\r\n\t\t\t\t// This is done by putting legal results (and the type header)\r\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\r\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\r\n\t\t\t\t// illegal results will be seamlessly right under legal results.\r\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\r\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tif (!bufs[typeIndex].length) {\r\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// don't match duplicate aliases\r\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\r\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\r\n\r\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\r\n\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tlet topbuf: SearchRow[] = [];\r\n\t\tif (nearMatch) {\r\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\r\n\t\t}\r\n\t\tif (topbufIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\r\n\t\t\tbufs[topbufIndex] = [];\r\n\t\t}\r\n\t\tif (searchTypeIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\r\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\r\n\t\t\tbufs[searchTypeIndex] = [];\r\n\t\t\tbufs[0] = [];\r\n\t\t}\r\n\r\n\t\tif (instafilter && count < 20) {\r\n\t\t\t// Result count is less than 20, so we can instafilter\r\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\r\n\t\t}\r\n\r\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\r\n\t\treturn this.results;\r\n\t}\r\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\r\n\t\tlet buf: SearchRow[] = [];\r\n\t\tlet illegalBuf: SearchRow[] = [];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\t\tif (searchType === 'pokemon') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as Dex.TypeName;\r\n\t\t\t\tbuf.push(['header', `${type}-type Pok\\u00e9mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].types) continue;\r\n\t\t\t\t\tif (this.dex.species.get(id).types.includes(type)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tlet ability = Dex.abilities.get(fId).name;\r\n\t\t\t\tbuf.push(['header', `${ability} Pok\\u00e9mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].abilities) continue;\r\n\t\t\t\t\tif (Dex.hasAbility(this.dex.species.get(id), ability)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (searchType === 'move') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].type === type) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${category} moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].category === category) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...buf, ...illegalBuf];\r\n\t}\r\n\r\n\tstatic getClosest(query: string) {\r\n\t\t// binary search through the index!\r\n\t\tlet left = 0;\r\n\t\tlet right = BattleSearchIndex.length - 1;\r\n\t\twhile (right > left) {\r\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\r\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\r\n\t\t\t\t// that's us\r\n\t\t\t\treturn mid;\r\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\r\n\t\t\t\tleft = mid + 1;\r\n\t\t\t} else {\r\n\t\t\t\tright = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\r\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\r\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\nabstract class BattleTypedSearch<T extends SearchType> {\r\n\tsearchType: T;\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\t/**\r\n\t * Format is the first of two base filters. It constrains results to things\r\n\t * legal in the format, and affects the default sort.\r\n\t *\r\n\t * This string specifically normalizes out generation number and the words\r\n\t * \"Doubles\" and \"Let's Go\" from the name.\r\n\t */\r\n\tformat = '' as ID;\r\n\t/**\r\n\t * `species` is the second of two base filters. It constrains results to\r\n\t * things that species can use, and affects the default sort.\r\n\t */\r\n\tspecies = '' as ID;\r\n\t/**\r\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\r\n\t * (Abilities/items can affect what moves are sorted as usable.)\r\n\t */\r\n\tset: Dex.PokemonSet | null = null;\r\n\r\n\tprotected formatType: 'doubles' | 'bdsp' | 'bdspdoubles' | 'rs' | 'bw1' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' |\r\n\t\t'ssdlc1' | 'ssdlc1doubles' | 'predlc' | 'predlcdoubles' | 'predlcnatdex' | 'svdlc1' | 'svdlc1doubles' |\r\n\t\t'svdlc1natdex' | 'stadium' | 'lc' | null = null;\r\n\r\n\t/**\r\n\t * Cached copy of what the results list would be with only base filters\r\n\t * (i.e. with an empty `query` and `filters`)\r\n\t */\r\n\tbaseResults: SearchRow[] | null = null;\r\n\t/**\r\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\r\n\t * is wondering why a specific result isn't showing up.\r\n\t */\r\n\tbaseIllegalResults: SearchRow[] | null = null;\r\n\tillegalReasons: { [id: string]: string } | null = null;\r\n\tresults: SearchRow[] | null = null;\r\n\r\n\tprotected readonly sortRow: SearchRow | null = null;\r\n\r\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | Dex.PokemonSet = '' as ID) {\r\n\t\tthis.searchType = searchType;\r\n\r\n\t\tthis.baseResults = null;\r\n\t\tthis.baseIllegalResults = null;\r\n\r\n\t\tif (format.startsWith('gen')) {\r\n\t\t\tconst gen = (Number(format.charAt(3)) || 6);\r\n\t\t\tformat = (format.slice(4) || 'customgame') as ID;\r\n\t\t\tthis.dex = Dex.forGen(gen);\r\n\t\t} else if (!format) {\r\n\t\t\tthis.dex = Dex;\r\n\t\t}\r\n\r\n\t\tif (format.startsWith('dlc1') && this.dex.gen === 8) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'ssdlc1doubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'ssdlc1';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('predlc')) {\r\n\t\t\tif (format.includes('doubles') && !format.includes('nationaldex')) {\r\n\t\t\t\tthis.formatType = 'predlcdoubles';\r\n\t\t\t} else if (format.includes('nationaldex')) {\r\n\t\t\t\tthis.formatType = 'predlcnatdex';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'predlc';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(6) as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('dlc1') && this.dex.gen === 9) {\r\n\t\t\tif (format.includes('doubles') && !format.includes('nationaldex')) {\r\n\t\t\t\tthis.formatType = 'svdlc1doubles';\r\n\t\t\t} else if (format.includes('nationaldex')) {\r\n\t\t\t\tthis.formatType = 'svdlc1natdex';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'svdlc1';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('stadium')) {\r\n\t\t\tthis.formatType = 'stadium';\r\n\t\t\tformat = format.slice(7) as ID;\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('vgc')) this.formatType = 'doubles';\r\n\t\tif (format === 'vgc2020') this.formatType = 'ssdlc1doubles';\r\n\t\tif (format === 'vgc2023regulationd') this.formatType = 'predlcdoubles';\r\n\t\tif (format === 'vgc2023regulatione') this.formatType = 'svdlc1doubles';\r\n\t\tif (format.includes('bdsp')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'bdspdoubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'bdsp';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t\tthis.dex = Dex.mod('gen8bdsp' as ID);\r\n\t\t}\r\n\t\tif (format.includes('bw1')) {\r\n\t\t\tthis.formatType = 'bw1';\r\n\t\t\tthis.dex = Dex.mod('gen5bw1' as ID);\r\n\t\t}\r\n\t\tif (format.includes('adv200')) {\r\n\t\t\tthis.formatType = 'rs';\r\n\t\t\tthis.dex = Dex.mod('gen3rs' as ID);\r\n\t\t}\r\n\t\tif (format === 'partnersincrime') this.formatType = 'doubles';\r\n\t\tif (format.startsWith('ffa') || format === 'freeforall') this.formatType = 'doubles';\r\n\t\tif (format.includes('letsgo')) {\r\n\t\t\tthis.formatType = 'letsgo';\r\n\t\t\tthis.dex = Dex.mod('gen7letsgo' as ID);\r\n\t\t}\r\n\t\tif (format.includes('nationaldex') || format.startsWith('nd') || format.includes('natdex')) {\r\n\t\t\tformat = (format.startsWith('nd') ? format.slice(2) :\r\n\t\t\t\tformat.includes('natdex') ? format.slice(6) : format.slice(11)) as ID;\r\n\t\t\tthis.formatType = 'natdex';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (format.includes('doubles') && this.dex.gen > 4 && !this.formatType) this.formatType = 'doubles';\r\n\t\tif (this.formatType === 'letsgo') format = format.slice(6) as ID;\r\n\t\tif (format.includes('metronome')) {\r\n\t\t\tthis.formatType = 'metronome';\r\n\t\t}\r\n\t\tif (format.endsWith('nfe')) {\r\n\t\t\tformat = format.slice(3) as ID;\r\n\t\t\tthis.formatType = 'nfe';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif ((format.endsWith('lc') || format.startsWith('lc')) && format !== 'caplc' && !this.formatType) {\r\n\t\t\tthis.formatType = 'lc';\r\n\t\t\tformat = 'lc' as ID;\r\n\t\t}\r\n\t\tif (format.endsWith('draft')) format = format.slice(0, -5) as ID;\r\n\t\tthis.format = format;\r\n\r\n\t\tthis.species = '' as ID;\r\n\t\tthis.set = null;\r\n\t\tif (typeof speciesOrSet === 'string') {\r\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\r\n\t\t} else {\r\n\t\t\tthis.set = speciesOrSet;\r\n\t\t\tthis.species = toID(this.set.species);\r\n\t\t}\r\n\t\t// if (!searchType || !this.set) return;\r\n\t}\r\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tif (sortCol === 'type') {\r\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this, reverseSort)];\r\n\t\t} else if (sortCol === 'category') {\r\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this, reverseSort)];\r\n\t\t} else if (sortCol === 'ability') {\r\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this, reverseSort)];\r\n\t\t}\r\n\r\n\t\tif (!this.baseResults) {\r\n\t\t\tthis.baseResults = this.getBaseResults();\r\n\t\t}\r\n\r\n\t\tif (!this.baseIllegalResults) {\r\n\t\t\tconst legalityFilter: { [id: string]: 1 } = {};\r\n\t\t\tfor (const [resultType, value] of this.baseResults) {\r\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\r\n\t\t\t}\r\n\t\t\tthis.baseIllegalResults = [];\r\n\t\t\tthis.illegalReasons = {};\r\n\r\n\t\t\tfor (const id in this.getTable()) {\r\n\t\t\t\tif (!(id in legalityFilter)) {\r\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\r\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet results: SearchRow[];\r\n\t\tlet illegalResults: SearchRow[] | null;\r\n\r\n\t\tif (filters) {\r\n\t\t\tresults = [];\r\n\t\t\tillegalResults = [];\r\n\t\t\tfor (const result of this.baseResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\r\n\t\t\t\t\t\tresults[results.length - 1] = result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresults.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\r\n\t\t\t\tresults.pop();\r\n\t\t\t}\r\n\t\t\tfor (const result of this.baseIllegalResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tillegalResults.push(result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresults = [...this.baseResults];\r\n\t\t\tillegalResults = null;\r\n\t\t}\r\n\t\tif (this.defaultFilter) {\r\n\t\t\tresults = this.defaultFilter(results);\r\n\t\t}\r\n\r\n\t\tif (sortCol) {\r\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\tresults = this.sort(results, sortCol, reverseSort);\r\n\t\t\tif (illegalResults) {\r\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol, reverseSort);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.sortRow) {\r\n\t\t\tresults = [this.sortRow, ...results];\r\n\t\t}\r\n\t\tif (illegalResults?.length) {\r\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprotected firstLearnsetid(speciesid: ID) {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.formatType?.startsWith('bdsp')) table = table['gen8bdsp'];\r\n\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\r\n\t\tif (this.formatType === 'bw1') table = table['gen5bw1'];\r\n\t\tif (this.formatType === 'rs') table = table['gen3rs'];\r\n\t\tif (speciesid in table.learnsets) return speciesid;\r\n\t\tconst species = this.dex.species.get(speciesid);\r\n\t\tif (!species.exists) return '' as ID;\r\n\r\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\r\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\r\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\r\n\t\t}\r\n\t\tif (baseLearnsetid in table.learnsets) return baseLearnsetid;\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID, checkingMoves = false) {\r\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\r\n\t\t\treturn 'rockruffdusk' as ID;\r\n\t\t}\r\n\t\tconst lsetSpecies = this.dex.species.get(learnsetid);\r\n\t\tif (!lsetSpecies.exists) return '' as ID;\r\n\r\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\r\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\r\n\t\tif (lsetSpecies.id === 'sinisteaantique') return 'sinistea' as ID;\r\n\t\tif (lsetSpecies.id === 'tatsugiristretchy') return 'tatsugiri' as ID;\r\n\r\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\r\n\t\tif (next) return toID(next);\r\n\r\n\t\tif (checkingMoves && !lsetSpecies.prevo && lsetSpecies.baseSpecies &&\r\n\t\t\tthis.dex.species.get(lsetSpecies.baseSpecies).prevo) {\r\n\t\t\tlet baseEvo = this.dex.species.get(lsetSpecies.baseSpecies);\r\n\t\t\twhile (baseEvo.prevo) {\r\n\t\t\t\tbaseEvo = this.dex.species.get(baseEvo.prevo);\r\n\t\t\t}\r\n\t\t\treturn toID(baseEvo);\r\n\t\t}\r\n\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected canLearn(speciesid: ID, moveid: ID) {\r\n\t\tconst move = this.dex.moves.get(moveid);\r\n\t\tif (this.formatType === 'natdex' && move.isNonstandard && move.isNonstandard !== 'Past') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst gen = this.dex.gen;\r\n\t\tlet genChar = `${gen}`;\r\n\t\tif (\r\n\t\t\tthis.format.startsWith('vgc') ||\r\n\t\t\tthis.format.startsWith('bss') ||\r\n\t\t\tthis.format.startsWith('battlespot') ||\r\n\t\t\tthis.format.startsWith('battlestadium') ||\r\n\t\t\tthis.format.startsWith('battlefestival') ||\r\n\t\t\t(this.dex.gen === 9 && this.formatType !== 'natdex')\r\n\t\t) {\r\n\t\t\tif (gen === 9) {\r\n\t\t\t\tgenChar = 'a';\r\n\t\t\t} else if (gen === 8) {\r\n\t\t\t\tgenChar = 'g';\r\n\t\t\t} else if (gen === 7) {\r\n\t\t\t\tgenChar = 'q';\r\n\t\t\t} else if (gen === 6) {\r\n\t\t\t\tgenChar = 'p';\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet table = BattleTeambuilderTable;\r\n\t\t\tif (this.formatType?.startsWith('bdsp')) table = table['gen8bdsp'];\r\n\t\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\r\n\t\t\tif (this.formatType === 'bw1') table = table['gen5bw1'];\r\n\t\t\tif (this.formatType === 'rs') table = table['gen3rs'];\r\n\t\t\tlet learnset = table.learnsets[learnsetid];\r\n\t\t\tconst eggMovesOnly = this.eggMovesOnly(learnsetid, speciesid);\r\n\t\t\tif (learnset && (moveid in learnset) && (!this.format.startsWith('tradebacks') ? learnset[moveid].includes(genChar) :\r\n\t\t\t\tlearnset[moveid].includes(genChar) || (learnset[moveid].includes(`${gen + 1}`) && move.gen === gen)) &&\r\n\t\t\t\t(!eggMovesOnly || (learnset[moveid].includes('e') && this.dex.gen === 9))\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid, true);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetTier(pokemon: Dex.Species) {\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\treturn pokemon.num >= 0 ? String(pokemon.num) : pokemon.tier;\r\n\t\t}\r\n\t\tlet table = window.BattleTeambuilderTable;\r\n\t\tconst gen = this.dex.gen;\r\n\t\tconst tableKey = this.formatType === 'doubles' ? `gen${gen}doubles` :\r\n\t\t\tthis.formatType === 'letsgo' ? 'gen7letsgo' :\r\n\t\t\tthis.formatType === 'bdsp' ? 'gen8bdsp' :\r\n\t\t\tthis.formatType === 'bdspdoubles' ? 'gen8bdspdoubles' :\r\n\t\t\tthis.formatType === 'bw1' ? 'gen5bw1' :\r\n\t\t\tthis.formatType === 'rs' ? 'gen3rs' :\r\n\t\t\tthis.formatType === 'nfe' ? `gen${gen}nfe` :\r\n\t\t\tthis.formatType === 'lc' ? `gen${gen}lc` :\r\n\t\t\tthis.formatType === 'ssdlc1' ? 'gen8dlc1' :\r\n\t\t\tthis.formatType === 'ssdlc1doubles' ? 'gen8dlc1doubles' :\r\n\t\t\tthis.formatType === 'predlc' ? 'gen9predlc' :\r\n\t\t\tthis.formatType === 'predlcdoubles' ? 'gen9predlcdoubles' :\r\n\t\t\tthis.formatType === 'predlcnatdex' ? 'gen9predlcnatdex' :\r\n\t\t\tthis.formatType === 'svdlc1' ? 'gen9dlc1' :\r\n\t\t\tthis.formatType === 'svdlc1doubles' ? 'gen9dlc1doubles' :\r\n\t\t\tthis.formatType === 'svdlc1natdex' ? 'gen9dlc1natdex' :\r\n\t\t\tthis.formatType === 'natdex' ? `gen${gen}natdex` :\r\n\t\t\tthis.formatType === 'stadium' ? `gen${gen}stadium${gen > 1 ? gen : ''}` :\r\n\t\t\t`gen${gen}`;\r\n\t\tif (table?.[tableKey]) {\r\n\t\t\ttable = table[tableKey];\r\n\t\t}\r\n\t\tif (!table) return pokemon.tier;\r\n\r\n\t\tlet id = pokemon.id;\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\t\tif (id.endsWith('totem') && id.slice(0, -5) in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id.slice(0, -5)];\r\n\t\t}\r\n\t\tid = toID(pokemon.baseSpecies);\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\r\n\t\treturn pokemon.tier;\r\n\t}\r\n\teggMovesOnly(child: ID, father: ID) {\r\n\t\tif (this.dex.species.get(child).baseSpecies === this.dex.species.get(father).baseSpecies) return false;\r\n\t\tconst baseSpecies = father;\r\n\t\twhile (father) {\r\n\t\t\tif (child === father) return false;\r\n\t\t\tfather = this.nextLearnsetid(father, baseSpecies);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tabstract getTable(): { [id: string]: any };\r\n\tabstract getDefaultResults(): SearchRow[];\r\n\tabstract getBaseResults(): SearchRow[];\r\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\r\n\tdefaultFilter?(input: SearchRow[]): SearchRow[];\r\n\tabstract sort(input: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[];\r\n}\r\n\r\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\r\n\toverride sortRow: SearchRow = ['sortpokemon', ''];\r\n\tgetTable() {\r\n\t\treturn BattlePokedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tfor (let id in BattlePokedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bulbasaur':\r\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chikorita':\r\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'treecko':\r\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'turtwig':\r\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'victini':\r\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chespin':\r\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'rowlet':\r\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grookey':\r\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sprigatito':\r\n\t\t\t\tresults.push(['header', \"Generation 9\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'missingno':\r\n\t\t\t\tresults.push(['header', \"Glitch\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'syclar':\r\n\t\t\t\tresults.push(['header', \"CAP\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pikachucosplay':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['pokemon', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tconst format = this.format;\r\n\t\tif (!format) return this.getDefaultResults();\r\n\t\tconst isVGCOrBS = format.startsWith('battlespot') || format.startsWith('bss') ||\r\n\t\t\tformat.startsWith('battlestadium') || format.startsWith('vgc');\r\n\t\tconst isHackmons = format.includes('hackmons') || format.endsWith('bh');\r\n\t\tlet isDoublesOrBS = isVGCOrBS || this.formatType?.includes('doubles');\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif ((format.endsWith('cap') || format.endsWith('caplc')) && dex.gen < 9) {\r\n\t\t\ttable = table[`gen${dex.gen}`];\r\n\t\t} else if (isVGCOrBS) {\r\n\t\t\ttable = table[`gen${dex.gen}vgc`];\r\n\t\t} else if (dex.gen === 9 && isHackmons && !this.formatType) {\r\n\t\t\ttable = table['bh'];\r\n\t\t} else if (\r\n\t\t\ttable[`gen${dex.gen}doubles`] && dex.gen > 4 &&\r\n\t\t\tthis.formatType !== 'letsgo' && this.formatType !== 'bdspdoubles' &&\r\n\t\t\tthis.formatType !== 'ssdlc1doubles' && this.formatType !== 'predlcdoubles' &&\r\n\t\t\tthis.formatType !== 'svdlc1doubles' && !this.formatType?.includes('natdex') &&\r\n\t\t\t(\r\n\t\t\t\tformat.includes('doubles') || format.includes('triples') ||\r\n\t\t\t\tformat === 'freeforall' || format.startsWith('ffa') ||\r\n\t\t\t\tformat === 'partnersincrime'\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\ttable = table[`gen${dex.gen}doubles`];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (dex.gen < 9 && !this.formatType) {\r\n\t\t\ttable = table[`gen${dex.gen}`];\r\n\t\t} else if (this.formatType?.startsWith('bdsp')) {\r\n\t\t\ttable = table['gen8' + this.formatType];\r\n\t\t} else if (this.formatType === 'letsgo') {\r\n\t\t\ttable = table['gen7letsgo'];\r\n\t\t} else if (this.formatType === 'bw1') {\r\n\t\t\ttable = table['gen5bw1'];\r\n\t\t} else if (this.formatType === 'rs') {\r\n\t\t\ttable = table['gen3rs'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table[`gen${dex.gen}natdex`];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table[`gen${dex.gen}metronome`];\r\n\t\t} else if (this.formatType === 'nfe') {\r\n\t\t\ttable = table[`gen${dex.gen}nfe`];\r\n\t\t} else if (this.formatType === 'lc') {\r\n\t\t\ttable = table[`gen${dex.gen}lc`];\r\n\t\t} else if (this.formatType?.startsWith('ssdlc1')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen8dlc1doubles'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen8dlc1'];\r\n\t\t\t}\r\n\t\t} else if (this.formatType?.startsWith('predlc')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen9predlcdoubles'];\r\n\t\t\t} else if (this.formatType.includes('natdex')) {\r\n\t\t\t\ttable = table['gen9predlcnatdex'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen9predlc'];\r\n\t\t\t}\r\n\t\t} else if (this.formatType?.startsWith('svdlc1')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen9dlc1doubles'];\r\n\t\t\t} else if (this.formatType.includes('natdex')) {\r\n\t\t\t\ttable = table['gen9dlc1natdex'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen9dlc1'];\r\n\t\t\t}\r\n\t\t} else if (this.formatType === 'stadium') {\r\n\t\t\ttable = table[`gen${dex.gen}stadium${dex.gen > 1 ? dex.gen : ''}`];\r\n\t\t}\r\n\r\n\t\tif (!table.tierSet) {\r\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.tiers = null;\r\n\t\t}\r\n\t\tlet tierSet: SearchRow[] = table.tierSet;\r\n\t\tlet slices: { [k: string]: number } = table.formatSlices;\r\n\t\tif (format === 'ubers' || format === 'uber' || format === 'ubersuu' || format === 'nationaldexdoubles') {\r\n\t\t\ttierSet = tierSet.slice(slices.Uber);\r\n\t\t} else if (isVGCOrBS || (isHackmons && dex.gen === 9 && !this.formatType)) {\r\n\t\t\tif (format.endsWith('series13') || isHackmons) {\r\n\t\t\t\t// Show Mythicals\r\n\t\t\t} else if (\r\n\t\t\t\tformat === 'vgc2010' || format === 'vgc2016' || format.startsWith('vgc2019') ||\r\n\t\t\t\tformat === 'vgc2022' || format.endsWith('regg') || format.endsWith('regi')\r\n\t\t\t) {\r\n\t\t\t\ttierSet = tierSet.slice(slices[\"Restricted Legendary\"]);\r\n\t\t\t} else {\r\n\t\t\t\ttierSet = tierSet.slice(slices.Regular);\r\n\t\t\t}\r\n\r\n\t\t\tif (format.endsWith('regh')) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tconst tags = Dex.species.get(Dex.species.get(id).baseSpecies).tags;\r\n\t\t\t\t\treturn !tags.includes('Sub-Legendary') && !tags.includes('Paradox') &&\r\n\t\t\t\t\t\t// The game does not classify these as Paradox Pokemon (Booster Energy can be knocked off)\r\n\t\t\t\t\t\t!['gougingfire', 'ironboulder', 'ironcrown', 'ragingbolt'].includes(id);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (format === 'ou') tierSet = tierSet.slice(slices.OU);\r\n\t\telse if (format === 'uubl') tierSet = tierSet.slice(slices.UUBL);\r\n\t\telse if (format === 'uu') tierSet = tierSet.slice(slices.UU);\r\n\t\telse if (format === 'ru') tierSet = tierSet.slice(slices.RU || slices.UU);\r\n\t\telse if (format === 'nu') tierSet = tierSet.slice(slices.NU || slices.RU || slices.UU);\r\n\t\telse if (format === 'pu') tierSet = tierSet.slice(slices.PU || slices.NU);\r\n\t\telse if (format === 'zu' && dex.gen === 5) tierSet = tierSet.slice(slices.PU || slices.NU);\r\n\t\telse if (format === 'zu') tierSet = tierSet.slice(slices.ZU || slices.PU || slices.NU);\r\n\t\telse if (\r\n\t\t\tformat === 'lc' || format === 'lcuu' || format.startsWith('lc') || (format !== 'caplc' && format.endsWith('lc'))\r\n\t\t) tierSet = tierSet.slice(slices.LC);\r\n\t\telse if (format === 'cap' || format.endsWith('cap')) {\r\n\t\t\ttierSet = tierSet.slice(0, slices.AG || slices.Uber).concat(tierSet.slice(slices.OU));\r\n\t\t} else if (format === 'caplc') {\r\n\t\t\ttierSet = tierSet.slice(slices['CAP LC'], slices.AG || slices.Uber).concat(tierSet.slice(slices.LC));\r\n\t\t} else if (format === 'anythinggoes' || format.endsWith('ag') || format.startsWith('ag')) {\r\n\t\t\ttierSet = tierSet.slice(slices.AG);\r\n\t\t} else if (isHackmons && (dex.gen < 9 || this.formatType === 'natdex')) {\r\n\t\t\ttierSet = tierSet.slice(slices.AG || slices.Uber);\r\n\t\t} else if (format === 'monotype' || format.startsWith('monothreat')) tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (format === 'doublesubers') tierSet = tierSet.slice(slices.DUber);\r\n\t\telse if (format === 'doublesou' && dex.gen > 4) tierSet = tierSet.slice(slices.DOU);\r\n\t\telse if (format === 'doublesuu') tierSet = tierSet.slice(slices.DUU);\r\n\t\telse if (format === 'doublesnu') tierSet = tierSet.slice(slices.DNU || slices.DUU);\r\n\t\telse if (this.formatType?.startsWith('bdsp') || this.formatType === 'letsgo' || this.formatType === 'stadium') {\r\n\t\t\ttierSet = tierSet.slice(slices.Uber);\r\n\t\t} else if (this.formatType === 'rs') {\r\n\t\t\ttierSet = tierSet.slice(slices.Regular);\r\n\t\t} else if (!isDoublesOrBS) {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.OU, slices.UU),\r\n\t\t\t\t...tierSet.slice(slices.AG, slices.Uber),\r\n\t\t\t\t...tierSet.slice(slices.Uber, slices.OU),\r\n\t\t\t\t...tierSet.slice(slices.UU),\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\r\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\r\n\t\t\t\t...tierSet.slice(slices.DUU),\r\n\t\t\t];\r\n\t\t}\r\n\t\tif (format === 'ubersuu' && table.ubersUUBans) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (id in table.ubersUUBans) return false;\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (format === 'doubles' && this.formatType === 'natdex' && table.ndDoublesBans) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (id in table.ndDoublesBans) return false;\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (format === '35pokes' && table.thirtyfivePokes) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (id in table.thirtyfivePokes) return true;\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (dex.gen >= 5) {\r\n\t\t\tif ((format === 'monotype' || format.startsWith('monothreat')) && table.monotypeBans) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tif (id in table.monotypeBans) return false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (format === 'zu' && dex.gen === 5 && table.gen5zuBans) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (id in table.gen5zuBans) return false;\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Filter out Gmax Pokemon from standard tier selection\r\n\t\tif (!(/^(battlestadium|vgc|doublesubers)/g.test(format) || (format === 'doubles' && this.formatType === 'natdex'))) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (type === 'header' && id === 'DUber by technicality') return false;\r\n\t\t\t\tif (type === 'header' && id === 'Uber by technicality') return false;\r\n\t\t\t\tif (type === 'pokemon') return !id.endsWith('gmax');\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn tierSet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'pokemon') return true;\r\n\t\tconst species = this.dex.species.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (species.types[0] !== value && species.types[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'egggroup':\r\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tier':\r\n\t\t\t\tif (this.getTier(species) !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'move':\r\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean) {\r\n\t\tconst sortOrder = reverseSort ? -1 : 1;\r\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst stat1 = this.dex.species.get(id1).baseStats[sortCol as Dex.StatName];\r\n\t\t\t\tconst stat2 = this.dex.species.get(id2).baseStats[sortCol as Dex.StatName];\r\n\t\t\t\treturn (stat2 - stat1) * sortOrder;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'bst') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst base1 = this.dex.species.get(id1).baseStats;\r\n\t\t\t\tconst base2 = this.dex.species.get(id2).baseStats;\r\n\t\t\t\tlet bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\r\n\t\t\t\tlet bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\r\n\t\t\t\tif (this.dex.gen === 1) {\r\n\t\t\t\t\tbst1 -= base1.spd;\r\n\t\t\t\t\tbst2 -= base2.spd;\r\n\t\t\t\t}\r\n\t\t\t\treturn (bst2 - bst1) * sortOrder;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'name') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\r\n\tgetTable() {\r\n\t\treturn BattleAbilities;\r\n\t}\r\n\tgetDefaultResults(reverseSort?: boolean): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in BattleAbilities) {\r\n\t\t\tresults.push(['ability', id as ID]);\r\n\t\t}\r\n\t\tif (reverseSort) results.reverse();\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isAAA = (format === 'almostanyability' || format.includes('aaa'));\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.species.get(this.species);\r\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\r\n\r\n\t\tif (species.isMega) {\r\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\tspecies = dex.species.get(species.baseSpecies);\r\n\t\t}\r\n\t\tabilitySet.push(['ability', toID(species.abilities['0'])]);\r\n\t\tif (species.abilities['1']) {\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['1'])]);\r\n\t\t}\r\n\t\tif (species.abilities['H']) {\r\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['H'])]);\r\n\t\t}\r\n\t\tif (species.abilities['S']) {\r\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['S'])]);\r\n\t\t}\r\n\t\tif (isAAA || format.includes('metronomebattle') || isHackmons) {\r\n\t\t\tlet abilities: ID[] = [];\r\n\t\t\tfor (let i in this.getTable()) {\r\n\t\t\t\tconst ability = dex.abilities.get(i);\r\n\t\t\t\tif (ability.isNonstandard) continue;\r\n\t\t\t\tif (ability.gen > dex.gen) continue;\r\n\t\t\t\tabilities.push(ability.id);\r\n\t\t\t}\r\n\r\n\t\t\tlet goodAbilities: SearchRow[] = [['header', \"Abilities\"]];\r\n\t\t\tlet poorAbilities: SearchRow[] = [['header', \"Situational Abilities\"]];\r\n\t\t\tlet badAbilities: SearchRow[] = [['header', \"Unviable Abilities\"]];\r\n\t\t\tfor (const ability of abilities.sort().map(abil => dex.abilities.get(abil))) {\r\n\t\t\t\tlet rating = ability.rating;\r\n\t\t\t\tif (ability.id === 'normalize') rating = 3;\r\n\t\t\t\tif (rating >= 3) {\r\n\t\t\t\t\tgoodAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else if (rating >= 2) {\r\n\t\t\t\t\tpoorAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbadAbilities.push(['ability', ability.id]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tabilitySet = [...goodAbilities, ...poorAbilities, ...badAbilities];\r\n\t\t\tif (species.isMega) {\r\n\t\t\t\tif (isAAA) {\r\n\t\t\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\t\t}\r\n\t\t\t\t// species is unused after this, so no need to replace\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn abilitySet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.abilities.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\r\n\tgetTable() {\r\n\t\treturn BattleItems;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.formatType?.startsWith('bdsp')) {\r\n\t\t\ttable = table['gen8bdsp'];\r\n\t\t} else if (this.formatType === 'bw1') {\r\n\t\t\ttable = table['gen5bw1'];\r\n\t\t} else if (this.formatType === 'rs') {\r\n\t\t\ttable = table['gen3rs'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table[`gen${this.dex.gen}natdex`];\r\n\t\t} else if (this.formatType?.endsWith('doubles')) { // no natdex/bdsp doubles support\r\n\t\t\ttable = table[`gen${this.dex.gen}doubles`];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table[`gen${this.dex.gen}metronome`];\r\n\t\t} else if (this.dex.gen < 9) {\r\n\t\t\ttable = table[`gen${this.dex.gen}`];\r\n\t\t}\r\n\t\tif (!table.itemSet) {\r\n\t\t\ttable.itemSet = table.items.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') {\r\n\t\t\t\t\treturn ['item', r];\r\n\t\t\t\t}\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.items = null;\r\n\t\t}\r\n\t\treturn table.itemSet;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst speciesName = this.dex.species.get(this.species).name;\r\n\t\tconst results = this.getDefaultResults();\r\n\t\tconst speciesSpecific: SearchRow[] = [];\r\n\t\tconst abilitySpecific: SearchRow[] = [];\r\n\t\tconst abilityItem = {\r\n\t\t\tprotosynthesis: 'boosterenergy',\r\n\t\t\tquarkdrive: 'boosterenergy',\r\n\t\t\t// poisonheal: 'toxicorb',\r\n\t\t\t// toxicboost: 'toxicorb',\r\n\t\t\t// flareboost: 'flameorb',\r\n\t\t}[toID(this.set?.ability) as string];\r\n\t\tfor (const row of results) {\r\n\t\t\tif (row[0] !== 'item') continue;\r\n\t\t\tconst item = this.dex.items.get(row[1]);\r\n\t\t\tif (item.itemUser?.includes(speciesName)) speciesSpecific.push(row);\r\n\t\t\tif (abilityItem === item.id) abilitySpecific.push(row);\r\n\t\t}\r\n\t\tif (speciesSpecific.length) {\r\n\t\t\treturn [\r\n\t\t\t\t['header', \"Specific to \" + speciesName],\r\n\t\t\t\t...speciesSpecific,\r\n\t\t\t\t...results,\r\n\t\t\t];\r\n\t\t}\r\n\t\tif (abilitySpecific.length) {\r\n\t\t\treturn [\r\n\t\t\t\t['header', `Specific to ${this.set!.ability!}`],\r\n\t\t\t\t...abilitySpecific,\r\n\t\t\t\t...results,\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\toverride defaultFilter(results: SearchRow[]) {\r\n\t\tif (this.species && !this.dex.species.get(this.species).nfe) {\r\n\t\t\tresults.splice(results.findIndex(row => row[1] === 'eviolite'), 1);\r\n\t\t\treturn results;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\r\n\toverride sortRow: SearchRow = ['sortmove', ''];\r\n\tgetTable() {\r\n\t\treturn BattleMovedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tresults.push(['header', \"Moves\"]);\r\n\t\tfor (let id in BattleMovedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'paleowave':\r\n\t\t\t\tresults.push(['header', \"CAP moves\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'magikarpsrevenge':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['move', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprivate moveIsNotUseless(id: ID, species: Dex.Species, moves: string[], set: Dex.PokemonSet | null) {\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet abilityid: ID = set ? toID(set.ability) : '' as ID;\r\n\t\tconst itemid: ID = set ? toID(set.item) : '' as ID;\r\n\r\n\t\tif (dex.gen === 1) {\r\n\t\t\t// Usually not useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'growth', 'headbutt', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Usually useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'disable', 'haze', 'leechseed', 'quickattack', 'roar', 'thunder', 'toxic', 'triattack', 'waterfall', 'whirlwind',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Not useless only when certain moves aren't present\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\r\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\r\n\t\t\tcase 'doublekick': return !moves.includes('submission');\r\n\t\t\tcase 'firepunch': return !moves.includes('fireblast');\r\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\r\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\r\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\r\n\t\t\tcase 'stomp': return !moves.includes('headbutt');\r\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\r\n\t\t\tcase 'thunderpunch': return !moves.includes('thunderbolt');\r\n\t\t\tcase 'triattack': return !moves.includes('bodyslam');\r\n\t\t\t}\r\n\t\t\t// Useful and Useless moves for Stadium OU, which changes many game mechanics.\r\n\t\t\tif (this.formatType === 'stadium') {\r\n\t\t\t\tif (['doubleedge', 'focusenergy', 'haze'].includes(id)) return true;\r\n\t\t\t\tif (['hyperbeam', 'sing', 'hypnosis'].includes(id)) return false;\r\n\t\t\t\tswitch (id) {\r\n\t\t\t\tcase 'fly': return !moves.includes('drillpeck');\r\n\t\t\t\tcase 'dig': return !moves.includes('earthquake');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'letsgo') {\r\n\t\t\tif (['megadrain', 'teleport'].includes(id)) return true;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\tif (id === 'metronome') return true;\r\n\t\t}\r\n\r\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\r\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\r\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\r\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\r\n\r\n\t\tswitch (id) {\r\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch': case 'trailblaze':\r\n\t\t\treturn abilityid !== 'sheerforce';\r\n\t\tcase 'solarbeam': case 'solarblade':\r\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll', 'orichalcumpulse'].includes(abilityid) || itemid === 'powerherb';\r\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing':\r\n\t\t\treturn abilityid === 'noguard';\r\n\t\tcase 'heatcrash': case 'heavyslam':\r\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\r\n\t\tcase 'aerialace':\r\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\r\n\t\tcase 'ancientpower':\r\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\r\n\t\tcase 'aquajet':\r\n\t\t\treturn !moves.includes('jetpunch');\r\n\t\tcase 'aurawheel':\r\n\t\t\treturn species.baseSpecies === 'Morpeko';\r\n\t\tcase 'axekick':\r\n\t\t\treturn !moves.includes('highjumpkick');\r\n\t\tcase 'bellydrum':\r\n\t\t\treturn moves.includes('aquajet') || moves.includes('jetpunch') || moves.includes('extremespeed') ||\r\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\r\n\t\tcase 'bulletseed':\r\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\r\n\t\tcase 'chillingwater':\r\n\t\t\treturn !moves.includes('scald');\r\n\t\tcase 'counter':\r\n\t\t\treturn species.baseStats.hp >= 65;\r\n\t\tcase 'dazzlinggleam':\r\n\t\t\treturn !moves.includes('alluringvoice') || this.formatType?.includes('doubles');\r\n\t\tcase 'darkvoid':\r\n\t\t\treturn dex.gen < 7;\r\n\t\tcase 'dualwingbeat':\r\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\r\n\t\tcase 'electroshot':\r\n\t\t\treturn true;\r\n\t\tcase 'feint':\r\n\t\t\treturn abilityid === 'refrigerate';\r\n\t\tcase 'futuresight':\r\n\t\t\treturn dex.gen > 5;\r\n\t\tcase 'grassyglide':\r\n\t\t\treturn abilityid === 'grassysurge';\r\n\t\tcase 'gyroball':\r\n\t\t\treturn species.baseStats.spe <= 60;\r\n\t\tcase 'headbutt':\r\n\t\t\treturn abilityid === 'serenegrace';\r\n\t\tcase 'hex':\r\n\t\t\treturn !moves.includes('infernalparade');\r\n\t\tcase 'hiddenpowerelectric':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\r\n\t\tcase 'hiddenpowerfighting':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\r\n\t\tcase 'hiddenpowerfire':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower') &&\r\n\t\t\t\t!moves.includes('mysticalfire') && !moves.includes('burningjealousy');\r\n\t\tcase 'hiddenpowergrass':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('leafblade')) ||\r\n\t\t\t\t(dex.gen > 3 && !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain'));\r\n\t\tcase 'hiddenpowerice':\r\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) ||\r\n\t\t\t\t(dex.gen > 5 && !moves.includes('aurorabeam') && !moves.includes('glaciate'));\r\n\t\tcase 'hiddenpowerflying':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\r\n\t\tcase 'hiddenpowerbug':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\r\n\t\tcase 'hiddenpowerpsychic':\r\n\t\t\treturn species.baseSpecies === 'Unown';\r\n\t\tcase 'hyperspacefury':\r\n\t\t\treturn species.id === 'hoopaunbound';\r\n\t\tcase 'hypnosis':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\r\n\t\tcase 'icepunch':\r\n\t\t\treturn !moves.includes('icespinner') || ['sheerforce', 'ironfist'].includes(abilityid) || itemid === 'punchingglove';\r\n\t\tcase 'iciclecrash':\r\n\t\t\treturn !moves.includes('mountaingale');\r\n\t\tcase 'iciclespear':\r\n\t\t\treturn dex.gen > 3;\r\n\t\tcase 'icywind':\r\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\r\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.formatType === 'doubles';\r\n\t\tcase 'infestation':\r\n\t\t\treturn moves.includes('stickyweb');\r\n\t\tcase 'irondefense':\r\n\t\t\treturn !moves.includes('acidarmor');\r\n\t\tcase 'irontail':\r\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'jumpkick':\r\n\t\t\treturn !moves.includes('highjumpkick') && !moves.includes('axekick');\r\n\t\tcase 'lastresort':\r\n\t\t\treturn set && set.moves.length < 3;\r\n\t\tcase 'leafblade':\r\n\t\t\treturn dex.gen < 4;\r\n\t\tcase 'leechlife':\r\n\t\t\treturn dex.gen > 6;\r\n\t\tcase 'magiccoat':\r\n\t\t\treturn dex.gen > 3;\r\n\t\tcase 'meteorbeam':\r\n\t\t\treturn true;\r\n\t\tcase 'mysticalfire':\r\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\r\n\t\tcase 'naturepower':\r\n\t\t\treturn dex.gen === 5;\r\n\t\tcase 'needlearm':\r\n\t\t\treturn dex.gen < 4;\r\n\t\tcase 'nightslash':\r\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\r\n\t\tcase 'outrage':\r\n\t\t\treturn dex.gen > 3 && !moves.includes('glaiverush');\r\n\t\tcase 'petaldance':\r\n\t\t\treturn abilityid === 'owntempo';\r\n\t\tcase 'phantomforce':\r\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.formatType === 'doubles';\r\n\t\tcase 'poisonfang':\r\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'raindance':\r\n\t\t\treturn dex.gen < 4;\r\n\t\tcase 'relicsong':\r\n\t\t\treturn species.id === 'meloetta';\r\n\t\tcase 'refresh':\r\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\r\n\t\tcase 'risingvoltage':\r\n\t\t\treturn abilityid === 'electricsurge' || abilityid === 'hadronengine';\r\n\t\tcase 'rocktomb':\r\n\t\t\treturn abilityid === 'technician';\r\n\t\tcase 'selfdestruct':\r\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\r\n\t\tcase 'shadowpunch':\r\n\t\t\treturn abilityid === 'ironfist' && !moves.includes('ragefist');\r\n\t\tcase 'shelter':\r\n\t\t\treturn !moves.includes('acidarmor') && !moves.includes('irondefense');\r\n\t\tcase 'skyuppercut':\r\n\t\t\treturn dex.gen < 4;\r\n\t\tcase 'smackdown':\r\n\t\t\treturn species.types.includes('Ground');\r\n\t\tcase 'smartstrike':\r\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\r\n\t\tcase 'soak':\r\n\t\t\treturn abilityid === 'unaware';\r\n\t\tcase 'steelwing':\r\n\t\t\treturn !moves.includes('ironhead');\r\n\t\tcase 'stompingtantrum':\r\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.formatType === 'doubles';\r\n\t\tcase 'stunspore':\r\n\t\t\treturn !moves.includes('thunderwave');\r\n\t\tcase 'sunnyday':\r\n\t\t\treturn dex.gen < 4;\r\n\t\tcase 'technoblast':\r\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\r\n\t\tcase 'teleport':\r\n\t\t\treturn dex.gen > 7;\r\n\t\tcase 'temperflare':\r\n\t\t\treturn (!moves.includes('flareblitz') && !moves.includes('pyroball') && !moves.includes('sacredfire') &&\r\n\t\t\t\t!moves.includes('bitterblade') && !moves.includes('firepunch')) || this.formatType === 'doubles';\r\n\t\tcase 'terrainpulse': case 'waterpulse':\r\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\r\n\t\tcase 'thief':\r\n\t\t\treturn dex.gen === 2;\r\n\t\tcase 'toxicspikes':\r\n\t\t\treturn abilityid !== 'toxicdebris';\r\n\t\tcase 'triattack':\r\n\t\t\treturn dex.gen > 3;\r\n\t\tcase 'trickroom':\r\n\t\t\treturn species.baseStats.spe <= 100;\r\n\t\tcase 'wildcharge':\r\n\t\t\treturn !moves.includes('supercellslam');\r\n\t\tcase 'zapcannon':\r\n\t\t\treturn abilityid === 'noguard' || (dex.gen < 4 && !moves.includes('thunderwave'));\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'doubles' && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tconst move = dex.moves.get(id);\r\n\t\tif (!move.exists) return true;\r\n\t\tif ((move.status === 'slp' || id === 'yawn') && dex.gen === 9 && !this.formatType) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (move.category === 'Status') {\r\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (move.basePower < 75) {\r\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (id === 'skydrop') return true;\r\n\t\t// strong moves\r\n\t\tif (move.flags['charge']) {\r\n\t\t\treturn itemid === 'powerherb';\r\n\t\t}\r\n\t\tif (move.flags['recharge']) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (move.flags['slicing'] && abilityid === 'sharpness') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\r\n\t}\r\n\tstatic readonly GOOD_STATUS_MOVES = [\r\n\t\t'acidarmor', 'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'batonpass', 'bellydrum', 'bulkup', 'burningbulwark', 'calmmind', 'chillyreception', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'encore', 'extremeevoboost', 'filletaway', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'memento', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'reflecttype', 'rest', 'revivalblessing', 'roar', 'rockpolish', 'roost', 'shedtail', 'shellsmash', 'shiftgear', 'shoreup', 'silktrap', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'tidyup', 'toxic', 'transform', 'trick', 'victorydance', 'whirlwind', 'willowisp', 'wish', 'yawn',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_WEAK_MOVES = [\r\n\t\t'accelerock', 'acrobatics', 'aquacutter', 'avalanche', 'barbbarrage', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'ceaselessedge', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'drainingkiss', 'endeavor', 'facade', 'firefang', 'flipturn', 'flowertrick', 'freezedry', 'frustration', 'geargrind', 'gigadrain', 'grassknot', 'gyroball', 'icefang', 'iceshard', 'iciclespear', 'infernalparade', 'knockoff', 'lastrespects', 'lowkick', 'machpunch', 'mortalspin', 'mysticalpower', 'naturesmadness', 'nightshade', 'nuzzle', 'pikapapow', 'populationbomb', 'psychocut', 'psyshieldbash', 'pursuit', 'quickattack', 'ragefist', 'rapidspin', 'return', 'rockblast', 'ruination', 'saltcure', 'scorchingsands', 'seismictoss', 'shadowclaw', 'shadowsneak', 'sizzlyslide', 'stoneaxe', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tachyoncutter', 'tailslap', 'thunderclap', 'tripleaxel', 'tripledive', 'twinbeam', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly BAD_STRONG_MOVES = [\r\n\t\t'belch', 'burnup', 'crushclaw', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'futuresight', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_DOUBLES_MOVES = [\r\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'lunarblessing', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\r\n\t] as ID[] as readonly ID[];\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.species.get(this.species);\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isSTABmons = (format.includes('stabmons') || format === 'staaabmons');\r\n\t\tconst isTradebacks = format.includes('tradebacks');\r\n\t\tconst regionBornLegality = dex.gen >= 6 &&\r\n\t\t\t(/^battle(spot|stadium|festival)/.test(format) || format.startsWith('bss') ||\r\n\t\t\t\tformat.startsWith('vgc') || (dex.gen === 9 && this.formatType !== 'natdex'));\r\n\r\n\t\tlet learnsetid = this.firstLearnsetid(species.id);\r\n\t\tlet moves: string[] = [];\r\n\t\tlet sketchMoves: string[] = [];\r\n\t\tlet sketch = false;\r\n\t\tlet gen = `${dex.gen}`;\r\n\t\tlet lsetTable = BattleTeambuilderTable;\r\n\t\tif (this.formatType?.startsWith('bdsp')) lsetTable = lsetTable['gen8bdsp'];\r\n\t\tif (this.formatType === 'letsgo') lsetTable = lsetTable['gen7letsgo'];\r\n\t\tif (this.formatType === 'bw1') lsetTable = lsetTable['gen5bw1'];\r\n\t\tif (this.formatType === 'rs') lsetTable = lsetTable['gen3rs'];\r\n\t\tif (this.formatType?.startsWith('ssdlc1')) lsetTable = lsetTable['gen8dlc1'];\r\n\t\tif (this.formatType?.startsWith('predlc')) lsetTable = lsetTable['gen9predlc'];\r\n\t\tif (this.formatType?.startsWith('svdlc1')) lsetTable = lsetTable['gen9dlc1'];\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = lsetTable.learnsets[learnsetid];\r\n\t\t\tif (learnset) {\r\n\t\t\t\tfor (let moveid in learnset) {\r\n\t\t\t\t\tlet learnsetEntry = learnset[moveid];\r\n\t\t\t\t\tconst move = dex.moves.get(moveid);\r\n\t\t\t\t\tconst minGenCode: { [gen: number]: string } = { 6: 'p', 7: 'q', 8: 'g', 9: 'a' };\r\n\t\t\t\t\tif (regionBornLegality && !learnsetEntry.includes(minGenCode[dex.gen])) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.eggMovesOnly(learnsetid, species.id) &&\r\n\t\t\t\t\t\t(!learnsetEntry.includes('e') || dex.gen !== 9)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!learnsetEntry.includes(gen) &&\r\n\t\t\t\t\t\t(!isTradebacks ? true : !(move.gen <= dex.gen && learnsetEntry.includes(`${dex.gen + 1}`)))\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.formatType !== 'natdex' && move.isNonstandard === \"Past\") {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.formatType?.startsWith('dlc1') &&\r\n\t\t\t\t\t\tBattleTeambuilderTable['gen8dlc1']?.nonstandardMoves.includes(moveid)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.formatType?.includes('predlc') && this.formatType !== 'predlcnatdex' &&\r\n\t\t\t\t\t\tBattleTeambuilderTable['gen9predlc']?.nonstandardMoves.includes(moveid)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.formatType?.includes('svdlc1') && this.formatType !== 'svdlc1natdex' &&\r\n\t\t\t\t\t\tBattleTeambuilderTable['gen9dlc1']?.nonstandardMoves.includes(moveid)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (moves.includes(moveid)) continue;\r\n\t\t\t\t\tmoves.push(moveid);\r\n\t\t\t\t\tif (moveid === 'sketch') sketch = true;\r\n\t\t\t\t\tif (moveid === 'hiddenpower') {\r\n\t\t\t\t\t\tmoves.push(\r\n\t\t\t\t\t\t\t'hiddenpowerbug', 'hiddenpowerdark', 'hiddenpowerdragon', 'hiddenpowerelectric', 'hiddenpowerfighting', 'hiddenpowerfire', 'hiddenpowerflying', 'hiddenpowerghost', 'hiddenpowergrass', 'hiddenpowerground', 'hiddenpowerice', 'hiddenpowerpoison', 'hiddenpowerpsychic', 'hiddenpowerrock', 'hiddenpowersteel', 'hiddenpowerwater'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, species.id, true);\r\n\t\t}\r\n\t\tif (sketch || isHackmons) {\r\n\t\t\tif (isHackmons) moves = [];\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tif (!format.startsWith('cap') && (id === 'paleowave' || id === 'shadowstrike')) continue;\r\n\t\t\t\tconst move = dex.moves.get(id);\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (sketch) {\r\n\t\t\t\t\tif (move.flags['nosketch'] || move.isMax || move.isZ) continue;\r\n\t\t\t\t\tif (move.isNonstandard && move.isNonstandard !== 'Past') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tsketchMoves.push(move.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!(dex.gen < 8 || this.formatType === 'natdex') && move.isZ) continue;\r\n\t\t\t\t\tif (typeof move.isMax === 'string') continue;\r\n\t\t\t\t\tif (move.isMax && dex.gen > 8) continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'LGPE' && this.formatType !== 'letsgo') continue;\r\n\t\t\t\t\tmoves.push(move.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.formatType === 'metronome') moves = ['metronome'];\r\n\t\tif (isSTABmons) {\r\n\t\t\tfor (let id in this.getTable()) {\r\n\t\t\t\tconst move = dex.moves.get(id);\r\n\t\t\t\tif (moves.includes(move.id)) continue;\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (move.isZ || move.isMax || (move.isNonstandard && move.isNonstandard !== 'Unobtainable')) continue;\r\n\r\n\t\t\t\tconst speciesTypes: string[] = [];\r\n\t\t\t\tconst moveTypes: string[] = [];\r\n\t\t\t\tfor (let i = dex.gen; i >= species.gen && i >= move.gen; i--) {\r\n\t\t\t\t\tconst genDex = Dex.forGen(i);\r\n\t\t\t\t\tmoveTypes.push(genDex.moves.get(move.name).type);\r\n\r\n\t\t\t\t\tconst pokemon = genDex.species.get(species.name);\r\n\t\t\t\t\tlet baseSpecies = genDex.species.get(pokemon.changesFrom || pokemon.name);\r\n\t\t\t\t\tif (!pokemon.battleOnly) speciesTypes.push(...pokemon.types);\r\n\t\t\t\t\tlet prevo = pokemon.prevo;\r\n\t\t\t\t\twhile (prevo) {\r\n\t\t\t\t\t\tconst prevoSpecies = genDex.species.get(prevo);\r\n\t\t\t\t\t\tspeciesTypes.push(...prevoSpecies.types);\r\n\t\t\t\t\t\tprevo = prevoSpecies.prevo;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pokemon.battleOnly && typeof pokemon.battleOnly === 'string') {\r\n\t\t\t\t\t\tspecies = dex.species.get(pokemon.battleOnly);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst excludedForme = (s: Dex.Species) => [\r\n\t\t\t\t\t\t'Alola', 'Alola-Totem', 'Galar', 'Galar-Zen', 'Hisui', 'Paldea', 'Paldea-Combat', 'Paldea-Blaze', 'Paldea-Aqua',\r\n\t\t\t\t\t].includes(s.forme);\r\n\t\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\r\n\t\t\t\t\t\tif (!excludedForme(species)) speciesTypes.push(...baseSpecies.types);\r\n\t\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\r\n\t\t\t\t\t\t\tconst forme = dex.species.get(formeName);\r\n\t\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) speciesTypes.push(...forme.types);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet valid = false;\r\n\t\t\t\tfor (let type of moveTypes) {\r\n\t\t\t\t\tif (speciesTypes.includes(type)) {\r\n\t\t\t\t\t\tvalid = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (valid) moves.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmoves.sort();\r\n\t\tsketchMoves.sort();\r\n\r\n\t\tlet usableMoves: SearchRow[] = [];\r\n\t\tlet uselessMoves: SearchRow[] = [];\r\n\t\tfor (const id of moves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, moves, this.set);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sketchMoves.length) {\r\n\t\t\tusableMoves.push(['header', \"Sketched moves\"]);\r\n\t\t\tuselessMoves.push(['header', \"Useless sketched moves\"]);\r\n\t\t}\r\n\t\tfor (const id of sketchMoves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, sketchMoves, this.set);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...usableMoves, ...uselessMoves];\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'move') return true;\r\n\t\tconst move = this.dex.moves.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (move.type !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tif (move.category !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[] {\r\n\t\tconst sortOrder = reverseSort ? -1 : 1;\r\n\t\tswitch (sortCol) {\r\n\t\tcase 'power':\r\n\t\t\tlet powerTable: { [id: string]: number | undefined } = {\r\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\r\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\r\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\r\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\r\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\r\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\r\n\t\t\t};\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet move1 = this.dex.moves.get(id1);\r\n\t\t\t\tlet move2 = this.dex.moves.get(id2);\r\n\t\t\t\tlet pow1 = move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\r\n\t\t\t\tlet pow2 = move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\r\n\t\t\t\treturn (pow2 - pow1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'accuracy':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet accuracy1 = this.dex.moves.get(id1).accuracy || 0;\r\n\t\t\t\tlet accuracy2 = this.dex.moves.get(id2).accuracy || 0;\r\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\r\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\r\n\t\t\t\treturn (accuracy2 - accuracy1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'pp':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet pp1 = this.dex.moves.get(id1).pp || 0;\r\n\t\t\t\tlet pp2 = this.dex.moves.get(id2).pp || 0;\r\n\t\t\t\treturn (pp2 - pp1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'name':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\r\n\tgetTable() {\r\n\t\treturn { physical: 1, special: 1, status: 1 };\r\n\t}\r\n\tgetDefaultResults(reverseSort?: boolean): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [\r\n\t\t\t['category', 'physical' as ID],\r\n\t\t\t['category', 'special' as ID],\r\n\t\t\t['category', 'status' as ID],\r\n\t\t];\r\n\t\tif (reverseSort) results.reverse();\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\r\n\tgetTable() {\r\n\t\treturn window.BattleTypeChart;\r\n\t}\r\n\tgetDefaultResults(reverseSort?: boolean): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in window.BattleTypeChart) {\r\n\t\t\tresults.push(['type', id as ID]);\r\n\t\t}\r\n\t\tif (reverseSort) results.reverse();\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
