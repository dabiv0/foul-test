{
  "version": 3,
  "sources": ["../../../client/src/battle.ts"],
  "sourcesContent": ["/**\r\n * Pokemon Showdown Battle\r\n *\r\n * This is the main file for handling battle animations\r\n *\r\n * Licensing note: PS's client has complicated licensing:\r\n * - The client as a whole is AGPLv3\r\n * - The battle replay/animation engine (battle-*.ts) by itself is MIT\r\n *\r\n * Layout:\r\n *\r\n * - Battle\r\n *   - Side\r\n *     - Pokemon\r\n *   - BattleScene\r\n *     - BattleLog\r\n *       - BattleTextParser\r\n *\r\n * When a Battle receives a message, it splits the message into tokens\r\n * and parses what happens, updating its own state, and then telling\r\n * BattleScene to do any relevant animations. The tokens then get\r\n * passed directly into BattleLog. If the message is an in-battle\r\n * message, it'll be extracted by BattleTextParser, which adds it to\r\n * both the battle log itself, as well as the messagebar.\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\n// import $ from 'jquery';\r\nimport { BattleSceneStub } from './battle-scene-stub';\r\nimport { BattleLog } from './battle-log';\r\nimport { BattleScene, type PokemonSprite, BattleStatusAnims } from './battle-animations';\r\nimport { Dex, toID, toUserid, type ID, type ModdedDex } from './battle-dex';\r\nimport { BattleTextParser, type Args, type KWArgs, type SideID } from './battle-text-parser';\r\nimport { Teams } from './battle-teams';\r\ndeclare const app: { user: AnyObject, rooms: AnyObject, ignore?: AnyObject } | undefined;\r\n\r\n/** [id, element?, ...misc] */\r\nexport type EffectState = any[] & { 0: ID };\r\nexport type WeatherState = [name: string, minTimeLeft: number, maxTimeLeft: number];\r\nexport type HPColor = 'r' | 'y' | 'g';\r\n\r\nexport class Pokemon implements PokemonDetails, PokemonHealth {\r\n\tname = '';\r\n\tspeciesForme = '';\r\n\r\n\t/**\r\n\t * A string representing information extractable from textual\r\n\t * messages: side, nickname.\r\n\t *\r\n\t * Will be the empty string between Team Preview and the first\r\n\t * switch-in.\r\n\t *\r\n\t * Examples: `p1: Unown` or `p2: Sparky`\r\n\t */\r\n\tident = '';\r\n\t/**\r\n\t * A string representing visible information not included in\r\n\t * ident: species, level, gender, shininess. Level is left off\r\n\t * if it's 100; gender is left off if it's genderless.\r\n\t *\r\n\t * Note: Can be partially filled out in Team Preview, because certain\r\n\t * forme information and shininess isn't visible there. In those\r\n\t * cases, details can change during the first switch-in, but will\r\n\t * otherwise not change over the course of a game.\r\n\t *\r\n\t * Examples: `Mimikyu, L50, F`, `Steelix, M, shiny`\r\n\t */\r\n\tdetails = '';\r\n\t/**\r\n\t * `` `${ident}|${details}` ``. Tracked for ease of searching.\r\n\t *\r\n\t * As with ident, blank before the first switch-in, and will only\r\n\t * change during the first switch-in.\r\n\t */\r\n\tsearchid = '';\r\n\r\n\tside: Side;\r\n\tslot = 0;\r\n\r\n\tfainted = false;\r\n\thp = 0;\r\n\tmaxhp = 1000;\r\n\tlevel = 100;\r\n\tgender: Dex.GenderName = 'N';\r\n\tshiny = false;\r\n\r\n\thpcolor: HPColor = 'g';\r\n\tmoves: string[] = [];\r\n\tability = '';\r\n\tbaseAbility = '';\r\n\titem = '';\r\n\titemEffect = '';\r\n\tprevItem = '';\r\n\tprevItemEffect = '';\r\n\tterastallized = '';\r\n\tteraType = '';\r\n\r\n\tboosts: { [stat: string]: number } = {};\r\n\tstatus: Dex.StatusName | 'tox' | '' | '???' = '';\r\n\tstatusStage = 0;\r\n\tvolatiles: { [effectid: string]: EffectState } = {};\r\n\tturnstatuses: { [effectid: string]: EffectState } = {};\r\n\tmovestatuses: { [effectid: string]: EffectState } = {};\r\n\tlastMove = '';\r\n\r\n\t/** [[moveName, ppUsed]] */\r\n\tmoveTrack: [string, number][] = [];\r\n\tstatusData = { sleepTurns: 0, toxicTurns: 0 };\r\n\ttimesAttacked = 0;\r\n\r\n\tsprite: PokemonSprite;\r\n\r\n\tconstructor(data: PokemonDetails, side: Side) {\r\n\t\tthis.side = side;\r\n\t\tthis.speciesForme = data.speciesForme;\r\n\r\n\t\tthis.details = data.details;\r\n\t\tthis.name = data.name;\r\n\t\tthis.level = data.level;\r\n\t\tthis.shiny = data.shiny;\r\n\t\tthis.gender = data.gender || 'N';\r\n\t\tthis.ident = data.ident;\r\n\t\tthis.terastallized = data.terastallized || '';\r\n\t\tthis.searchid = data.searchid;\r\n\r\n\t\tthis.sprite = side.battle.scene.addPokemonSprite(this);\r\n\t}\r\n\r\n\tisActive() {\r\n\t\treturn this.side.active.includes(this);\r\n\t}\r\n\r\n\t/** @deprecated */\r\n\tprivate getHPColor(): HPColor {\r\n\t\tif (this.hpcolor) return this.hpcolor;\r\n\t\tlet ratio = this.hp / this.maxhp;\r\n\t\tif (ratio > 0.5) return 'g';\r\n\t\tif (ratio > 0.2) return 'y';\r\n\t\treturn 'r';\r\n\t}\r\n\t/** @deprecated */\r\n\tprivate getHPColorClass() {\r\n\t\tswitch (this.getHPColor()) {\r\n\t\tcase 'y': return 'hpbar hpbar-yellow';\r\n\t\tcase 'r': return 'hpbar hpbar-red';\r\n\t\t}\r\n\t\treturn 'hpbar';\r\n\t}\r\n\tstatic getPixelRange(pixels: number, color: HPColor | ''): [number, number] {\r\n\t\tlet epsilon = 0.5 / 714;\r\n\r\n\t\tif (pixels === 0) return [0, 0];\r\n\t\tif (pixels === 1) return [0 + epsilon, 2 / 48 - epsilon];\r\n\t\tif (pixels === 9) {\r\n\t\t\tif (color === 'y') { // ratio is > 0.2\r\n\t\t\t\treturn [0.2 + epsilon, 10 / 48 - epsilon];\r\n\t\t\t} else { // ratio is <= 0.2\r\n\t\t\t\treturn [9 / 48, 0.2];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pixels === 24) {\r\n\t\t\tif (color === 'g') { // ratio is > 0.5\r\n\t\t\t\treturn [0.5 + epsilon, 25 / 48 - epsilon];\r\n\t\t\t} else { // ratio is exactly 0.5\r\n\t\t\t\treturn [0.5, 0.5];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pixels === 48) return [1, 1];\r\n\r\n\t\treturn [pixels / 48, (pixels + 1) / 48 - epsilon];\r\n\t}\r\n\tstatic getFormattedRange(range: [number, number], precision: number, separator: string) {\r\n\t\tif (range[0] === range[1]) {\r\n\t\t\tlet percentage = Math.abs(range[0] * 100);\r\n\t\t\tif (Math.floor(percentage) === percentage) {\r\n\t\t\t\treturn `${percentage}%`;\r\n\t\t\t}\r\n\t\t\treturn percentage.toFixed(precision) + '%';\r\n\t\t}\r\n\t\tlet lower;\r\n\t\tlet upper;\r\n\t\tif (precision === 0) {\r\n\t\t\tlower = Math.floor(range[0] * 100);\r\n\t\t\tupper = Math.ceil(range[1] * 100);\r\n\t\t} else {\r\n\t\t\tlower = (range[0] * 100).toFixed(precision);\r\n\t\t\tupper = (range[1] * 100).toFixed(precision);\r\n\t\t}\r\n\t\treturn `${lower}${separator}${upper}%`;\r\n\t}\r\n\t// Returns [min, max] damage dealt as a proportion of total HP from 0 to 1\r\n\tgetDamageRange(damage: any): [number, number] {\r\n\t\tif (damage[1] !== 48) {\r\n\t\t\tlet ratio = damage[0] / damage[1];\r\n\t\t\treturn [ratio, ratio];\r\n\t\t} else if (damage.length === undefined) {\r\n\t\t\t// wrong pixel damage.\r\n\t\t\t// this case exists for backward compatibility only.\r\n\t\t\treturn [damage[2] / 100, damage[2] / 100];\r\n\t\t}\r\n\t\t// pixel damage\r\n\t\tlet oldrange = Pokemon.getPixelRange(damage[3], damage[4]);\r\n\t\tlet newrange = Pokemon.getPixelRange(damage[3] + damage[0], this.hpcolor);\r\n\t\tif (damage[0] === 0) {\r\n\t\t\t// no change in displayed pixel width\r\n\t\t\treturn [0, newrange[1] - newrange[0]];\r\n\t\t}\r\n\t\tif (oldrange[0] < newrange[0]) { // swap order\r\n\t\t\tlet r = oldrange;\r\n\t\t\toldrange = newrange;\r\n\t\t\tnewrange = r;\r\n\t\t}\r\n\t\treturn [oldrange[0] - newrange[1], oldrange[1] - newrange[0]];\r\n\t}\r\n\thealthParse(hpstring: string, parsedamage?: boolean, heal?: boolean):\r\n\t\t[number, number, number] | [number, number, number, number, HPColor] | null {\r\n\t\t// returns [delta, denominator, percent(, oldnum, oldcolor)] or null\r\n\t\tif (!hpstring?.length) return null;\r\n\t\tlet parenIndex = hpstring.lastIndexOf('(');\r\n\t\tif (parenIndex >= 0) {\r\n\t\t\t// old style damage and health reporting\r\n\t\t\tif (parsedamage) {\r\n\t\t\t\tlet damage = parseFloat(hpstring);\r\n\t\t\t\t// unusual check preseved for backward compatbility\r\n\t\t\t\tif (isNaN(damage)) damage = 50;\r\n\t\t\t\tif (heal) {\r\n\t\t\t\t\tthis.hp += this.maxhp * damage / 100;\r\n\t\t\t\t\tif (this.hp > this.maxhp) this.hp = this.maxhp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.hp -= this.maxhp * damage / 100;\r\n\t\t\t\t}\r\n\t\t\t\t// parse the absolute health information\r\n\t\t\t\tlet ret = this.healthParse(hpstring);\r\n\t\t\t\tif (ret && (ret[1] === 100)) {\r\n\t\t\t\t\t// support for old replays with nearest-100th damage and health\r\n\t\t\t\t\treturn [damage, 100, damage];\r\n\t\t\t\t}\r\n\t\t\t\t// complicated expressions preserved for backward compatibility\r\n\t\t\t\tlet percent = Math.round(Math.ceil(damage * 48 / 100) / 48 * 100);\r\n\t\t\t\tlet pixels = Math.ceil(damage * 48 / 100);\r\n\t\t\t\treturn [pixels, 48, percent];\r\n\t\t\t}\r\n\t\t\tif (hpstring.substr(hpstring.length - 1) !== ')') {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\thpstring = hpstring.substr(parenIndex + 1, hpstring.length - parenIndex - 2);\r\n\t\t}\r\n\r\n\t\tlet oldhp = this.fainted ? 0 : (this.hp || 1);\r\n\t\tlet oldmaxhp = this.maxhp;\r\n\t\tlet oldwidth = this.hpWidth(100);\r\n\t\tlet oldcolor = this.hpcolor;\r\n\r\n\t\tthis.side.battle.parseHealth(hpstring, this);\r\n\t\tif (oldmaxhp === 0) { // max hp not known before parsing this message\r\n\t\t\toldmaxhp = oldhp = this.maxhp;\r\n\t\t}\r\n\r\n\t\tlet oldnum = oldhp ? (Math.floor(this.maxhp * oldhp / oldmaxhp) || 1) : 0;\r\n\t\tlet delta = this.hp - oldnum;\r\n\t\tlet deltawidth = this.hpWidth(100) - oldwidth;\r\n\t\treturn [delta, this.maxhp, deltawidth, oldnum, oldcolor];\r\n\t}\r\n\tcheckDetails(details?: string) {\r\n\t\tif (!details) return false;\r\n\t\tif (details === this.details) return true;\r\n\t\tif (this.searchid) return false;\r\n\t\tif (details.includes(', shiny')) {\r\n\t\t\tif (this.checkDetails(details.replace(', shiny', ''))) return true;\r\n\t\t}\r\n\t\t// the actual forme was hidden on Team Preview\r\n\t\tdetails = details.replace(/(-[A-Za-z0-9-]+)?(, |$)/, '-*$2');\r\n\t\treturn (details === this.details);\r\n\t}\r\n\tgetIdent() {\r\n\t\tlet slots = ['a', 'b', 'c', 'd', 'e', 'f'];\r\n\t\treturn this.ident.substr(0, 2) + slots[this.slot] + this.ident.substr(2);\r\n\t}\r\n\tremoveVolatile(volatile: ID) {\r\n\t\tthis.side.battle.scene.removeEffect(this, volatile);\r\n\t\tif (!this.hasVolatile(volatile)) return;\r\n\t\tdelete this.volatiles[volatile];\r\n\t}\r\n\taddVolatile(volatile: ID, ...args: any[]) {\r\n\t\tif (this.hasVolatile(volatile) && !args.length) return;\r\n\t\tthis.volatiles[volatile] = [volatile, ...args] as EffectState;\r\n\t\tthis.side.battle.scene.addEffect(this, volatile);\r\n\t}\r\n\thasVolatile(volatile: ID) {\r\n\t\treturn !!this.volatiles[volatile];\r\n\t}\r\n\tremoveTurnstatus(volatile: ID) {\r\n\t\tthis.side.battle.scene.removeEffect(this, volatile);\r\n\t\tif (!this.hasTurnstatus(volatile)) return;\r\n\t\tdelete this.turnstatuses[volatile];\r\n\t}\r\n\taddTurnstatus(volatile: ID) {\r\n\t\tvolatile = toID(volatile);\r\n\t\tthis.side.battle.scene.addEffect(this, volatile);\r\n\t\tif (this.hasTurnstatus(volatile)) return;\r\n\t\tthis.turnstatuses[volatile] = [volatile];\r\n\t}\r\n\thasTurnstatus(volatile: ID) {\r\n\t\treturn !!this.turnstatuses[volatile];\r\n\t}\r\n\tclearTurnstatuses() {\r\n\t\tfor (let id in this.turnstatuses) {\r\n\t\t\tthis.removeTurnstatus(id as ID);\r\n\t\t}\r\n\t\tthis.turnstatuses = {};\r\n\t\tthis.side.battle.scene.updateStatbar(this);\r\n\t}\r\n\tremoveMovestatus(volatile: ID) {\r\n\t\tthis.side.battle.scene.removeEffect(this, volatile);\r\n\t\tif (!this.hasMovestatus(volatile)) return;\r\n\t\tdelete this.movestatuses[volatile];\r\n\t}\r\n\taddMovestatus(volatile: ID) {\r\n\t\tvolatile = toID(volatile);\r\n\t\tif (this.hasMovestatus(volatile)) return;\r\n\t\tthis.movestatuses[volatile] = [volatile];\r\n\t\tthis.side.battle.scene.addEffect(this, volatile);\r\n\t}\r\n\thasMovestatus(volatile: ID) {\r\n\t\treturn !!this.movestatuses[volatile];\r\n\t}\r\n\tclearMovestatuses() {\r\n\t\tfor (let id in this.movestatuses) {\r\n\t\t\tthis.removeMovestatus(id as ID);\r\n\t\t}\r\n\t\tthis.movestatuses = {};\r\n\t}\r\n\tclearVolatiles() {\r\n\t\tthis.volatiles = {};\r\n\t\tthis.clearTurnstatuses();\r\n\t\tthis.clearMovestatuses();\r\n\t\tthis.side.battle.scene.clearEffects(this);\r\n\t}\r\n\trememberMove(moveName: string, pp = 1, recursionSource?: string) {\r\n\t\tif (recursionSource === this.ident) return;\r\n\t\tmoveName = Dex.moves.get(moveName).name;\r\n\t\tif (moveName.startsWith('*')) return;\r\n\t\tif (moveName === 'Struggle') return;\r\n\t\tif (this.volatiles.transform) {\r\n\t\t\t// make sure there is no infinite recursion if both Pokemon are transformed into each other\r\n\t\t\tif (!recursionSource) recursionSource = this.ident;\r\n\t\t\tthis.volatiles.transform[1].rememberMove(moveName, 0, recursionSource);\r\n\t\t\tmoveName = '*' + moveName;\r\n\t\t}\r\n\t\tfor (const entry of this.moveTrack) {\r\n\t\t\tif (moveName === entry[0]) {\r\n\t\t\t\tentry[1] += pp;\r\n\t\t\t\tif (entry[1] < 0) entry[1] = 0;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.moveTrack.push([moveName, pp]);\r\n\t}\r\n\trememberAbility(ability: string, isNotBase?: boolean) {\r\n\t\tability = Dex.abilities.get(ability).name;\r\n\t\tthis.ability = ability;\r\n\t\tif (!this.baseAbility && !isNotBase) {\r\n\t\t\tthis.baseAbility = ability;\r\n\t\t}\r\n\t}\r\n\tgetBoost(boostStat: Dex.BoostStatName) {\r\n\t\tlet boostStatTable = {\r\n\t\t\tatk: 'Atk',\r\n\t\t\tdef: 'Def',\r\n\t\t\tspa: 'SpA',\r\n\t\t\tspd: 'SpD',\r\n\t\t\tspe: 'Spe',\r\n\t\t\taccuracy: 'Accuracy',\r\n\t\t\tevasion: 'Evasion',\r\n\t\t\tspc: 'Spc',\r\n\t\t};\r\n\t\tif (!this.boosts[boostStat]) {\r\n\t\t\treturn '1&times;&nbsp;' + boostStatTable[boostStat];\r\n\t\t}\r\n\t\tif (this.boosts[boostStat] > 6) this.boosts[boostStat] = 6;\r\n\t\tif (this.boosts[boostStat] < -6) this.boosts[boostStat] = -6;\r\n\t\tconst isRBY = this.side.battle.gen <= 1 && !this.side.battle.tier.includes('Stadium');\r\n\t\tif (!isRBY && (boostStat === 'accuracy' || boostStat === 'evasion')) {\r\n\t\t\tif (this.boosts[boostStat] > 0) {\r\n\t\t\t\tlet goodBoostTable = [\r\n\t\t\t\t\t'1&times;', '1.33&times;', '1.67&times;', '2&times;', '2.33&times;', '2.67&times;', '3&times;',\r\n\t\t\t\t];\r\n\t\t\t\t// let goodBoostTable = ['Normal', '+1', '+2', '+3', '+4', '+5', '+6'];\r\n\t\t\t\treturn '' + goodBoostTable[this.boosts[boostStat]] + '&nbsp;' + boostStatTable[boostStat];\r\n\t\t\t}\r\n\t\t\tlet badBoostTable = [\r\n\t\t\t\t'1&times;', '0.75&times;', '0.6&times;', '0.5&times;', '0.43&times;', '0.38&times;', '0.33&times;',\r\n\t\t\t];\r\n\t\t\t// let badBoostTable = ['Normal', '&minus;1', '&minus;2', '&minus;3', '&minus;4', '&minus;5', '&minus;6'];\r\n\t\t\treturn '' + badBoostTable[-this.boosts[boostStat]] + '&nbsp;' + boostStatTable[boostStat];\r\n\t\t}\r\n\t\tif (this.boosts[boostStat] > 0) {\r\n\t\t\tlet goodBoostTable = [\r\n\t\t\t\t'1&times;', '1.5&times;', '2&times;', '2.5&times;', '3&times;', '3.5&times;', '4&times;',\r\n\t\t\t];\r\n\t\t\t// let goodBoostTable = ['Normal', '+1', '+2', '+3', '+4', '+5', '+6'];\r\n\t\t\treturn '' + goodBoostTable[this.boosts[boostStat]] + '&nbsp;' + boostStatTable[boostStat];\r\n\t\t}\r\n\t\tlet badBoostTable = [\r\n\t\t\t'1&times;', '0.67&times;', '0.5&times;', '0.4&times;', '0.33&times;', '0.29&times;', '0.25&times;',\r\n\t\t];\r\n\t\t// let badBoostTable = ['Normal', '&minus;1', '&minus;2', '&minus;3', '&minus;4', '&minus;5', '&minus;6'];\r\n\t\treturn '' + badBoostTable[-this.boosts[boostStat]] + '&nbsp;' + boostStatTable[boostStat];\r\n\t}\r\n\tgetWeightKg(serverPokemon?: ServerPokemon) {\r\n\t\tlet autotomizeFactor = this.volatiles.autotomize?.[1] * 100 || 0;\r\n\t\treturn Math.max(this.getSpecies(serverPokemon).weightkg - autotomizeFactor, 0.1);\r\n\t}\r\n\tgetBoostType(boostStat: Dex.BoostStatName) {\r\n\t\tif (!this.boosts[boostStat]) return 'neutral';\r\n\t\tif (this.boosts[boostStat] > 0) return 'good';\r\n\t\treturn 'bad';\r\n\t}\r\n\tclearVolatile() {\r\n\t\tthis.ability = this.baseAbility;\r\n\t\tthis.boosts = {};\r\n\t\tthis.clearVolatiles();\r\n\t\tfor (let i = 0; i < this.moveTrack.length; i++) {\r\n\t\t\tif (this.moveTrack[i][0].startsWith('*')) {\r\n\t\t\t\tthis.moveTrack.splice(i, 1);\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// this.lastMove = '';\r\n\t\tthis.statusStage = 0;\r\n\t\tthis.statusData.toxicTurns = 0;\r\n\t\tif (this.side.battle.gen === 5) this.statusData.sleepTurns = 0;\r\n\t}\r\n\t/**\r\n\t * copyAll = false means Baton Pass,\r\n\t * copyAll = true means Illusion breaking\r\n\t * copyAll = 'shedtail' means Shed Tail\r\n\t */\r\n\tcopyVolatileFrom(pokemon: Pokemon, copySource?: | 'shedtail' | boolean) {\r\n\t\tthis.boosts = pokemon.boosts;\r\n\t\tthis.volatiles = pokemon.volatiles;\r\n\t\t// this.lastMove = pokemon.lastMove; // I think\r\n\t\tif (!copySource) {\r\n\t\t\tconst volatilesToRemove = [\r\n\t\t\t\t'airballoon', 'attract', 'autotomize', 'disable', 'encore', 'foresight', 'gmaxchistrike', 'imprison', 'laserfocus', 'mimic', 'miracleeye', 'nightmare', 'saltcure', 'smackdown', 'stockpile1', 'stockpile2', 'stockpile3', 'syrupbomb', 'torment', 'typeadd', 'typechange', 'yawn',\r\n\t\t\t];\r\n\t\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\t\tvolatilesToRemove.push('protosynthesis' + statName);\r\n\t\t\t\tvolatilesToRemove.push('quarkdrive' + statName);\r\n\t\t\t}\r\n\t\t\tfor (const volatile of volatilesToRemove) {\r\n\t\t\t\tdelete this.volatiles[volatile];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (copySource === 'shedtail') {\r\n\t\t\tfor (let i in this.volatiles) {\r\n\t\t\t\tif (i === 'substitute') continue;\r\n\t\t\t\tdelete this.volatiles[i];\r\n\t\t\t}\r\n\t\t\tthis.boosts = {};\r\n\t\t}\r\n\t\tdelete this.volatiles['transform'];\r\n\t\tdelete this.volatiles['formechange'];\r\n\r\n\t\tpokemon.boosts = {};\r\n\t\tpokemon.volatiles = {};\r\n\t\tpokemon.side.battle.scene.removeTransform(pokemon);\r\n\t\tpokemon.statusStage = 0;\r\n\t}\r\n\tcopyTypesFrom(pokemon: Pokemon, preterastallized = false) {\r\n\t\tconst [types, addedType] = pokemon.getTypes(undefined, preterastallized);\r\n\t\tthis.addVolatile('typechange' as ID, types.join('/'));\r\n\t\tif (addedType) {\r\n\t\t\tthis.addVolatile('typeadd' as ID, addedType);\r\n\t\t} else {\r\n\t\t\tthis.removeVolatile('typeadd' as ID);\r\n\t\t}\r\n\t}\r\n\tgetTypes(serverPokemon?: ServerPokemon, preterastallized = false): [readonly Dex.TypeName[], Dex.TypeName | ''] {\r\n\t\tlet types: readonly Dex.TypeName[];\r\n\t\tif (!preterastallized && this.terastallized && this.terastallized !== 'Stellar') {\r\n\t\t\ttypes = [this.terastallized as Dex.TypeName];\r\n\t\t} else if (this.volatiles.typechange) {\r\n\t\t\ttypes = this.volatiles.typechange[1].split('/');\r\n\t\t} else {\r\n\t\t\ttypes = this.getSpecies(serverPokemon).types;\r\n\t\t}\r\n\t\tif (this.hasTurnstatus('roost' as ID) && types.includes('Flying')) {\r\n\t\t\ttypes = types.filter(typeName => typeName !== 'Flying');\r\n\t\t\tif (!types.length) types = ['Normal'];\r\n\t\t}\r\n\t\tconst addedType = (this.volatiles.typeadd ? this.volatiles.typeadd[1] : '');\r\n\t\treturn [types, addedType];\r\n\t}\r\n\tisGrounded(serverPokemon?: ServerPokemon) {\r\n\t\tconst battle = this.side.battle;\r\n\t\tif (battle.hasPseudoWeather('Gravity')) {\r\n\t\t\treturn true;\r\n\t\t} else if (this.volatiles['ingrain'] && battle.gen >= 4) {\r\n\t\t\treturn true;\r\n\t\t} else if (this.volatiles['smackdown']) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tlet item = toID(serverPokemon ? serverPokemon.item : this.item);\r\n\t\tlet ability = toID(this.effectiveAbility(serverPokemon));\r\n\t\tif (battle.hasPseudoWeather('Magic Room') || this.volatiles['embargo'] || ability === 'klutz') {\r\n\t\t\titem = '' as ID;\r\n\t\t}\r\n\r\n\t\tif (item === 'ironball') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (ability === 'levitate') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (this.volatiles['magnetrise'] || this.volatiles['telekinesis']) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (item === 'airballoon') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn !this.getTypeList(serverPokemon).includes('Flying');\r\n\t}\r\n\teffectiveAbility(serverPokemon?: ServerPokemon) {\r\n\t\tconst ability = this.side.battle.dex.abilities.get(\r\n\t\t\tserverPokemon?.ability || this.ability || serverPokemon?.baseAbility || ''\r\n\t\t);\r\n\t\tif (\r\n\t\t\tthis.fainted ||\r\n\t\t\t(this.volatiles['transform'] && ability.flags['notransform']) ||\r\n\t\t\t(!ability.flags['cantsuppress'] && (this.side.battle.ngasActive() || this.volatiles['gastroacid']))\r\n\t\t) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\treturn ability.name;\r\n\t}\r\n\tgetTypeList(serverPokemon?: ServerPokemon, preterastallized = false) {\r\n\t\tconst [types, addedType] = this.getTypes(serverPokemon, preterastallized);\r\n\t\treturn addedType ? types.concat(addedType) : types;\r\n\t}\r\n\tgetSpeciesForme(serverPokemon?: ServerPokemon): string {\r\n\t\treturn this.volatiles.formechange ? this.volatiles.formechange[1] :\r\n\t\t\t(serverPokemon ? serverPokemon.speciesForme : this.speciesForme);\r\n\t}\r\n\tgetSpecies(serverPokemon?: ServerPokemon) {\r\n\t\treturn this.side.battle.dex.species.get(this.getSpeciesForme(serverPokemon));\r\n\t}\r\n\tgetBaseSpecies() {\r\n\t\treturn this.side.battle.dex.species.get(this.speciesForme);\r\n\t}\r\n\treset() {\r\n\t\tthis.clearVolatile();\r\n\t\tthis.hp = this.maxhp;\r\n\t\tthis.fainted = false;\r\n\t\tthis.status = '';\r\n\t\tthis.moveTrack = [];\r\n\t\tthis.name = this.name || this.speciesForme;\r\n\t}\r\n\t// This function is used for two things:\r\n\t//   1) The percentage to display beside the HP bar.\r\n\t//   2) The width to draw an HP bar.\r\n\t//\r\n\t// This function is NOT used in the calculation of any other displayed\r\n\t// percentages or ranges, which have their own, more complex, formulae.\r\n\thpWidth(maxWidth: number) {\r\n\t\tif (this.fainted || !this.hp) return 0;\r\n\r\n\t\t// special case for low health...\r\n\t\tif (this.hp === 1 && this.maxhp > 45) return 1;\r\n\r\n\t\tif (this.maxhp === 48) {\r\n\t\t\t// Draw the health bar to the middle of the range.\r\n\t\t\t// This affects the width of the visual health bar *only*; it\r\n\t\t\t// does not affect the ranges displayed in any way.\r\n\t\t\tlet range = Pokemon.getPixelRange(this.hp, this.hpcolor);\r\n\t\t\tlet ratio = (range[0] + range[1]) / 2;\r\n\t\t\treturn Math.round(maxWidth * ratio) || 1;\r\n\t\t}\r\n\t\tlet percentage = Math.ceil(100 * this.hp / this.maxhp);\r\n\t\tif ((percentage === 100) && (this.hp < this.maxhp)) {\r\n\t\t\tpercentage = 99;\r\n\t\t}\r\n\t\treturn percentage * maxWidth / 100;\r\n\t}\r\n\tgetHPText(precision = 1) {\r\n\t\treturn Pokemon.getHPText(this, this.side.battle.reportExactHP, precision);\r\n\t}\r\n\tstatic getHPText(pokemon: PokemonHealth, exactHP: boolean, precision = 1) {\r\n\t\tif (exactHP) return `${pokemon.hp}/${pokemon.maxhp}`;\r\n\t\tif (pokemon.maxhp === 100) return `${pokemon.hp}%`;\r\n\t\tif (pokemon.maxhp !== 48) return (100 * pokemon.hp / pokemon.maxhp).toFixed(precision) + '%';\r\n\t\tlet range = Pokemon.getPixelRange(pokemon.hp, pokemon.hpcolor);\r\n\t\treturn Pokemon.getFormattedRange(range, precision, '\\u2013');\r\n\t}\r\n\tdestroy() {\r\n\t\tif (this.sprite) this.sprite.destroy();\r\n\t\tthis.sprite = null!;\r\n\t\tthis.side = null!;\r\n\t}\r\n}\r\n\r\nexport class Side {\r\n\tbattle: Battle;\r\n\tname = '';\r\n\tid = '';\r\n\tsideid: SideID;\r\n\tn: number;\r\n\tisFar: boolean;\r\n\tfoe: Side = null!;\r\n\tally: Side | null = null;\r\n\tavatar = 'unknown';\r\n\tbadges: string[] = [];\r\n\trating = '';\r\n\ttotalPokemon = 6;\r\n\tx = 0;\r\n\ty = 0;\r\n\tz = 0;\r\n\tmissedPokemon: Pokemon = null!;\r\n\r\n\twisher: Pokemon | null = null;\r\n\r\n\tactive = [null] as (Pokemon | null)[];\r\n\tlastPokemon = null as Pokemon | null;\r\n\tpokemon = [] as Pokemon[];\r\n\r\n\tsideConditions: {\r\n\t\t[id: string]: [effectName: string, levels: number, minDuration: number, maxDuration: number],\r\n\t} = {};\r\n\tfaintCounter = 0;\r\n\r\n\tconstructor(battle: Battle, n: number) {\r\n\t\tthis.battle = battle;\r\n\t\tthis.n = n;\r\n\t\tthis.sideid = ['p1', 'p2', 'p3', 'p4'][n] as SideID;\r\n\t\tthis.isFar = !!(n % 2);\r\n\t}\r\n\r\n\trollTrainerSprites() {\r\n\t\tlet sprites = ['lucas', 'dawn', 'ethan', 'lyra', 'hilbert', 'hilda'];\r\n\t\tthis.avatar = sprites[Math.floor(Math.random() * sprites.length)];\r\n\t}\r\n\r\n\tbehindx(offset: number) {\r\n\t\treturn this.x + (!this.isFar ? -1 : 1) * offset;\r\n\t}\r\n\tbehindy(offset: number) {\r\n\t\treturn this.y + (!this.isFar ? 1 : -1) * offset;\r\n\t}\r\n\tleftof(offset: number) {\r\n\t\treturn (!this.isFar ? -1 : 1) * offset;\r\n\t}\r\n\tbehind(offset: number) {\r\n\t\treturn this.z + (!this.isFar ? -1 : 1) * offset;\r\n\t}\r\n\r\n\tclearPokemon() {\r\n\t\tfor (const pokemon of this.pokemon) pokemon.destroy();\r\n\t\tthis.pokemon = [];\r\n\t\tfor (let i = 0; i < this.active.length; i++) this.active[i] = null;\r\n\t\tthis.lastPokemon = null;\r\n\t}\r\n\treset() {\r\n\t\tthis.clearPokemon();\r\n\t\tthis.sideConditions = {};\r\n\t\tthis.faintCounter = 0;\r\n\t}\r\n\tsetAvatar(avatar: string) {\r\n\t\tthis.avatar = avatar;\r\n\t}\r\n\tsetName(name: string, avatar?: string) {\r\n\t\tif (name) this.name = name;\r\n\t\tthis.id = toID(this.name);\r\n\t\tif (avatar) {\r\n\t\t\tthis.setAvatar(avatar);\r\n\t\t} else {\r\n\t\t\tthis.rollTrainerSprites();\r\n\t\t\tif (this.foe && this.avatar === this.foe.avatar) this.rollTrainerSprites();\r\n\t\t}\r\n\t}\r\n\taddSideCondition(effect: Dex.Effect, persist: boolean) {\r\n\t\tlet condition = effect.id;\r\n\t\tif (this.sideConditions[condition]) {\r\n\t\t\tif (condition === 'spikes' || condition === 'toxicspikes') {\r\n\t\t\t\tthis.sideConditions[condition][1]++;\r\n\t\t\t}\r\n\t\t\tthis.battle.scene.addSideCondition(this.n, condition);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Side conditions work as: [effectName, levels, minDuration, maxDuration]\r\n\t\tswitch (condition) {\r\n\t\tcase 'auroraveil':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 5, 8];\r\n\t\t\tbreak;\r\n\t\tcase 'reflect':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 5, this.battle.gen >= 4 ? 8 : 0];\r\n\t\t\tbreak;\r\n\t\tcase 'safeguard':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, persist ? 7 : 5, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'lightscreen':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 5, this.battle.gen >= 4 ? 8 : 0];\r\n\t\t\tbreak;\r\n\t\tcase 'mist':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 5, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'tailwind':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, this.battle.gen >= 5 ? persist ? 6 : 4 : persist ? 5 : 3, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'luckychant':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 5, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'stealthrock':\r\n\t\tcase 'spikes':\r\n\t\tcase 'toxicspikes':\r\n\t\tcase 'stickyweb':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 0, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'gmaxwildfire':\r\n\t\tcase 'gmaxvolcalith':\r\n\t\tcase 'gmaxvinelash':\r\n\t\tcase 'gmaxcannonade':\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 4, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'grasspledge':\r\n\t\t\tthis.sideConditions[condition] = ['Swamp', 1, 4, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'waterpledge':\r\n\t\t\tthis.sideConditions[condition] = ['Rainbow', 1, 4, 0];\r\n\t\t\tbreak;\r\n\t\tcase 'firepledge':\r\n\t\t\tthis.sideConditions[condition] = ['Sea of Fire', 1, 4, 0];\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthis.sideConditions[condition] = [effect.name, 1, 0, 0];\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.battle.scene.addSideCondition(this.n, condition);\r\n\t}\r\n\tremoveSideCondition(condition: string) {\r\n\t\tconst id = toID(condition);\r\n\t\tif (!this.sideConditions[id]) return;\r\n\t\tdelete this.sideConditions[id];\r\n\t\tthis.battle.scene.removeSideCondition(this.n, id);\r\n\t}\r\n\taddPokemon(name: string, ident: string, details: string, replaceSlot = -1) {\r\n\t\tconst oldPokemon = replaceSlot >= 0 ? this.pokemon[replaceSlot] : undefined;\r\n\r\n\t\tconst data = this.battle.parseDetails(name, ident, details);\r\n\t\tconst poke = new Pokemon(data, this);\r\n\t\tif (oldPokemon) {\r\n\t\t\tpoke.item = oldPokemon.item;\r\n\t\t\tpoke.baseAbility = oldPokemon.baseAbility;\r\n\t\t\tpoke.teraType = oldPokemon.teraType;\r\n\t\t}\r\n\r\n\t\tif (!poke.ability && poke.baseAbility) poke.ability = poke.baseAbility;\r\n\t\tpoke.reset();\r\n\t\tif (oldPokemon?.moveTrack.length) poke.moveTrack = oldPokemon.moveTrack;\r\n\r\n\t\tif (replaceSlot >= 0) {\r\n\t\t\tthis.pokemon[replaceSlot] = poke;\r\n\t\t} else {\r\n\t\t\tthis.pokemon.push(poke);\r\n\t\t}\r\n\t\tif (this.pokemon.length > this.totalPokemon || this.battle.speciesClause) {\r\n\t\t\t// check for Illusion\r\n\t\t\tlet existingTable: { [searchid: string]: number } = {};\r\n\t\t\tlet toRemove = -1;\r\n\t\t\tfor (let poke1i = 0; poke1i < this.pokemon.length; poke1i++) {\r\n\t\t\t\tlet poke1 = this.pokemon[poke1i];\r\n\t\t\t\tif (!poke1.searchid) continue;\r\n\t\t\t\tif (poke1.searchid in existingTable) {\r\n\t\t\t\t\tlet poke2i = existingTable[poke1.searchid];\r\n\t\t\t\t\tlet poke2 = this.pokemon[poke2i];\r\n\t\t\t\t\tif (poke === poke1) {\r\n\t\t\t\t\t\ttoRemove = poke2i;\r\n\t\t\t\t\t} else if (poke === poke2) {\r\n\t\t\t\t\t\ttoRemove = poke1i;\r\n\t\t\t\t\t} else if (this.active.includes(poke1)) {\r\n\t\t\t\t\t\ttoRemove = poke2i;\r\n\t\t\t\t\t} else if (this.active.includes(poke2)) {\r\n\t\t\t\t\t\ttoRemove = poke1i;\r\n\t\t\t\t\t} else if (poke1.fainted && !poke2.fainted) {\r\n\t\t\t\t\t\ttoRemove = poke2i;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttoRemove = poke1i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\texistingTable[poke1.searchid] = poke1i;\r\n\t\t\t}\r\n\t\t\tif (toRemove >= 0) {\r\n\t\t\t\tif (this.pokemon[toRemove].fainted) {\r\n\t\t\t\t\t// A fainted Pokemon was actually a Zoroark\r\n\t\t\t\t\tlet illusionFound = null;\r\n\t\t\t\t\tfor (const curPoke of this.pokemon) {\r\n\t\t\t\t\t\tif (curPoke === poke) continue;\r\n\t\t\t\t\t\tif (curPoke.fainted) continue;\r\n\t\t\t\t\t\tif (this.active.includes(curPoke)) continue;\r\n\t\t\t\t\t\tif (curPoke.speciesForme === 'Zoroark' || curPoke.speciesForme === 'Zorua' || curPoke.ability === 'Illusion') {\r\n\t\t\t\t\t\t\tillusionFound = curPoke;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!illusionFound) {\r\n\t\t\t\t\t\t// This is Hackmons; we'll just guess a random unfainted Pokemon.\r\n\t\t\t\t\t\t// This will keep the fainted Pokemon count correct, and will\r\n\t\t\t\t\t\t// eventually become correct as incorrect guesses are switched in\r\n\t\t\t\t\t\t// and reguessed.\r\n\t\t\t\t\t\tfor (const curPoke of this.pokemon) {\r\n\t\t\t\t\t\t\tif (curPoke === poke) continue;\r\n\t\t\t\t\t\t\tif (curPoke.fainted) continue;\r\n\t\t\t\t\t\t\tif (this.active.includes(curPoke)) continue;\r\n\t\t\t\t\t\t\tillusionFound = curPoke;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (illusionFound) {\r\n\t\t\t\t\t\tillusionFound.fainted = true;\r\n\t\t\t\t\t\tillusionFound.hp = 0;\r\n\t\t\t\t\t\tillusionFound.status = '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.pokemon.splice(toRemove, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.battle.scene.updateSidebar(this);\r\n\r\n\t\treturn poke;\r\n\t}\r\n\r\n\tswitchIn(pokemon: Pokemon, kwArgs: KWArgs, slot = pokemon.slot) {\r\n\t\tthis.active[slot] = pokemon;\r\n\t\tpokemon.slot = slot;\r\n\t\tpokemon.clearVolatile();\r\n\t\tpokemon.lastMove = '';\r\n\t\tthis.battle.lastMove = 'switch-in';\r\n\t\tconst effect = Dex.getEffect(kwArgs.from);\r\n\t\tif (['batonpass', 'zbatonpass', 'shedtail'].includes(effect.id)) {\r\n\t\t\tpokemon.copyVolatileFrom(this.lastPokemon!, effect.id === 'shedtail' ? 'shedtail' : false);\r\n\t\t} else if (this.battle.tier.includes(`Relay Race`) && !effect.id) {\r\n\t\t\tif (this.lastPokemon && !this.lastPokemon.fainted) pokemon.copyVolatileFrom(this.lastPokemon, false);\r\n\t\t}\r\n\r\n\t\tthis.battle.scene.animSummon(pokemon, slot);\r\n\t}\r\n\tdragIn(pokemon: Pokemon, slot = pokemon.slot) {\r\n\t\tlet oldpokemon = this.active[slot];\r\n\t\tif (oldpokemon === pokemon) return;\r\n\t\tthis.lastPokemon = oldpokemon;\r\n\t\tif (oldpokemon) {\r\n\t\t\tthis.battle.scene.animDragOut(oldpokemon);\r\n\t\t\toldpokemon.clearVolatile();\r\n\t\t}\r\n\t\tpokemon.clearVolatile();\r\n\t\tpokemon.lastMove = '';\r\n\t\tthis.battle.lastMove = 'switch-in';\r\n\t\tthis.active[slot] = pokemon;\r\n\t\tpokemon.slot = slot;\r\n\r\n\t\tthis.battle.scene.animDragIn(pokemon, slot);\r\n\t}\r\n\treplace(pokemon: Pokemon, slot = pokemon.slot) {\r\n\t\tlet oldpokemon = this.active[slot];\r\n\t\tif (pokemon === oldpokemon) return;\r\n\t\tthis.lastPokemon = oldpokemon;\r\n\t\tpokemon.clearVolatile();\r\n\t\tif (oldpokemon) {\r\n\t\t\tpokemon.lastMove = oldpokemon.lastMove;\r\n\t\t\tpokemon.hp = oldpokemon.hp;\r\n\t\t\tpokemon.maxhp = oldpokemon.maxhp;\r\n\t\t\tpokemon.hpcolor = oldpokemon.hpcolor;\r\n\t\t\tpokemon.status = oldpokemon.status;\r\n\t\t\tpokemon.copyVolatileFrom(oldpokemon, true);\r\n\t\t\tpokemon.statusData = { ...oldpokemon.statusData };\r\n\t\t\tif (oldpokemon.terastallized) {\r\n\t\t\t\tpokemon.terastallized = oldpokemon.terastallized;\r\n\t\t\t\tpokemon.teraType = oldpokemon.terastallized;\r\n\t\t\t\toldpokemon.terastallized = '';\r\n\t\t\t\toldpokemon.teraType = '';\r\n\t\t\t}\r\n\t\t\t// we don't know anything about the illusioned pokemon except that it's not fainted\r\n\t\t\t// technically we also know its status but only at the end of the turn, not here\r\n\t\t\toldpokemon.fainted = false;\r\n\t\t\toldpokemon.hp = oldpokemon.maxhp;\r\n\t\t\toldpokemon.status = '???';\r\n\t\t}\r\n\t\tthis.active[slot] = pokemon;\r\n\t\tpokemon.slot = slot;\r\n\r\n\t\tif (oldpokemon) {\r\n\t\t\tthis.battle.scene.animUnsummon(oldpokemon, true);\r\n\t\t}\r\n\t\tthis.battle.scene.animSummon(pokemon, slot, true);\r\n\t}\r\n\tswitchOut(pokemon: Pokemon, kwArgs: KWArgs, slot = pokemon.slot) {\r\n\t\tconst effect = Dex.getEffect(kwArgs.from);\r\n\t\tif (!['batonpass', 'zbatonpass', 'shedtail'].includes(effect.id) &&\r\n\t\t\t!(this.battle.tier.includes(`Relay Race`) && !effect.id)) {\r\n\t\t\tpokemon.clearVolatile();\r\n\t\t} else {\r\n\t\t\tpokemon.removeVolatile('transform' as ID);\r\n\t\t\tpokemon.removeVolatile('formechange' as ID);\r\n\t\t}\r\n\t\tif (!['batonpass', 'zbatonpass', 'shedtail', 'teleport'].includes(effect.id) &&\r\n\t\t\t!(this.battle.tier.includes(`Relay Race`) && !effect.id)) {\r\n\t\t\tthis.battle.log(['switchout', pokemon.ident], { from: effect.id });\r\n\t\t}\r\n\t\tpokemon.statusData.toxicTurns = 0;\r\n\t\tif (this.battle.gen === 5) pokemon.statusData.sleepTurns = 0;\r\n\t\tthis.lastPokemon = pokemon;\r\n\t\tthis.active[slot] = null;\r\n\r\n\t\tthis.battle.scene.animUnsummon(pokemon);\r\n\t}\r\n\tswapTo(pokemon: Pokemon, slot: number) {\r\n\t\tif (pokemon.slot === slot) return;\r\n\t\tlet target = this.active[slot];\r\n\r\n\t\tlet oslot = pokemon.slot;\r\n\r\n\t\tpokemon.slot = slot;\r\n\t\tif (target) target.slot = oslot;\r\n\r\n\t\tthis.active[slot] = pokemon;\r\n\t\tthis.active[oslot] = target;\r\n\r\n\t\tthis.battle.scene.animUnsummon(pokemon, true);\r\n\t\tif (target) this.battle.scene.animUnsummon(target, true);\r\n\r\n\t\tthis.battle.scene.animSummon(pokemon, slot, true);\r\n\t\tif (target) this.battle.scene.animSummon(target, oslot, true);\r\n\t}\r\n\tswapWith(pokemon: Pokemon, target: Pokemon, kwArgs: KWArgs) {\r\n\t\t// method provided for backwards compatibility only\r\n\t\tif (pokemon === target) return;\r\n\r\n\t\tlet oslot = pokemon.slot;\r\n\t\tlet nslot = target.slot;\r\n\r\n\t\tpokemon.slot = nslot;\r\n\t\ttarget.slot = oslot;\r\n\t\tthis.active[nslot] = pokemon;\r\n\t\tthis.active[oslot] = target;\r\n\r\n\t\tthis.battle.scene.animUnsummon(pokemon, true);\r\n\t\tthis.battle.scene.animUnsummon(target, true);\r\n\r\n\t\tthis.battle.scene.animSummon(pokemon, nslot, true);\r\n\t\tthis.battle.scene.animSummon(target, oslot, true);\r\n\t}\r\n\tfaint(pokemon: Pokemon, slot = pokemon.slot) {\r\n\t\tpokemon.clearVolatile();\r\n\t\tthis.lastPokemon = pokemon;\r\n\t\tthis.active[slot] = null;\r\n\r\n\t\tpokemon.fainted = true;\r\n\t\tpokemon.hp = 0;\r\n\t\tpokemon.terastallized = '';\r\n\t\tpokemon.details = pokemon.details.replace(/, tera:[a-z]+/i, '');\r\n\t\tpokemon.searchid = pokemon.searchid.replace(/, tera:[a-z]+/i, '');\r\n\t\tif (pokemon.side.faintCounter < 100) pokemon.side.faintCounter++;\r\n\r\n\t\tthis.battle.scene.animFaint(pokemon);\r\n\t}\r\n\tdestroy() {\r\n\t\tthis.clearPokemon();\r\n\t\tthis.battle = null!;\r\n\t\tthis.foe = null!;\r\n\t}\r\n}\r\n\r\nexport interface PokemonDetails {\r\n\tdetails: string;\r\n\tname: string;\r\n\tspeciesForme: string;\r\n\tlevel: number;\r\n\tshiny: boolean;\r\n\tgender: Dex.GenderName | '';\r\n\tident: string;\r\n\tterastallized: string;\r\n\tsearchid: string;\r\n}\r\nexport interface PokemonHealth {\r\n\thp: number;\r\n\tmaxhp: number;\r\n\thpcolor: HPColor | '';\r\n\tstatus: Dex.StatusName | 'tox' | '' | '???';\r\n\tfainted?: boolean;\r\n}\r\nexport interface ServerPokemon extends PokemonDetails, PokemonHealth {\r\n\tident: string;\r\n\tdetails: string;\r\n\tcondition: string;\r\n\tactive: boolean;\r\n\t/** unboosted stats */\r\n\tstats: {\r\n\t\tatk: number,\r\n\t\tdef: number,\r\n\t\tspa: number,\r\n\t\tspd: number,\r\n\t\tspe: number,\r\n\t};\r\n\t/** currently an ID, will revise to name */\r\n\tmoves: string[];\r\n\t/** currently an ID, will revise to name */\r\n\tbaseAbility: string;\r\n\t/** currently an ID, will revise to name */\r\n\tability?: string;\r\n\t/** currently an ID, will revise to name */\r\n\titem: string;\r\n\t/** currently an ID, will revise to name */\r\n\tpokeball: string;\r\n\t/** always the Tera Type of the Pokemon, regardless of whether it is terastallized or not */\r\n\tteraType: string;\r\n\t/** falsy if the pokemon is not terastallized, otherwise it is the Tera Type of the Pokemon */\r\n\tterastallized: string;\r\n}\r\n\r\nexport class Battle {\r\n\tscene: BattleSceneStub;\r\n\r\n\tviewpointSwitched = false;\r\n\r\n\tstepQueue: string[];\r\n\t/** See battle.instantAdd */\r\n\tpreemptStepQueue: string[] = [];\r\n\twaitForAnimations: true | false | 'simult' = true;\r\n\t/** the index of `stepQueue` currently being animated */\r\n\tcurrentStep = 0;\r\n\t/** null = not seeking, 0 = seek start, Infinity = seek end, otherwise: seek turn number */\r\n\tseeking: number | null = null;\r\n\r\n\tactiveMoveIsSpread: string | null = null;\r\n\r\n\tsubscription: ((state:\r\n\t\t'playing' | 'paused' | 'turn' | 'atqueueend' | 'callback' | 'ended' | 'error'\r\n\t) => void) | null;\r\n\r\n\tmute = false;\r\n\tmessageFadeTime = 300;\r\n\tmessageShownTime = 1;\r\n\t/** for tracking when to accelerate animations in long battles full of double switches */\r\n\tturnsSinceMoved = 0;\r\n\r\n\t/**\r\n\t * * `-1` = non-battle RoomGames, or hasn't hit Team Preview or `|start`\r\n\t * * `0` = after Team Preview or `|start` but before `|turn|1`\r\n\t */\r\n\tturn = -1;\r\n\t/**\r\n\t * Are we at the end of the queue and waiting for more input?\r\n\t *\r\n\t * In addition to at the end of a battle, this is also true if you're\r\n\t * playing/watching a battle live, and waiting for a player to make a move.\r\n\t */\r\n\tatQueueEnd = false;\r\n\t/**\r\n\t * Has the battle ever been played or fast-forwarded?\r\n\t *\r\n\t * This is not exactly `turn > 0` because if you start playing a replay,\r\n\t * then pause before turn 1, `turn` will still be 0, but playback should\r\n\t * be considered started (for the purposes of displaying \"Play\" vs \"Resume\")\r\n\t */\r\n\tstarted = false;\r\n\t/**\r\n\t * Has playback gotten to the point where a player has won or tied?\r\n\t * (Affects whether BGM is playing)\r\n\t */\r\n\tended = false;\r\n\tisReplay = false;\r\n\tusesUpkeep = false;\r\n\tweather = '' as ID;\r\n\tpseudoWeather = [] as WeatherState[];\r\n\tweatherTimeLeft = 0;\r\n\tweatherMinTimeLeft = 0;\r\n\t/**\r\n\t * The side from which perspective we're viewing. Should be identical to\r\n\t * `nearSide` except in multi battles, where `nearSide` is always the first\r\n\t * near side, and `mySide` is the active player.\r\n\t */\r\n\tmySide: Side = null!;\r\n\tnearSide: Side = null!;\r\n\tfarSide: Side = null!;\r\n\tp1: Side = null!;\r\n\tp2: Side = null!;\r\n\tp3?: Side = null!;\r\n\tp4?: Side = null!;\r\n\tpokemonControlled = 0;\r\n\tsides: Side[] = null!;\r\n\tmyPokemon: ServerPokemon[] | null = null;\r\n\tmyAllyPokemon: ServerPokemon[] | null = null;\r\n\tlastMove = '';\r\n\r\n\tgen = 8;\r\n\tdex: ModdedDex = Dex;\r\n\tteamPreviewCount = 0;\r\n\tspeciesClause = false;\r\n\ttier = '';\r\n\tgameType: 'singles' | 'doubles' | 'triples' | 'multi' | 'freeforall' | 'rotation' = 'singles';\r\n\tcompatMode = true;\r\n\trated: string | boolean = false;\r\n\trules: { [ruleName: string]: 1 | undefined } = {};\r\n\tisBlitz = false;\r\n\treportExactHP = false;\r\n\tendLastTurnPending = false;\r\n\ttotalTimeLeft = 0;\r\n\tgraceTimeLeft = 0;\r\n\t/**\r\n\t * true: timer on, state unknown\r\n\t * false: timer off\r\n\t * number: seconds left this turn\r\n\t */\r\n\tkickingInactive: number | boolean = false;\r\n\r\n\t// options\r\n\tid = '';\r\n\t/** used to forward some information to the room in the old client */\r\n\troomid = '';\r\n\thardcoreMode = false;\r\n\tignoreNicks = !!Dex.prefs('ignorenicks');\r\n\tignoreOpponent = !!Dex.prefs('ignoreopp');\r\n\tignoreSpects = !!Dex.prefs('ignorespects');\r\n\tdebug: boolean;\r\n\tjoinButtons = false;\r\n\tautoresize: boolean;\r\n\r\n\t/**\r\n\t * The actual pause state. Will only be true if playback is actually\r\n\t * paused, not just waiting for the opponent to make a move.\r\n\t */\r\n\tpaused: boolean;\r\n\r\n\tconstructor(options: {\r\n\t\t$frame?: JQuery,\r\n\t\t$logFrame?: JQuery,\r\n\t\tid?: ID,\r\n\t\tlog?: string[] | string | null,\r\n\t\tpaused?: boolean,\r\n\t\tisReplay?: boolean,\r\n\t\tdebug?: boolean,\r\n\t\tsubscription?: Battle['subscription'],\r\n\t\t/** autoresize `$frame` for browsers below 640px width (mobile) */\r\n\t\tautoresize?: boolean,\r\n\t} = {}) {\r\n\t\tthis.id = options.id || '';\r\n\r\n\t\tif (options.$frame && options.$logFrame) {\r\n\t\t\tthis.scene = new BattleScene(this, options.$frame, options.$logFrame);\r\n\t\t} else if (!options.$frame && !options.$logFrame) {\r\n\t\t\tthis.scene = new BattleSceneStub();\r\n\t\t} else {\r\n\t\t\tthrow new Error(`You must specify $frame and $logFrame simultaneously`);\r\n\t\t}\r\n\r\n\t\tthis.paused = !!options.paused;\r\n\t\tthis.started = !this.paused;\r\n\t\tthis.debug = !!options.debug;\r\n\t\tif (typeof options.log === 'string') options.log = options.log.split('\\n');\r\n\t\tthis.stepQueue = options.log || [];\r\n\t\tthis.subscription = options.subscription || null;\r\n\t\tthis.autoresize = !!options.autoresize;\r\n\r\n\t\tthis.p1 = new Side(this, 0);\r\n\t\tthis.p2 = new Side(this, 1);\r\n\t\tthis.sides = [this.p1, this.p2];\r\n\t\tthis.p2.foe = this.p1;\r\n\t\tthis.p1.foe = this.p2;\r\n\t\tthis.nearSide = this.mySide = this.p1;\r\n\t\tthis.farSide = this.p2;\r\n\r\n\t\tthis.resetStep();\r\n\t\tif (this.autoresize) {\r\n\t\t\twindow.addEventListener('resize', this.onResize);\r\n\t\t\tthis.onResize();\r\n\t\t}\r\n\t}\r\n\r\n\tonResize = () => {\r\n\t\tconst width = $(window).width()!;\r\n\t\tif (width < 950 || this.hardcoreMode) {\r\n\t\t\tthis.messageShownTime = 500;\r\n\t\t} else {\r\n\t\t\tthis.messageShownTime = 1;\r\n\t\t}\r\n\t\tif (width && width < 640) {\r\n\t\t\tconst scale = (width / 640);\r\n\t\t\tthis.scene.$frame?.css('transform', `scale(${scale})`);\r\n\t\t\tthis.scene.$frame?.css('transform-origin', 'top left');\r\n\t\t\tthis.scene.$frame?.css('margin-bottom', `${360 * scale - 360}px`);\r\n\t\t\t// this.$foeHint.css('transform', 'scale(' + scale + ')');\r\n\t\t} else {\r\n\t\t\tthis.scene.$frame?.css('transform', 'none');\r\n\t\t\t// this.$foeHint.css('transform', 'none');\r\n\t\t\tthis.scene.$frame?.css('margin-bottom', '0');\r\n\t\t}\r\n\t};\r\n\r\n\tsubscribe(listener: Battle['subscription']) {\r\n\t\tthis.subscription = listener;\r\n\t}\r\n\r\n\tremovePseudoWeather(weather: string) {\r\n\t\tfor (let i = 0; i < this.pseudoWeather.length; i++) {\r\n\t\t\tif (this.pseudoWeather[i][0] === weather) {\r\n\t\t\t\tthis.pseudoWeather.splice(i, 1);\r\n\t\t\t\tthis.scene.updateWeather();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\taddPseudoWeather(weather: string, minTimeLeft: number, timeLeft: number) {\r\n\t\tthis.pseudoWeather.push([weather, minTimeLeft, timeLeft]);\r\n\t\tthis.scene.updateWeather();\r\n\t}\r\n\thasPseudoWeather(weather: string) {\r\n\t\tfor (const [pseudoWeatherName] of this.pseudoWeather) {\r\n\t\t\tif (weather === pseudoWeatherName) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetAllActive() {\r\n\t\tconst pokemonList = [];\r\n\t\t// Sides 3 and 4 are synced with sides 1 and 2, so they don't need to be checked\r\n\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\tconst side = this.sides[i];\r\n\t\t\tfor (const active of side.active) {\r\n\t\t\t\tif (active && !active.fainted) {\r\n\t\t\t\t\tpokemonList.push(active);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pokemonList;\r\n\t}\r\n\t// Used in Pokemon#effectiveAbility over abilityActive to prevent infinite recursion\r\n\tngasActive() {\r\n\t\tfor (const active of this.getAllActive()) {\r\n\t\t\tif (active.ability === 'Neutralizing Gas' && !active.volatiles['gastroacid']) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tabilityActive(abilities: string | string[]) {\r\n\t\tif (typeof abilities === 'string') abilities = [abilities];\r\n\t\tabilities = abilities.map(toID);\r\n\t\tfor (const active of this.getAllActive()) {\r\n\t\t\tif (abilities.includes(toID(active.effectiveAbility()))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treset() {\r\n\t\tthis.paused = true;\r\n\t\tthis.scene.pause();\r\n\t\tthis.resetStep();\r\n\t\tthis.subscription?.('paused');\r\n\t}\r\n\tresetStep() {\r\n\t\t// battle state\r\n\t\tthis.turn = -1;\r\n\t\tthis.started = !this.paused;\r\n\t\tthis.ended = false;\r\n\t\tthis.atQueueEnd = false;\r\n\t\tthis.weather = '' as ID;\r\n\t\tthis.weatherTimeLeft = 0;\r\n\t\tthis.weatherMinTimeLeft = 0;\r\n\t\tthis.pseudoWeather = [];\r\n\t\tthis.lastMove = '';\r\n\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tif (side) side.reset();\r\n\t\t}\r\n\t\tthis.myPokemon = null;\r\n\t\tthis.myAllyPokemon = null;\r\n\r\n\t\t// DOM state\r\n\t\tthis.scene.reset();\r\n\r\n\t\t// activity queue state\r\n\t\tthis.activeMoveIsSpread = null;\r\n\t\tthis.currentStep = 0;\r\n\t\tthis.resetTurnsSinceMoved();\r\n\t\tthis.nextStep();\r\n\t}\r\n\tdestroy() {\r\n\t\tif (this.autoresize) {\r\n\t\t\twindow.removeEventListener('resize', this.onResize);\r\n\t\t}\r\n\t\tthis.scene.destroy();\r\n\r\n\t\tfor (let i = 0; i < this.sides.length; i++) {\r\n\t\t\tif (this.sides[i]) this.sides[i].destroy();\r\n\t\t\tthis.sides[i] = null!;\r\n\t\t}\r\n\t\tthis.mySide = null!;\r\n\t\tthis.nearSide = null!;\r\n\t\tthis.farSide = null!;\r\n\t\tthis.p1 = null!;\r\n\t\tthis.p2 = null!;\r\n\t\tthis.p3 = null!;\r\n\t\tthis.p4 = null!;\r\n\t}\r\n\r\n\tlog(args: Args, kwArgs?: KWArgs, preempt?: boolean) {\r\n\t\tthis.scene.log.add(args, kwArgs, preempt);\r\n\t}\r\n\r\n\tresetToCurrentTurn() {\r\n\t\tthis.seekTurn(this.ended ? Infinity : this.turn, true);\r\n\t}\r\n\tswitchViewpoint() {\r\n\t\tthis.setViewpoint(this.viewpointSwitched ? 'p1' : 'p2');\r\n\t}\r\n\tsetViewpoint(sideid: SideID) {\r\n\t\tif (this.mySide.sideid === sideid) return;\r\n\t\tif (sideid.length !== 2 || !sideid.startsWith('p')) return;\r\n\t\tconst side = this[sideid];\r\n\t\tif (!side) return;\r\n\t\tthis.mySide = side;\r\n\r\n\t\tif ((side.n % 2) === this.p1.n) {\r\n\t\t\tthis.viewpointSwitched = false;\r\n\t\t\tthis.nearSide = this.p1;\r\n\t\t\tthis.farSide = this.p2;\r\n\t\t} else {\r\n\t\t\tthis.viewpointSwitched = true;\r\n\t\t\tthis.nearSide = this.p2;\r\n\t\t\tthis.farSide = this.p1;\r\n\t\t}\r\n\t\tthis.nearSide.isFar = false;\r\n\t\tthis.farSide.isFar = true;\r\n\t\tif (this.sides.length > 2) {\r\n\t\t\tthis.sides[this.nearSide.n + 2].isFar = false;\r\n\t\t\tthis.sides[this.farSide.n + 2].isFar = true;\r\n\t\t}\r\n\r\n\t\tthis.resetToCurrentTurn();\r\n\t}\r\n\r\n\t//\r\n\t// activities\r\n\t//\r\n\tstart() {\r\n\t\tthis.log(['start']);\r\n\t\tthis.resetTurnsSinceMoved();\r\n\t}\r\n\twinner(winner?: string) {\r\n\t\tthis.log(['win', winner || '']);\r\n\t\tthis.ended = true;\r\n\t\tthis.subscription?.('ended');\r\n\t}\r\n\tprematureEnd() {\r\n\t\tthis.log(['message', 'This replay ends here.']);\r\n\t\tthis.ended = true;\r\n\t\tthis.subscription?.('ended');\r\n\t}\r\n\tendLastTurn() {\r\n\t\tif (this.endLastTurnPending) {\r\n\t\t\tthis.endLastTurnPending = false;\r\n\t\t\tthis.scene.updateStatbars();\r\n\t\t}\r\n\t}\r\n\tsetHardcoreMode(mode: boolean) {\r\n\t\tthis.hardcoreMode = mode;\r\n\t\tthis.scene.updateSidebars();\r\n\t\tthis.scene.updateWeather(true);\r\n\t}\r\n\tsetTurn(turnNum: number) {\r\n\t\tif (turnNum === this.turn + 1) {\r\n\t\t\tthis.endLastTurnPending = true;\r\n\t\t}\r\n\t\tif (this.turn && !this.usesUpkeep) this.updateTurnCounters(); // for compatibility with old replays\r\n\t\tthis.turn = turnNum;\r\n\t\tthis.started = true;\r\n\r\n\t\tif (this.seeking === null) this.turnsSinceMoved++;\r\n\r\n\t\tthis.scene.incrementTurn();\r\n\r\n\t\tif (this.seeking !== null) {\r\n\t\t\tif (turnNum >= this.seeking) {\r\n\t\t\t\tthis.stopSeeking();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.subscription?.('turn');\r\n\t\t}\r\n\t}\r\n\tresetTurnsSinceMoved() {\r\n\t\tthis.turnsSinceMoved = 0;\r\n\t\tthis.scene.updateAcceleration();\r\n\t}\r\n\tchangeWeather(weatherName: string, poke?: Pokemon, isUpkeep?: boolean, ability?: Dex.Effect) {\r\n\t\tlet weather = toID(weatherName);\r\n\t\tif (!weather || weather === 'none') {\r\n\t\t\tweather = '' as ID;\r\n\t\t}\r\n\t\tif (isUpkeep) {\r\n\t\t\tif (this.weather && this.weatherTimeLeft) {\r\n\t\t\t\tthis.weatherTimeLeft--;\r\n\t\t\t\tif (this.weatherMinTimeLeft !== 0) this.weatherMinTimeLeft--;\r\n\t\t\t}\r\n\t\t\tif (this.seeking === null) {\r\n\t\t\t\tthis.scene.upkeepWeather();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (weather) {\r\n\t\t\tlet isExtremeWeather = (weather === 'deltastream' || weather === 'desolateland' || weather === 'primordialsea');\r\n\t\t\tif (poke) {\r\n\t\t\t\tif (ability) {\r\n\t\t\t\t\tthis.activateAbility(poke, ability.name);\r\n\t\t\t\t}\r\n\t\t\t\tthis.weatherTimeLeft = (this.gen <= 5 || isExtremeWeather) ? 0 : 8;\r\n\t\t\t\tthis.weatherMinTimeLeft = (this.gen <= 5 || isExtremeWeather) ? 0 : 5;\r\n\t\t\t} else if (isExtremeWeather) {\r\n\t\t\t\tthis.weatherTimeLeft = 0;\r\n\t\t\t\tthis.weatherMinTimeLeft = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.weatherTimeLeft = (this.gen <= 3 ? 5 : 8);\r\n\t\t\t\tthis.weatherMinTimeLeft = (this.gen <= 3 ? 0 : 5);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.weather = weather;\r\n\t\tthis.scene.updateWeather();\r\n\t}\r\n\tswapSideConditions() {\r\n\t\tconst sideConditions = [\r\n\t\t\t'mist', 'lightscreen', 'reflect', 'spikes', 'safeguard', 'tailwind', 'toxicspikes', 'stealthrock', 'waterpledge', 'firepledge', 'grasspledge', 'stickyweb', 'auroraveil', 'gmaxsteelsurge', 'gmaxcannonade', 'gmaxvinelash', 'gmaxwildfire',\r\n\t\t];\r\n\t\tif (this.gameType === 'freeforall') {\r\n\t\t\t// TODO: Add FFA support\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet side1 = this.sides[0];\r\n\t\tlet side2 = this.sides[1];\r\n\t\tfor (const id of sideConditions) {\r\n\t\t\tif (side1.sideConditions[id] && side2.sideConditions[id]) {\r\n\t\t\t\t[side1.sideConditions[id], side2.sideConditions[id]] = [\r\n\t\t\t\t\tside2.sideConditions[id], side1.sideConditions[id],\r\n\t\t\t\t];\r\n\t\t\t\tthis.scene.addSideCondition(side1.n, id as ID);\r\n\t\t\t\tthis.scene.addSideCondition(side2.n, id as ID);\r\n\t\t\t} else if (side1.sideConditions[id] && !side2.sideConditions[id]) {\r\n\t\t\t\tside2.sideConditions[id] = side1.sideConditions[id];\r\n\t\t\t\tthis.scene.addSideCondition(side2.n, id as ID);\r\n\t\t\t\tside1.removeSideCondition(id);\r\n\t\t\t} else if (side2.sideConditions[id] && !side1.sideConditions[id]) {\r\n\t\t\t\tside1.sideConditions[id] = side2.sideConditions[id];\r\n\t\t\t\tthis.scene.addSideCondition(side1.n, id as ID);\r\n\t\t\t\tside2.removeSideCondition(id);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tupdateTurnCounters() {\r\n\t\tfor (const pWeather of this.pseudoWeather) {\r\n\t\t\tif (pWeather[1]) pWeather[1]--;\r\n\t\t\tif (pWeather[2]) pWeather[2]--;\r\n\t\t}\r\n\t\tfor (const side of this.sides) {\r\n\t\t\tfor (const id in side.sideConditions) {\r\n\t\t\t\tlet cond = side.sideConditions[id];\r\n\t\t\t\tif (cond[2]) cond[2]--;\r\n\t\t\t\tif (cond[3]) cond[3]--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (const poke of [...this.nearSide.active, ...this.farSide.active]) {\r\n\t\t\tif (poke) {\r\n\t\t\t\tif (poke.status === 'tox') poke.statusData.toxicTurns++;\r\n\t\t\t\tpoke.clearTurnstatuses();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.scene.updateWeather();\r\n\t}\r\n\tuseMove(pokemon: Pokemon, move: Dex.Move, target: Pokemon | null, kwArgs: KWArgs) {\r\n\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\t\tthis.activateAbility(pokemon, fromeffect);\r\n\t\tpokemon.clearMovestatuses();\r\n\t\tif (move.id === 'focuspunch') {\r\n\t\t\tpokemon.removeTurnstatus('focuspunch' as ID);\r\n\t\t}\r\n\t\tthis.scene.updateStatbar(pokemon);\r\n\t\tif (fromeffect.id === 'sleeptalk') {\r\n\t\t\tpokemon.rememberMove(move.name, 0);\r\n\t\t}\r\n\t\tlet callerMoveForPressure = null;\r\n\t\t// will not include effects that are conditions named after moves like Magic Coat and Snatch, which is good\r\n\t\tif (fromeffect.id && kwArgs.from.startsWith(\"move:\")) {\r\n\t\t\tcallerMoveForPressure = fromeffect as Dex.Move;\r\n\t\t}\r\n\t\tif (!fromeffect.id || callerMoveForPressure || fromeffect.id === 'pursuit') {\r\n\t\t\tlet moveName = move.name;\r\n\t\t\tif (!callerMoveForPressure) {\r\n\t\t\t\tif (move.isZ) {\r\n\t\t\t\t\tpokemon.item = move.isZ;\r\n\t\t\t\t\tlet item = Dex.items.get(move.isZ);\r\n\t\t\t\t\tif (item.zMoveFrom) moveName = item.zMoveFrom;\r\n\t\t\t\t} else if (move.name.startsWith('Z-')) {\r\n\t\t\t\t\tmoveName = moveName.slice(2);\r\n\t\t\t\t\tmove = Dex.moves.get(moveName);\r\n\t\t\t\t\tif (window.BattleItems) {\r\n\t\t\t\t\t\tfor (let item in BattleItems) {\r\n\t\t\t\t\t\t\tif (BattleItems[item].zMoveType === move.type) pokemon.item = item;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet pp = 1;\r\n\t\t\tif (this.abilityActive('Pressure') && move.id !== 'stickyweb') {\r\n\t\t\t\tconst foeTargets = [];\r\n\t\t\t\tconst moveTarget = move.pressureTarget;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\t!target && this.gameType === 'singles' &&\r\n\t\t\t\t\t!['self', 'allies', 'allySide', 'adjacentAlly', 'adjacentAllyOrSelf', 'allyTeam'].includes(moveTarget)\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Hardcode for moves without a target in singles\r\n\t\t\t\t\tfoeTargets.push(pokemon.side.foe.active[0]);\r\n\t\t\t\t} else if (['all', 'allAdjacent', 'allAdjacentFoes', 'foeSide'].includes(moveTarget)) {\r\n\t\t\t\t\tfor (const active of this.getAllActive()) {\r\n\t\t\t\t\t\tif (active === pokemon) continue;\r\n\t\t\t\t\t\t// Pressure affects allies in gen 3 and 4\r\n\t\t\t\t\t\tif (this.gen <= 4 || (active.side !== pokemon.side && active.side.ally !== pokemon.side)) {\r\n\t\t\t\t\t\t\tfoeTargets.push(active);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (target && target.side !== pokemon.side) {\r\n\t\t\t\t\tfoeTargets.push(target);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const foe of foeTargets) {\r\n\t\t\t\t\tif (foe && !foe.fainted && foe.effectiveAbility() === 'Pressure') {\r\n\t\t\t\t\t\tpp += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!callerMoveForPressure) {\r\n\t\t\t\tpokemon.rememberMove(moveName, pp);\r\n\t\t\t} else {\r\n\t\t\t\tpokemon.rememberMove(callerMoveForPressure.name, pp - 1); // 1 pp was already deducted from using the move itself\r\n\t\t\t}\r\n\t\t}\r\n\t\tpokemon.lastMove = move.id;\r\n\t\tthis.lastMove = move.id;\r\n\t\tif (move.id === 'wish' || move.id === 'healingwish') {\r\n\t\t\tpokemon.side.wisher = pokemon;\r\n\t\t}\r\n\t}\r\n\tanimateMove(pokemon: Pokemon, move: Dex.Move, target: Pokemon | null, kwArgs: KWArgs) {\r\n\t\tthis.activeMoveIsSpread = kwArgs.spread;\r\n\t\tif (this.seeking !== null || kwArgs.still) return;\r\n\r\n\t\tif (!target) target = pokemon.side.foe.active[0];\r\n\t\tif (!target) target = pokemon.side.foe.missedPokemon;\r\n\t\tif (kwArgs.miss && target.side) {\r\n\t\t\ttarget = target.side.missedPokemon;\r\n\t\t}\r\n\t\tif (kwArgs.notarget) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (kwArgs.prepare || kwArgs.anim === 'prepare') {\r\n\t\t\tthis.scene.runPrepareAnim(move.id, pokemon, target);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet usedMove = kwArgs.anim ? Dex.moves.get(kwArgs.anim) : move;\r\n\t\tif (!kwArgs.spread) {\r\n\t\t\tthis.scene.runMoveAnim(usedMove.id, [pokemon, target]);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet targets = [pokemon];\r\n\t\tif (kwArgs.spread === '.') {\r\n\t\t\t//  no target was hit by the attack\r\n\t\t\ttargets.push(target.side.missedPokemon);\r\n\t\t} else {\r\n\t\t\tfor (const hitTarget of kwArgs.spread.split(',')) {\r\n\t\t\t\tconst curTarget = this.getPokemon(hitTarget + ': ?');\r\n\t\t\t\tif (!curTarget) {\r\n\t\t\t\t\tthis.log(['error', `Invalid spread move target: \"${hitTarget}\"`]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\ttargets.push(curTarget);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.scene.runMoveAnim(usedMove.id, targets);\r\n\t}\r\n\tcantUseMove(pokemon: Pokemon, effect: Dex.Effect, move: Dex.Move, kwArgs: KWArgs) {\r\n\t\tpokemon.clearMovestatuses();\r\n\t\tthis.scene.updateStatbar(pokemon);\r\n\t\tif (effect.id in BattleStatusAnims) {\r\n\t\t\tthis.scene.runStatusAnim(effect.id, [pokemon]);\r\n\t\t}\r\n\t\tthis.activateAbility(pokemon, effect);\r\n\t\tif (move.id) pokemon.rememberMove(move.name, 0);\r\n\t\tswitch (effect.id) {\r\n\t\tcase 'par':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Paralyzed', 'par');\r\n\t\t\tbreak;\r\n\t\tcase 'frz':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Frozen', 'frz');\r\n\t\t\tbreak;\r\n\t\tcase 'slp':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Asleep', 'slp');\r\n\t\t\tpokemon.statusData.sleepTurns++;\r\n\t\t\tbreak;\r\n\t\tcase 'truant':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Loafing around', 'neutral');\r\n\t\t\tbreak;\r\n\t\tcase 'recharge':\r\n\t\t\tthis.scene.runOtherAnim('selfstatus' as ID, [pokemon]);\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Must recharge', 'neutral');\r\n\t\t\tbreak;\r\n\t\tcase 'focuspunch':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Lost focus', 'neutral');\r\n\t\t\tpokemon.removeTurnstatus('focuspunch' as ID);\r\n\t\t\tbreak;\r\n\t\tcase 'shelltrap':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Trap failed', 'neutral');\r\n\t\t\tpokemon.removeTurnstatus('shelltrap' as ID);\r\n\t\t\tbreak;\r\n\t\tcase 'flinch':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Flinched', 'neutral');\r\n\t\t\tpokemon.removeTurnstatus('focuspunch' as ID);\r\n\t\t\tbreak;\r\n\t\tcase 'attract':\r\n\t\t\tthis.scene.resultAnim(pokemon, 'Immobilized', 'neutral');\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.scene.animReset(pokemon);\r\n\t}\r\n\r\n\tactivateAbility(pokemon: Pokemon | null, effectOrName: Dex.Effect | string, isNotBase?: boolean) {\r\n\t\tif (!pokemon || !effectOrName) return;\r\n\t\tif (typeof effectOrName !== 'string') {\r\n\t\t\tif (effectOrName.effectType !== 'Ability') return;\r\n\t\t\teffectOrName = effectOrName.name;\r\n\t\t}\r\n\t\tthis.scene.abilityActivateAnim(pokemon, effectOrName);\r\n\t\tpokemon.rememberAbility(effectOrName, isNotBase);\r\n\t}\r\n\r\n\trunMinor(args: Args, kwArgs: KWArgs, nextArgs?: Args, nextKwargs?: KWArgs) {\r\n\t\tif (nextArgs && nextKwargs) {\r\n\t\t\tif (args[2] === 'Sturdy' && args[0] === '-activate') {\r\n\t\t\t\targs[2] = 'ability: Sturdy';\r\n\t\t\t}\r\n\t\t\tif (['-crit', '-supereffective', '-resisted'].includes(args[0]) || args[2] === 'ability: Sturdy') {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-damage' && !kwArgs.from && args[1] !== nextArgs[1] && (\r\n\t\t\t\t['-crit', '-supereffective', '-resisted'].includes(nextArgs[0]) ||\r\n\t\t\t\t(nextArgs[0] === '-damage' && !nextKwargs.from)\r\n\t\t\t)) {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-damage' && nextArgs[0] === '-damage' && kwArgs.from && kwArgs.from === nextKwargs.from) {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-heal' && nextArgs[0] === '-heal' && kwArgs.from && kwArgs.from === nextKwargs.from) {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-ability' && (args[2] === 'Intimidate' || args[3] === 'boost')) {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-unboost' && nextArgs[0] === '-unboost') {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-boost' && nextArgs[0] === '-boost') {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === '-damage' && kwArgs.from === 'Leech Seed' && nextArgs[0] === '-heal' && nextKwargs.silent) {\r\n\t\t\t\tkwArgs.then = '.';\r\n\t\t\t}\r\n\t\t\tif (args[0] === 'detailschange' && nextArgs[0] === '-mega') {\r\n\t\t\t\tif (this.scene.closeMessagebar()) {\r\n\t\t\t\t\tthis.currentStep--;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tkwArgs.simult = '.';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (kwArgs.then) this.waitForAnimations = false;\r\n\t\tif (kwArgs.simult) this.waitForAnimations = 'simult';\r\n\r\n\t\tconst CONSUMED = ['eaten', 'popped', 'consumed', 'held up'];\r\n\t\tswitch (args[0]) {\r\n\t\tcase '-damage': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet damage = poke.healthParse(args[2], true);\r\n\t\t\tif (damage === null) break;\r\n\t\t\tlet range = poke.getDamageRange(damage);\r\n\r\n\t\t\tif (kwArgs.from) {\r\n\t\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\t\tthis.activateAbility(ofpoke, effect);\r\n\t\t\t\tif (effect.effectType === 'Item') {\r\n\t\t\t\t\tconst itemPoke = ofpoke || poke;\r\n\t\t\t\t\tif (itemPoke.prevItem !== effect.name && !CONSUMED.includes(itemPoke.prevItemEffect)) {\r\n\t\t\t\t\t\titemPoke.item = effect.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'brn':\r\n\t\t\t\t\tthis.scene.runStatusAnim('brn' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'psn':\r\n\t\t\t\t\tthis.scene.runStatusAnim('psn' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'baddreams':\r\n\t\t\t\t\tthis.scene.runStatusAnim('cursed' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'curse':\r\n\t\t\t\t\tthis.scene.runStatusAnim('cursed' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'confusion':\r\n\t\t\t\t\tthis.scene.runStatusAnim('confusedselfhit' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'leechseed':\r\n\t\t\t\t\tthis.scene.runOtherAnim('leech' as ID, [ofpoke!, poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'bind':\r\n\t\t\t\tcase 'wrap':\r\n\t\t\t\t\tthis.scene.runOtherAnim('bound' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this.dex.moves.get(this.lastMove).category !== 'Status') {\r\n\t\t\t\t\tpoke.timesAttacked++;\r\n\t\t\t\t}\r\n\t\t\t\tlet damageinfo = '' + Pokemon.getFormattedRange(range, damage[1] === 100 ? 0 : 1, '\\u2013');\r\n\t\t\t\tif (damage[1] !== 100) {\r\n\t\t\t\t\tlet hover = `${(damage[0] < 0) ? '\\u2212' : ''}${Math.abs(damage[0])}/${damage[1]}`;\r\n\t\t\t\t\tif (damage[1] === 48) { // this is a hack\r\n\t\t\t\t\t\thover += ' pixels';\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// battle-log will convert this into <abbr>\r\n\t\t\t\t\tdamageinfo = '||' + hover + '||' + damageinfo + '||';\r\n\t\t\t\t}\r\n\t\t\t\targs[3] = damageinfo;\r\n\t\t\t}\r\n\t\t\tthis.scene.damageAnim(poke, Pokemon.getFormattedRange(range, 0, ' to '));\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-heal': {\r\n\t\t\tlet poke = this.getPokemon(args[1], Dex.getEffect(kwArgs.from).id === 'revivalblessing')!;\r\n\t\t\tlet damage = poke.healthParse(args[2], true, true);\r\n\t\t\tif (damage === null) break;\r\n\t\t\tlet range = poke.getDamageRange(damage);\r\n\r\n\t\t\tif (kwArgs.from) {\r\n\t\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\t\tthis.activateAbility(ofpoke || poke, effect);\r\n\t\t\t\tif (effect.effectType === 'Item' && !CONSUMED.includes(poke.prevItemEffect)) {\r\n\t\t\t\t\tif (poke.prevItem !== effect.name) {\r\n\t\t\t\t\t\tpoke.item = effect.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'lunardance':\r\n\t\t\t\t\tfor (let trackedMove of poke.moveTrack) {\r\n\t\t\t\t\t\ttrackedMove[1] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tcase 'healingwish':\r\n\t\t\t\t\tthis.lastMove = 'healing-wish';\r\n\t\t\t\t\tthis.scene.runResidualAnim('healingwish' as ID, poke);\r\n\t\t\t\t\tpoke.side.wisher = null;\r\n\t\t\t\t\tpoke.statusData.sleepTurns = 0;\r\n\t\t\t\t\tpoke.statusData.toxicTurns = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'wish':\r\n\t\t\t\t\tthis.scene.runResidualAnim('wish' as ID, poke);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'revivalblessing':\r\n\t\t\t\t\tthis.scene.runResidualAnim('wish' as ID, poke);\r\n\t\t\t\t\tconst { siden } = this.parsePokemonId(args[1]);\r\n\t\t\t\t\tconst side = this.sides[siden];\r\n\t\t\t\t\tpoke.fainted = false;\r\n\t\t\t\t\tpoke.status = '';\r\n\t\t\t\t\tthis.scene.updateSidebar(side);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.scene.runOtherAnim('heal' as ID, [poke]);\r\n\t\t\tthis.scene.healAnim(poke, Pokemon.getFormattedRange(range, 0, ' to '));\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-sethp': {\r\n\t\t\tfor (let k = 0; k < 2; k++) {\r\n\t\t\t\tlet cpoke = this.getPokemon(args[1 + 2 * k]);\r\n\t\t\t\tif (cpoke) {\r\n\t\t\t\t\tlet damage = cpoke.healthParse(args[2 + 2 * k])!;\r\n\t\t\t\t\tlet range = cpoke.getDamageRange(damage);\r\n\t\t\t\t\tlet formattedRange = Pokemon.getFormattedRange(range, 0, ' to ');\r\n\t\t\t\t\tlet diff = damage[0];\r\n\t\t\t\t\tif (diff > 0) {\r\n\t\t\t\t\t\tthis.scene.healAnim(cpoke, formattedRange);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.scene.damageAnim(cpoke, formattedRange);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-boost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet stat = args[2] as Dex.BoostStatName;\r\n\t\t\tif (this.gen === 1 && stat === 'spd') break;\r\n\t\t\tif (this.gen === 1 && stat === 'spa') stat = 'spc';\r\n\t\t\tlet amount = parseInt(args[3], 10);\r\n\t\t\tif (amount === 0) {\r\n\t\t\t\tthis.scene.resultAnim(poke, 'already ' + poke.getBoost(stat), 'neutral');\r\n\t\t\t\tthis.log(args, kwArgs);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!poke.boosts[stat]) {\r\n\t\t\t\tpoke.boosts[stat] = 0;\r\n\t\t\t}\r\n\t\t\tpoke.boosts[stat] += amount;\r\n\r\n\t\t\tif (!kwArgs.silent && kwArgs.from) {\r\n\t\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\t\tif (!(effect.id === 'weakarmor' && stat === 'spe')) {\r\n\t\t\t\t\tthis.activateAbility(ofpoke || poke, effect);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, poke.getBoost(stat), 'good');\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-unboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet stat = args[2] as Dex.BoostStatName;\r\n\t\t\tif (this.gen === 1 && stat === 'spd') break;\r\n\t\t\tif (this.gen === 1 && stat === 'spa') stat = 'spc';\r\n\t\t\tlet amount = parseInt(args[3], 10);\r\n\t\t\tif (amount === 0) {\r\n\t\t\t\tthis.scene.resultAnim(poke, 'already ' + poke.getBoost(stat), 'neutral');\r\n\t\t\t\tthis.log(args, kwArgs);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!poke.boosts[stat]) {\r\n\t\t\t\tpoke.boosts[stat] = 0;\r\n\t\t\t}\r\n\t\t\tpoke.boosts[stat] -= amount;\r\n\r\n\t\t\tif (!kwArgs.silent && kwArgs.from) {\r\n\t\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\t\tthis.activateAbility(ofpoke || poke, effect);\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, poke.getBoost(stat), 'bad');\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-setboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet stat = args[2] as Dex.BoostStatName;\r\n\t\t\tlet amount = parseInt(args[3], 10);\r\n\t\t\tpoke.boosts[stat] = amount;\r\n\t\t\tthis.scene.resultAnim(poke, poke.getBoost(stat), (amount > 0 ? 'good' : 'bad'));\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-swapboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet poke2 = this.getPokemon(args[2])!;\r\n\t\t\tlet stats = args[3] ? args[3].split(', ') : ['atk', 'def', 'spa', 'spd', 'spe', 'accuracy', 'evasion'];\r\n\t\t\tfor (const stat of stats) {\r\n\t\t\t\tlet tmp = poke.boosts[stat];\r\n\t\t\t\tpoke.boosts[stat] = poke2.boosts[stat];\r\n\t\t\t\tif (!poke.boosts[stat]) delete poke.boosts[stat];\r\n\t\t\t\tpoke2.boosts[stat] = tmp;\r\n\t\t\t\tif (!poke2.boosts[stat]) delete poke2.boosts[stat];\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, 'Stats swapped', 'neutral');\r\n\t\t\tthis.scene.resultAnim(poke2, 'Stats swapped', 'neutral');\r\n\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-clearpositiveboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet ofpoke = this.getPokemon(args[2]);\r\n\t\t\tlet effect = Dex.getEffect(args[3]);\r\n\t\t\tfor (const stat in poke.boosts) {\r\n\t\t\t\tif (poke.boosts[stat] > 0) delete poke.boosts[stat];\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, 'Boosts lost', 'bad');\r\n\r\n\t\t\tif (effect.id) {\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'spectralthief':\r\n\t\t\t\t\t// todo: update StealBoosts so it animates 1st on Spectral Thief\r\n\t\t\t\t\tthis.scene.runOtherAnim('spectralthiefboost' as ID, [ofpoke!, poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-clearnegativeboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tfor (const stat in poke.boosts) {\r\n\t\t\t\tif (poke.boosts[stat] < 0) delete poke.boosts[stat];\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, 'Restored', 'good');\r\n\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-copyboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet frompoke = this.getPokemon(args[2])!;\r\n\t\t\tif (!kwArgs.silent && kwArgs.from) {\r\n\t\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\t\tthis.activateAbility(poke, effect);\r\n\t\t\t}\r\n\t\t\tlet stats = args[3] ? args[3].split(', ') : ['atk', 'def', 'spa', 'spd', 'spe', 'accuracy', 'evasion'];\r\n\t\t\tfor (const stat of stats) {\r\n\t\t\t\tpoke.boosts[stat] = frompoke.boosts[stat];\r\n\t\t\t\tif (!poke.boosts[stat]) delete poke.boosts[stat];\r\n\t\t\t}\r\n\t\t\tif (this.gen >= 6) {\r\n\t\t\t\tconst volatilesToCopy = ['focusenergy', 'gmaxchistrike', 'laserfocus'];\r\n\t\t\t\tfor (const volatile of volatilesToCopy) {\r\n\t\t\t\t\tif (frompoke.volatiles[volatile]) {\r\n\t\t\t\t\t\tpoke.addVolatile(volatile as ID);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpoke.removeVolatile(volatile as ID);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, 'Stats copied', 'neutral');\r\n\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-clearboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tpoke.boosts = {};\r\n\t\t\tif (!kwArgs.silent && kwArgs.from) {\r\n\t\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\t\tthis.activateAbility(ofpoke || poke, effect);\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, 'Stats reset', 'neutral');\r\n\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-invertboost': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tfor (const stat in poke.boosts) {\r\n\t\t\t\tpoke.boosts[stat] = -poke.boosts[stat];\r\n\t\t\t}\r\n\t\t\tthis.scene.resultAnim(poke, 'Stats inverted', 'neutral');\r\n\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-clearallboost': {\r\n\t\t\tlet timeOffset = this.scene.timeOffset;\r\n\t\t\tfor (const active of this.getAllActive()) {\r\n\t\t\t\tactive.boosts = {};\r\n\t\t\t\tthis.scene.timeOffset = timeOffset;\r\n\t\t\t\tthis.scene.resultAnim(active, 'Stats reset', 'neutral');\r\n\t\t\t}\r\n\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-crit': {\r\n\t\t\tlet poke = this.getPokemon(args[1]);\r\n\t\t\tif (poke) this.scene.resultAnim(poke, 'Critical hit', 'bad');\r\n\t\t\tif (this.activeMoveIsSpread) kwArgs.spread = '.';\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-supereffective': {\r\n\t\t\tlet poke = this.getPokemon(args[1]);\r\n\t\t\tif (poke) {\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Super-effective', 'bad');\r\n\t\t\t\tif (Dex.afdMode === true) {\r\n\t\t\t\t\t// April Fool's 2018\r\n\t\t\t\t\tthis.scene.runOtherAnim('hitmark' as ID, [poke]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.activeMoveIsSpread) kwArgs.spread = '.';\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-resisted': {\r\n\t\t\tlet poke = this.getPokemon(args[1]);\r\n\t\t\tif (poke) this.scene.resultAnim(poke, 'Resisted', 'neutral');\r\n\t\t\tif (this.activeMoveIsSpread) kwArgs.spread = '.';\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-immune': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\t\t\tthis.activateAbility(this.getPokemon(kwArgs.of) || poke, fromeffect);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tthis.scene.resultAnim(poke, 'Immune', 'neutral');\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-miss': {\r\n\t\t\tlet target = this.getPokemon(args[2]);\r\n\t\t\tif (target) {\r\n\t\t\t\tthis.scene.resultAnim(target, 'Missed', 'neutral');\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-fail': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\tif (fromeffect.id === 'clearamulet') {\r\n\t\t\t\tofpoke!.item = 'Clear Amulet';\r\n\t\t\t} else {\r\n\t\t\t\tthis.activateAbility(ofpoke || poke, fromeffect);\r\n\t\t\t}\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'brn':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Already burned', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tox':\r\n\t\t\tcase 'psn':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Already poisoned', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'slp':\r\n\t\t\t\tif (fromeffect.id === 'uproar') {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Failed', 'neutral');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Already asleep', 'neutral');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'par':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Already paralyzed', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'frz':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Already frozen', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'unboost':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Stat drop blocked', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (poke) {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Failed', 'neutral');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.scene.animReset(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-block': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tthis.activateAbility(ofpoke || poke, effect);\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'quickguard':\r\n\t\t\t\tpoke.addTurnstatus('quickguard' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Quick Guard', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'wideguard':\r\n\t\t\t\tpoke.addTurnstatus('wideguard' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Wide Guard', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'craftyshield':\r\n\t\t\t\tpoke.addTurnstatus('craftyshield' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Crafty Shield', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'protect':\r\n\t\t\t\tpoke.addTurnstatus('protect' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Protected', 'good');\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'safetygoggles':\r\n\t\t\t\tpoke.item = 'Safety Goggles';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'protectivepads':\r\n\t\t\t\tpoke.item = 'Protective Pads';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'abilityshield':\r\n\t\t\t\tpoke.item = 'Ability Shield';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-center': case '-notarget': case '-ohko':\r\n\t\tcase '-combine': case '-hitcount': case '-waiting': case '-zbroken': {\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-zpower': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tthis.scene.runOtherAnim('zpower' as ID, [poke]);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-prepare': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet moveid = toID(args[2]);\r\n\t\t\tlet target = this.getPokemon(args[3]) || poke.side.foe.active[0] || poke;\r\n\t\t\tthis.scene.runPrepareAnim(moveid, poke, target);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-mustrecharge': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tpoke.addMovestatus('mustrecharge' as ID);\r\n\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-status': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\tlet ofpoke = this.getPokemon(kwArgs.of) || poke;\r\n\t\t\tpoke.status = args[2] as Dex.StatusName;\r\n\t\t\tthis.activateAbility(ofpoke || poke, effect);\r\n\t\t\tif (effect.effectType === 'Item') {\r\n\t\t\t\tofpoke.item = effect.name;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (args[2]) {\r\n\t\t\tcase 'brn':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Burned', 'brn');\r\n\t\t\t\tthis.scene.runStatusAnim('brn' as ID, [poke]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tox':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Toxic poison', 'psn');\r\n\t\t\t\tthis.scene.runStatusAnim('psn' as ID, [poke]);\r\n\t\t\t\tpoke.statusData.toxicTurns = (effect.name === \"Toxic Orb\" ? -1 : 0);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'psn':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Poisoned', 'psn');\r\n\t\t\t\tthis.scene.runStatusAnim('psn' as ID, [poke]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'slp':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Asleep', 'slp');\r\n\t\t\t\tif (effect.id === 'rest') {\r\n\t\t\t\t\tpoke.statusData.sleepTurns = 0; // for Gen 2 use through Sleep Talk\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'par':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Paralyzed', 'par');\r\n\t\t\t\tthis.scene.runStatusAnim('par' as ID, [poke]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'frz':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Frozen', 'frz');\r\n\t\t\t\tthis.scene.runStatusAnim('frz' as ID, [poke]);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-curestatus': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\r\n\t\t\tif (effect.id) {\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'flamewheel':\r\n\t\t\t\tcase 'flareblitz':\r\n\t\t\t\tcase 'fusionflare':\r\n\t\t\t\tcase 'sacredfire':\r\n\t\t\t\tcase 'scald':\r\n\t\t\t\tcase 'steameruption':\r\n\t\t\t\t\tkwArgs.thaw = '.';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (poke) {\r\n\t\t\t\tpoke.status = '';\r\n\t\t\t\tswitch (args[2]) {\r\n\t\t\t\tcase 'brn':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Burn cured', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'tox':\r\n\t\t\t\tcase 'psn':\r\n\t\t\t\t\tpoke.statusData.toxicTurns = 0;\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Poison cured', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'slp':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Woke up', 'good');\r\n\t\t\t\t\tpoke.statusData.sleepTurns = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'par':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Paralysis cured', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'frz':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Thawed', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tpoke.removeVolatile('confusion' as ID);\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Cured', 'good');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-cureteam': { // For old gens when the whole team was always cured\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tfor (const target of poke.side.pokemon) {\r\n\t\t\t\ttarget.status = '';\r\n\t\t\t\tthis.scene.updateStatbarIfExists(target);\r\n\t\t\t}\r\n\r\n\t\t\tthis.scene.resultAnim(poke, 'Team Cured', 'good');\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-item': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet item = Dex.items.get(args[2]);\r\n\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\tif (!poke) {\r\n\t\t\t\tif (effect.id === 'frisk') {\r\n\t\t\t\t\tconst possibleTargets = ofpoke!.side.foe.active.filter(p => p !== null);\r\n\t\t\t\t\tif (possibleTargets.length === 1) {\r\n\t\t\t\t\t\tpoke = possibleTargets[0]!;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.activateAbility(ofpoke, \"Frisk\");\r\n\t\t\t\t\t\tthis.log(args, kwArgs);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error('No Pokemon in -item message');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpoke.item = item.name;\r\n\t\t\tpoke.itemEffect = '';\r\n\t\t\tpoke.removeVolatile('airballoon' as ID);\r\n\t\t\tif (item.id === 'airballoon') poke.addVolatile('airballoon' as ID);\r\n\r\n\t\t\tif (effect.id) {\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'pickup':\r\n\t\t\t\t\tthis.activateAbility(poke, \"Pickup\");\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tcase 'recycle':\r\n\t\t\t\t\tpoke.itemEffect = 'found';\r\n\t\t\t\t\tthis.scene.resultAnim(poke, item.name, 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'frisk':\r\n\t\t\t\t\tthis.activateAbility(ofpoke, \"Frisk\");\r\n\t\t\t\t\tif (poke && poke !== ofpoke) { // used for gen 6\r\n\t\t\t\t\t\tpoke.itemEffect = 'frisked';\r\n\t\t\t\t\t\tthis.scene.resultAnim(poke, item.name, 'neutral');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'magician':\r\n\t\t\t\tcase 'pickpocket':\r\n\t\t\t\t\tthis.activateAbility(poke, effect.name);\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tcase 'thief':\r\n\t\t\t\tcase 'covet':\r\n\t\t\t\t\t// simulate the removal of the item from the ofpoke\r\n\t\t\t\t\tofpoke!.item = '';\r\n\t\t\t\t\tofpoke!.itemEffect = '';\r\n\t\t\t\t\tofpoke!.prevItem = item.name;\r\n\t\t\t\t\tofpoke!.prevItemEffect = 'stolen';\r\n\t\t\t\t\tofpoke!.addVolatile('itemremoved' as ID);\r\n\t\t\t\t\tpoke.itemEffect = 'stolen';\r\n\t\t\t\t\tthis.scene.resultAnim(poke, item.name, 'neutral');\r\n\t\t\t\t\tthis.scene.resultAnim(ofpoke!, 'Item Stolen', 'bad');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'harvest':\r\n\t\t\t\t\tpoke.itemEffect = 'harvested';\r\n\t\t\t\t\tthis.activateAbility(poke, \"Harvest\");\r\n\t\t\t\t\tthis.scene.resultAnim(poke, item.name, 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'bestow':\r\n\t\t\t\t\tpoke.itemEffect = 'bestowed';\r\n\t\t\t\t\tthis.scene.resultAnim(poke, item.name, 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'switcheroo':\r\n\t\t\t\tcase 'trick':\r\n\t\t\t\t\tpoke.itemEffect = 'tricked';\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tswitch (item.id) {\r\n\t\t\t\tcase 'airballoon':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Balloon', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-enditem': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet item = Dex.items.get(args[2]);\r\n\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\tif (this.gen > 4 || effect.id !== 'knockoff') {\r\n\t\t\t\tpoke.item = '';\r\n\t\t\t\tpoke.itemEffect = '';\r\n\t\t\t\tpoke.prevItem = item.name;\r\n\t\t\t\tpoke.prevItemEffect = '';\r\n\t\t\t}\r\n\t\t\tpoke.removeVolatile('airballoon' as ID);\r\n\t\t\tpoke.addVolatile('itemremoved' as ID);\r\n\t\t\tif (kwArgs.eat) {\r\n\t\t\t\tpoke.prevItemEffect = 'eaten';\r\n\t\t\t\tthis.scene.runOtherAnim('consume' as ID, [poke]);\r\n\t\t\t\tthis.lastMove = item.id;\r\n\t\t\t} else if (kwArgs.weaken) {\r\n\t\t\t\tpoke.prevItemEffect = 'eaten';\r\n\t\t\t\tthis.lastMove = item.id;\r\n\t\t\t} else if (effect.id) {\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'fling':\r\n\t\t\t\t\tpoke.prevItemEffect = 'flung';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'knockoff':\r\n\t\t\t\t\tif (this.gen <= 4) {\r\n\t\t\t\t\t\tpoke.itemEffect = 'knocked off';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpoke.prevItemEffect = 'knocked off';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.scene.runOtherAnim('itemoff' as ID, [poke]);\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Item knocked off', 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'stealeat':\r\n\t\t\t\t\tpoke.prevItemEffect = 'stolen';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'gem':\r\n\t\t\t\t\tpoke.prevItemEffect = 'consumed';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'incinerate':\r\n\t\t\t\t\tpoke.prevItemEffect = 'incinerated';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tswitch (item.id) {\r\n\t\t\t\tcase 'airballoon':\r\n\t\t\t\t\tpoke.prevItemEffect = 'popped';\r\n\t\t\t\t\tpoke.removeVolatile('airballoon' as ID);\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Balloon popped', 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'focussash':\r\n\t\t\t\t\tpoke.prevItemEffect = 'consumed';\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Sash', 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'focusband':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Focus Band', 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'redcard':\r\n\t\t\t\t\tpoke.prevItemEffect = 'held up';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tpoke.prevItemEffect = 'consumed';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-ability': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet ability = Dex.abilities.get(args[2]);\r\n\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\tpoke.rememberAbility(ability.name, effect.id && !kwArgs.fail);\r\n\r\n\t\t\tif (kwArgs.silent) {\r\n\t\t\t\t// do nothing\r\n\t\t\t} else if (effect.id) {\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'trace':\r\n\t\t\t\t\tthis.activateAbility(poke, \"Trace\");\r\n\t\t\t\t\tthis.scene.wait(500);\r\n\t\t\t\t\tthis.activateAbility(poke, ability.name, true);\r\n\t\t\t\t\tofpoke!.rememberAbility(ability.name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'powerofalchemy':\r\n\t\t\t\tcase 'receiver':\r\n\t\t\t\t\tthis.activateAbility(poke, effect.name);\r\n\t\t\t\t\tthis.scene.wait(500);\r\n\t\t\t\t\tthis.activateAbility(poke, ability.name, true);\r\n\t\t\t\t\tofpoke!.rememberAbility(ability.name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'roleplay':\r\n\t\t\t\t\tthis.activateAbility(poke, ability.name, true);\r\n\t\t\t\t\tofpoke!.rememberAbility(ability.name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'desolateland':\r\n\t\t\t\tcase 'primordialsea':\r\n\t\t\t\tcase 'deltastream':\r\n\t\t\t\t\tif (kwArgs.fail) {\r\n\t\t\t\t\t\tthis.activateAbility(poke, ability.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.activateAbility(poke, ability.name);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.activateAbility(poke, ability.name);\r\n\t\t\t}\r\n\t\t\tthis.scene.updateWeather();\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-endability': {\r\n\t\t\t// deprecated; use |-start| for Gastro Acid\r\n\t\t\t// and the third arg of |-ability| for Entrainment et al\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet ability = Dex.abilities.get(args[2]);\r\n\t\t\tpoke.ability = '(suppressed)';\r\n\r\n\t\t\tif (ability.id) {\r\n\t\t\t\tif (!poke.baseAbility) poke.baseAbility = ability.name;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'detailschange': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tpoke.removeVolatile('formechange' as ID);\r\n\t\t\tpoke.removeVolatile('typeadd' as ID);\r\n\t\t\tpoke.removeVolatile('typechange' as ID);\r\n\r\n\t\t\tlet newSpeciesForme = args[2];\r\n\t\t\tlet commaIndex = newSpeciesForme.indexOf(',');\r\n\t\t\tif (commaIndex !== -1) {\r\n\t\t\t\tlet level = newSpeciesForme.substr(commaIndex + 1).trim();\r\n\t\t\t\tif (level.startsWith('L')) {\r\n\t\t\t\t\tpoke.level = parseInt(level.substr(1), 10);\r\n\t\t\t\t}\r\n\t\t\t\tnewSpeciesForme = args[2].substr(0, commaIndex);\r\n\t\t\t}\r\n\t\t\tlet species = this.dex.species.get(newSpeciesForme);\r\n\t\t\tif (nextArgs) {\r\n\t\t\t\tif (nextArgs[0] === '-mega') {\r\n\t\t\t\t\tspecies = this.dex.species.get(this.dex.items.get(nextArgs[3]).megaStone);\r\n\t\t\t\t} else if (nextArgs[0] === '-primal' && nextArgs.length > 2) {\r\n\t\t\t\t\tif (nextArgs[2] === 'Red Orb') species = this.dex.species.get('Groudon-Primal');\r\n\t\t\t\t\tif (nextArgs[2] === 'Blue Orb') species = this.dex.species.get('Kyogre-Primal');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoke.speciesForme = newSpeciesForme;\r\n\t\t\tpoke.ability = poke.baseAbility = (species.abilities ? species.abilities['0'] : '');\r\n\r\n\t\t\tpoke.details = args[2];\r\n\t\t\tpoke.searchid = args[1].substr(0, 2) + args[1].substr(args[1].indexOf(':')) + '|' + args[2];\r\n\r\n\t\t\tthis.scene.animTransform(poke, true, true);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-transform': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet tpoke = this.getPokemon(args[2])!;\r\n\t\t\tlet effect = Dex.getEffect(kwArgs.from);\r\n\t\t\tif (poke === tpoke) throw new Error(\"Transforming into self\");\r\n\r\n\t\t\tif (!kwArgs.silent) {\r\n\t\t\t\tthis.activateAbility(poke, effect);\r\n\t\t\t}\r\n\r\n\t\t\tpoke.boosts = { ...tpoke.boosts };\r\n\t\t\tpoke.copyTypesFrom(tpoke, true);\r\n\t\t\tpoke.ability = tpoke.ability;\r\n\t\t\tpoke.timesAttacked = tpoke.timesAttacked;\r\n\t\t\tconst targetForme = tpoke.volatiles.formechange;\r\n\t\t\tconst speciesForme = (targetForme && !targetForme[1].endsWith('-Gmax')) ? targetForme[1] : tpoke.speciesForme;\r\n\t\t\tconst pokemon = tpoke;\r\n\t\t\tconst shiny = tpoke.shiny;\r\n\t\t\tconst gender = tpoke.gender;\r\n\t\t\tconst level = tpoke.level;\r\n\t\t\tpoke.addVolatile('transform' as ID, pokemon, shiny, gender, level);\r\n\t\t\tpoke.addVolatile('formechange' as ID, speciesForme);\r\n\t\t\tfor (const trackedMove of tpoke.moveTrack) {\r\n\t\t\t\tpoke.rememberMove(trackedMove[0], 0);\r\n\t\t\t}\r\n\t\t\tthis.scene.animTransform(poke);\r\n\t\t\tthis.scene.resultAnim(poke, 'Transformed', 'good');\r\n\t\t\tthis.log(['-transform', args[1], args[2], tpoke.speciesForme], kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-formechange': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet species = Dex.species.get(args[2]);\r\n\t\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\t\t\tif (!poke.getSpeciesForme().endsWith('-Gmax') && !species.name.endsWith('-Gmax')) {\r\n\t\t\t\tpoke.removeVolatile('typeadd' as ID);\r\n\t\t\t\tpoke.removeVolatile('typechange' as ID);\r\n\t\t\t\tif (this.gen >= 6) poke.removeVolatile('autotomize' as ID);\r\n\t\t\t}\r\n\r\n\t\t\tif (!kwArgs.silent) {\r\n\t\t\t\tthis.activateAbility(poke, fromeffect);\r\n\t\t\t}\r\n\t\t\tpoke.addVolatile('formechange' as ID, species.name); // the formechange volatile reminds us to revert the sprite change on switch-out\r\n\t\t\tthis.scene.animTransform(poke, true);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-mega': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet item = Dex.items.get(args[3]);\r\n\t\t\tif (args[3]) {\r\n\t\t\t\tpoke.item = item.name;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-primal': case '-burst': {\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-terastallize': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet type = Dex.types.get(args[2]).name;\r\n\t\t\tlet lockForme = false;\r\n\t\t\tpoke.removeVolatile('typeadd' as ID);\r\n\t\t\tpoke.teraType = type;\r\n\t\t\tpoke.terastallized = type;\r\n\t\t\tpoke.details += `, tera:${type}`;\r\n\t\t\tpoke.searchid += `, tera:${type}`;\r\n\t\t\tif (poke.speciesForme.startsWith(\"Morpeko\")) {\r\n\t\t\t\tlockForme = true;\r\n\t\t\t\tpoke.speciesForme = poke.getSpeciesForme();\r\n\t\t\t\tpoke.details = poke.details.replace(\"Morpeko\", poke.speciesForme);\r\n\t\t\t\tpoke.searchid = `${poke.ident}|${poke.details}`;\r\n\t\t\t\tdelete poke.volatiles['formechange'];\r\n\t\t\t}\r\n\t\t\tthis.scene.animTransform(poke, true, lockForme);\r\n\t\t\tthis.scene.resetStatbar(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-start': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tlet ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\r\n\t\t\tthis.activateAbility(poke, effect);\r\n\t\t\tthis.activateAbility(ofpoke || poke, fromeffect);\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'typechange':\r\n\t\t\t\tif (poke.terastallized) break;\r\n\t\t\t\tif (ofpoke && fromeffect.id === 'reflecttype') {\r\n\t\t\t\t\tpoke.copyTypesFrom(ofpoke);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst types = Dex.sanitizeName(args[3] || '???');\r\n\t\t\t\t\tpoke.removeVolatile('typeadd' as ID);\r\n\t\t\t\t\tpoke.addVolatile('typechange' as ID, types);\r\n\t\t\t\t\tif (!kwArgs.silent) {\r\n\t\t\t\t\t\tthis.scene.typeAnim(poke, types);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'typeadd':\r\n\t\t\t\tconst type = Dex.sanitizeName(args[3]);\r\n\t\t\t\tpoke.addVolatile('typeadd' as ID, type);\r\n\t\t\t\tif (kwArgs.silent) break;\r\n\t\t\t\tthis.scene.typeAnim(poke, type);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'dynamax':\r\n\t\t\t\tpoke.addVolatile('dynamax' as ID, !!args[3]);\r\n\t\t\t\tthis.scene.animTransform(poke, true);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'powertrick':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Power Trick', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'foresight':\r\n\t\t\tcase 'miracleeye':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Identified', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'telekinesis':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Telekinesis', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'confusion':\r\n\t\t\t\tif (!kwArgs.already) {\r\n\t\t\t\t\tthis.scene.runStatusAnim('confused' as ID, [poke]);\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Confused', 'bad');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'leechseed':\r\n\t\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'healblock':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Heal Block', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'yawn':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Drowsy', 'slp');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'taunt':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Taunted', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'imprison':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Imprisoning', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'disable':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Disabled', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'embargo':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Embargo', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'torment':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Tormented', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ingrain':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Ingrained', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'aquaring':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Aqua Ring', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'stockpile1':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Stockpile', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'stockpile2':\r\n\t\t\t\tpoke.removeVolatile('stockpile1' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Stockpile&times;2', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'stockpile3':\r\n\t\t\t\tpoke.removeVolatile('stockpile2' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Stockpile&times;3', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'perish0':\r\n\t\t\t\tpoke.removeVolatile('perish1' as ID);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'perish1':\r\n\t\t\t\tpoke.removeVolatile('perish2' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Perish next turn', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'perish2':\r\n\t\t\t\tpoke.removeVolatile('perish3' as ID);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Perish in 2', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'perish3':\r\n\t\t\t\tif (!kwArgs.silent) this.scene.resultAnim(poke, 'Perish in 3', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'encore':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Encored', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bide':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Bide', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'attract':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Attracted', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'autotomize':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Lightened', 'good');\r\n\t\t\t\tif (poke.volatiles.autotomize) {\r\n\t\t\t\t\tpoke.volatiles.autotomize[1]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpoke.addVolatile('autotomize' as ID, 1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'focusenergy':\r\n\t\t\t\tthis.scene.resultAnim(poke, '+Crit rate', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'curse':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Cursed', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'nightmare':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Nightmare', 'bad');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'magnetrise':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Magnet Rise', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'smackdown':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Smacked Down', 'bad');\r\n\t\t\t\tpoke.removeVolatile('magnetrise' as ID);\r\n\t\t\t\tpoke.removeVolatile('telekinesis' as ID);\r\n\t\t\t\tif (poke.lastMove === 'fly' || poke.lastMove === 'bounce') this.scene.animReset(poke);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'substitute':\r\n\t\t\t\tif (kwArgs.damage) {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Damage', 'bad');\r\n\t\t\t\t} else if (kwArgs.block) {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Blocked', 'neutral');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// Gen 1-2\r\n\t\t\tcase 'mist':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Mist', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\t// Gen 1\r\n\t\t\tcase 'lightscreen':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Light Screen', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'reflect':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Reflect', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!(effect.id === 'typechange' && poke.terastallized)) {\r\n\t\t\t\tpoke.addVolatile(effect.id);\r\n\t\t\t}\r\n\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-end': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\t\t\tpoke.removeVolatile(effect.id);\r\n\r\n\t\t\tif (kwArgs.silent && !(effect.id === 'protosynthesis' || effect.id === 'quarkdrive')) {\r\n\t\t\t\t// do nothing\r\n\t\t\t} else {\r\n\t\t\t\tswitch (effect.id) {\r\n\t\t\t\tcase 'dynamax':\r\n\t\t\t\t\tthis.scene.animTransform(poke);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'powertrick':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Power Trick', 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'telekinesis':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Telekinesis&nbsp;ended', 'neutral');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'skydrop':\r\n\t\t\t\t\tif (kwArgs.interrupt) {\r\n\t\t\t\t\t\tthis.scene.anim(poke, { time: 100 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'confusion':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Confusion&nbsp;ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'leechseed':\r\n\t\t\t\t\tif (fromeffect.id === 'rapidspin') {\r\n\t\t\t\t\t\tthis.scene.resultAnim(poke, 'De-seeded', 'good');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'healblock':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Heal Block ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'attract':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Attract&nbsp;ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'taunt':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Taunt&nbsp;ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'disable':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Disable&nbsp;ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'embargo':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Embargo ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'torment':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Torment&nbsp;ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'encore':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Encore&nbsp;ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'bide':\r\n\t\t\t\t\tthis.scene.runOtherAnim('bideunleash' as ID, [poke]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'illusion':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Illusion ended', 'bad');\r\n\t\t\t\t\tpoke.rememberAbility('Illusion');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'slowstart':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Slow Start ended', 'good');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'perishsong': // for backwards compatibility\r\n\t\t\t\t\tpoke.removeVolatile('perish3' as ID);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'substitute':\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Faded', 'bad');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'stockpile':\r\n\t\t\t\t\tpoke.removeVolatile('stockpile1' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('stockpile2' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('stockpile3' as ID);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'protosynthesis':\r\n\t\t\t\t\tpoke.removeVolatile('protosynthesisatk' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('protosynthesisdef' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('protosynthesisspa' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('protosynthesisspd' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('protosynthesisspe' as ID);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'quarkdrive':\r\n\t\t\t\t\tpoke.removeVolatile('quarkdriveatk' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('quarkdrivedef' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('quarkdrivespa' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('quarkdrivespd' as ID);\r\n\t\t\t\t\tpoke.removeVolatile('quarkdrivespe' as ID);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (effect.effectType === 'Move') {\r\n\t\t\t\t\t\tif (effect.name === 'Doom Desire') {\r\n\t\t\t\t\t\t\tthis.scene.runOtherAnim('doomdesirehit' as ID, [poke]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (effect.name === 'Future Sight') {\r\n\t\t\t\t\t\t\tthis.scene.runOtherAnim('futuresighthit' as ID, [poke]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-singleturn': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tif (effect.id === 'roost' && !poke.getTypeList().includes('Flying')) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tpoke.addTurnstatus(effect.id);\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'roost':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Landed', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'quickguard':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Quick Guard', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'wideguard':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Wide Guard', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'craftyshield':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Crafty Shield', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'matblock':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Mat Block', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'protect':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Protected', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'endure':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Enduring', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'helpinghand':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Helping Hand', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'focuspunch':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Focusing', 'neutral');\r\n\t\t\t\tpoke.rememberMove(effect.name, 0);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'shelltrap':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Trap set', 'neutral');\r\n\t\t\t\tpoke.rememberMove(effect.name, 0);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'beakblast':\r\n\t\t\t\tthis.scene.runOtherAnim('bidecharge' as ID, [poke]);\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Beak Blast', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-singlemove': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tpoke.addMovestatus(effect.id);\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'grudge':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Grudge', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'destinybond':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Destiny Bond', 'neutral');\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.scene.updateStatbar(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-activate': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tlet target = this.getPokemon(args[3]);\r\n\t\t\tthis.activateAbility(poke, effect);\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'poltergeist':\r\n\t\t\t\tpoke.item = kwArgs.item;\r\n\t\t\t\tpoke.itemEffect = 'disturbed';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'symbiosis':\r\n\t\t\t\tpoke.item = '';\r\n\t\t\t\tpoke.itemEffect = '';\r\n\t\t\t\tpoke.prevItem = kwArgs.item;\r\n\t\t\t\tpoke.prevItemEffect = 'given away';\r\n\t\t\t\ttarget!.item = kwArgs.item;\r\n\t\t\t\ttarget!.itemEffect = 'shared';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grudge':\r\n\t\t\t\tpoke.rememberMove(kwArgs.move, Infinity);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'substitute':\r\n\t\t\t\tif (kwArgs.damage) {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Damage', 'bad');\r\n\t\t\t\t} else if (kwArgs.block) {\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Blocked', 'neutral');\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'attract':\r\n\t\t\t\tthis.scene.runStatusAnim('attracted' as ID, [poke]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bide':\r\n\t\t\t\tthis.scene.runOtherAnim('bidecharge' as ID, [poke]);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// move activations\r\n\t\t\tcase 'aromatherapy':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Team Cured', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'healbell':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Team Cured', 'good');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'brickbreak':\r\n\t\t\t\ttarget!.side.removeSideCondition('Reflect');\r\n\t\t\t\ttarget!.side.removeSideCondition('LightScreen');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hyperspacefury':\r\n\t\t\tcase 'hyperspacehole':\r\n\t\t\tcase 'phantomforce':\r\n\t\t\tcase 'shadowforce':\r\n\t\t\tcase 'feint':\r\n\t\t\t\tthis.scene.resultAnim(poke, 'Protection broken', 'bad');\r\n\t\t\t\tpoke.removeTurnstatus('protect' as ID);\r\n\t\t\t\tfor (const curTarget of poke.side.pokemon) {\r\n\t\t\t\t\tcurTarget.removeTurnstatus('wideguard' as ID);\r\n\t\t\t\t\tcurTarget.removeTurnstatus('quickguard' as ID);\r\n\t\t\t\t\tcurTarget.removeTurnstatus('craftyshield' as ID);\r\n\t\t\t\t\tcurTarget.removeTurnstatus('matblock' as ID);\r\n\t\t\t\t\tthis.scene.updateStatbar(curTarget);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'eeriespell':\r\n\t\t\tcase 'gmaxdepletion':\r\n\t\t\tcase 'spite':\r\n\t\t\t\tlet move = Dex.moves.get(kwArgs.move).name;\r\n\t\t\t\tlet pp = Number(kwArgs.number);\r\n\t\t\t\tif (isNaN(pp)) pp = 4;\r\n\t\t\t\tpoke.rememberMove(move, pp);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'gravity':\r\n\t\t\t\tpoke.removeVolatile('magnetrise' as ID);\r\n\t\t\t\tpoke.removeVolatile('telekinesis' as ID);\r\n\t\t\t\tthis.scene.anim(poke, { time: 100 });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'skillswap': case 'wanderingspirit':\r\n\t\t\t\tif (this.gen <= 4) break;\r\n\t\t\t\tlet pokeability = Dex.sanitizeName(kwArgs.ability) || target!.ability;\r\n\t\t\t\tlet targetability = Dex.sanitizeName(kwArgs.ability2) || poke.ability;\r\n\t\t\t\tif (pokeability) {\r\n\t\t\t\t\tpoke.ability = pokeability;\r\n\t\t\t\t\tif (!target!.baseAbility) target!.baseAbility = pokeability;\r\n\t\t\t\t}\r\n\t\t\t\tif (targetability) {\r\n\t\t\t\t\ttarget!.ability = targetability;\r\n\t\t\t\t\tif (!poke.baseAbility) poke.baseAbility = targetability;\r\n\t\t\t\t}\r\n\t\t\t\tif (poke.side !== target!.side) {\r\n\t\t\t\t\tthis.activateAbility(poke, pokeability, true);\r\n\t\t\t\t\tthis.activateAbility(target, targetability, true);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// ability activations\r\n\t\t\tcase 'electromorphosis':\r\n\t\t\tcase 'windpower':\r\n\t\t\t\tpoke.addMovestatus('charge' as ID);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'forewarn':\r\n\t\t\t\tif (target) {\r\n\t\t\t\t\ttarget.rememberMove(kwArgs.move, 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet foeActive = [] as Pokemon[];\r\n\t\t\t\t\tfor (const maybeTarget of poke.side.foe.active) {\r\n\t\t\t\t\t\tif (maybeTarget && !maybeTarget.fainted) foeActive.push(maybeTarget);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (foeActive.length === 1) {\r\n\t\t\t\t\t\tfoeActive[0].rememberMove(kwArgs.move, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'lingeringaroma':\r\n\t\t\tcase 'mummy':\r\n\t\t\t\tif (!kwArgs.ability) break; // if Mummy activated but failed, no ability will have been sent\r\n\t\t\t\tlet ability = Dex.abilities.get(kwArgs.ability);\r\n\t\t\t\tthis.activateAbility(target, ability.name);\r\n\t\t\t\tthis.activateAbility(poke, effect.name);\r\n\t\t\t\tthis.scene.wait(700);\r\n\t\t\t\tthis.activateAbility(target, effect.name, true);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t// item activations\r\n\t\t\tcase 'leppaberry':\r\n\t\t\tcase 'mysteryberry':\r\n\t\t\t\tpoke.rememberMove(kwArgs.move, effect.id === 'leppaberry' ? -10 : -5);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'focusband':\r\n\t\t\t\tpoke.item = 'Focus Band';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'quickclaw':\r\n\t\t\t\tpoke.item = 'Quick Claw';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'abilityshield':\r\n\t\t\t\tpoke.item = 'Ability Shield';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (kwArgs.broken) { // for custom moves that break protection\r\n\t\t\t\t\tthis.scene.resultAnim(poke, 'Protection broken', 'bad');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-sidestart': {\r\n\t\t\tlet side = this.getSide(args[1]);\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tside.addSideCondition(effect, !!kwArgs.persistent);\r\n\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'tailwind':\r\n\t\t\tcase 'auroraveil':\r\n\t\t\tcase 'reflect':\r\n\t\t\tcase 'lightscreen':\r\n\t\t\tcase 'safeguard':\r\n\t\t\tcase 'mist':\r\n\t\t\tcase 'gmaxwildfire':\r\n\t\t\tcase 'gmaxvolcalith':\r\n\t\t\tcase 'gmaxvinelash':\r\n\t\t\tcase 'gmaxcannonade':\r\n\t\t\tcase 'grasspledge':\r\n\t\t\tcase 'firepledge':\r\n\t\t\tcase 'waterpledge':\r\n\t\t\t\tthis.scene.updateWeather();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-sideend': {\r\n\t\t\tlet side = this.getSide(args[1]);\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\t// let from = Dex.getEffect(kwArgs.from);\r\n\t\t\t// let ofpoke = this.getPokemon(kwArgs.of);\r\n\t\t\tside.removeSideCondition(effect.name);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-swapsideconditions': {\r\n\t\t\tthis.swapSideConditions();\r\n\t\t\tthis.scene.updateWeather();\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-weather': {\r\n\t\t\tlet effect = Dex.getEffect(args[1]);\r\n\t\t\tlet poke = this.getPokemon(kwArgs.of) || undefined;\r\n\t\t\tlet ability = Dex.getEffect(kwArgs.from);\r\n\t\t\tif (!effect.id || effect.id === 'none') {\r\n\t\t\t\tkwArgs.from = this.weather;\r\n\t\t\t}\r\n\t\t\tthis.changeWeather(effect.name, poke, !!kwArgs.upkeep, ability);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-fieldstart': {\r\n\t\t\tlet effect = Dex.getEffect(args[1]);\r\n\t\t\tlet poke = this.getPokemon(kwArgs.of);\r\n\t\t\tlet fromeffect = Dex.getEffect(kwArgs.from);\r\n\t\t\tthis.activateAbility(poke, fromeffect);\r\n\t\t\tlet minTimeLeft = 5;\r\n\t\t\tlet maxTimeLeft = 0;\r\n\t\t\tif (effect.id.endsWith('terrain')) {\r\n\t\t\t\tfor (let i = this.pseudoWeather.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet pwID = toID(this.pseudoWeather[i][0]);\r\n\t\t\t\t\tif (pwID.endsWith('terrain')) {\r\n\t\t\t\t\t\tthis.pseudoWeather.splice(i, 1);\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.gen > 6) maxTimeLeft = 8;\r\n\t\t\t}\r\n\t\t\tif (kwArgs.persistent) minTimeLeft += 2;\r\n\t\t\tthis.addPseudoWeather(effect.name, minTimeLeft, maxTimeLeft);\r\n\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'gravity':\r\n\t\t\t\tif (this.seeking !== null) break;\r\n\t\t\t\tfor (const active of this.getAllActive()) {\r\n\t\t\t\t\tthis.scene.runOtherAnim('gravity' as ID, [active]);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-fieldend': {\r\n\t\t\tlet effect = Dex.getEffect(args[1]);\r\n\t\t\t// let poke = this.getPokemon(kwArgs.of);\r\n\t\t\tthis.removePseudoWeather(effect.name);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-fieldactivate': {\r\n\t\t\tlet effect = Dex.getEffect(args[1]);\r\n\t\t\tswitch (effect.id) {\r\n\t\t\tcase 'perishsong':\r\n\t\t\t\tthis.scene.updateStatbars();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-anim': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet move = Dex.moves.get(args[2]);\r\n\t\t\tif (this.checkActive(poke)) return;\r\n\t\t\tlet poke2 = this.getPokemon(args[3]);\r\n\t\t\tthis.scene.beforeMove(poke);\r\n\t\t\tthis.animateMove(poke, move, poke2, kwArgs);\r\n\t\t\tthis.scene.afterMove(poke);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase '-hint': case '-message': case '-candynamax': {\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\tthrow new Error(`Unrecognized minor action: ${args[0]}`);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\tparseSpriteData(name) {\r\n\t\tlet siden = 0,\r\n\t\t\tfoe = false;\r\n\t\twhile (true) {\r\n\t\t\tif (name.substr(0, 6) === 'foeof-') {\r\n\t\t\t\tfoe = true;\r\n\t\t\t\tname = name.substr(6);\r\n\t\t\t} else if (name.substr(0, 9) === 'switched-') name = name.substr(9);\r\n\t\t\telse if (name.substr(0, 9) === 'existing-') name = name.substr(9);\r\n\t\t\telse if (name.substr(0, 4) === 'foe-') {\r\n\t\t\t\tsiden = this.p2.n;\r\n\t\t\t\tname = name.substr(4);\r\n\t\t\t} else if (name.substr(0, 5) === 'ally-') {\r\n\t\t\t\tsiden = this.p1.n;\r\n\t\t\t\tname = name.substr(5);\r\n\t\t\t} else break;\r\n\t\t}\r\n\t\tif (name.substr(name.length - 1) === ')') {\r\n\t\t\tlet parenIndex = name.lastIndexOf('(');\r\n\t\t\tif (parenIndex > 0) {\r\n\t\t\t\tlet species = name.substr(parenIndex + 1);\r\n\t\t\t\tname = species.substr(0, species.length - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (foe) siden = (siden ? 0 : 1);\r\n\r\n\t\tlet data = Dex.species.get(name);\r\n\t\treturn data.spriteData[siden];\r\n\t}\r\n\t*/\r\n\t/**\r\n\t * @param name Leave blank for Team Preview\r\n\t * @param pokemonid Leave blank for Team Preview\r\n\t * @param details\r\n\t * @param output\r\n\t */\r\n\tparseDetails(name: string, pokemonid: string, details: string, output: PokemonDetails = {} as any) {\r\n\t\tconst isTeamPreview = !name;\r\n\t\toutput.details = details;\r\n\t\toutput.name = name;\r\n\t\toutput.speciesForme = name;\r\n\t\toutput.level = 100;\r\n\t\toutput.shiny = false;\r\n\t\toutput.gender = '';\r\n\t\toutput.ident = (!isTeamPreview ? pokemonid : '');\r\n\t\toutput.searchid = (!isTeamPreview ? `${pokemonid}|${details}` : '');\r\n\t\tlet splitDetails = details.split(', ');\r\n\t\tif (splitDetails[splitDetails.length - 1].startsWith('tera:')) {\r\n\t\t\toutput.terastallized = splitDetails[splitDetails.length - 1].slice(5);\r\n\t\t\tsplitDetails.pop();\r\n\t\t}\r\n\t\tif (splitDetails[splitDetails.length - 1] === 'shiny') {\r\n\t\t\toutput.shiny = true;\r\n\t\t\tsplitDetails.pop();\r\n\t\t}\r\n\t\tif (splitDetails[splitDetails.length - 1] === 'M' || splitDetails[splitDetails.length - 1] === 'F') {\r\n\t\t\toutput.gender = splitDetails[splitDetails.length - 1] as Dex.GenderName;\r\n\t\t\tsplitDetails.pop();\r\n\t\t}\r\n\t\tif (splitDetails[1]) {\r\n\t\t\toutput.level = parseInt(splitDetails[1].substr(1), 10) || 100;\r\n\t\t}\r\n\t\tif (splitDetails[0]) {\r\n\t\t\toutput.speciesForme = splitDetails[0];\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\tparseHealth(hpstring: string, output: PokemonHealth = {} as any) {\r\n\t\tlet [hp, status] = hpstring.split(' ');\r\n\r\n\t\t// hp parse\r\n\t\toutput.hpcolor = '';\r\n\t\tif (hp === '0' || hp === '0.0') {\r\n\t\t\tif (!output.maxhp) output.maxhp = 100;\r\n\t\t\toutput.hp = 0;\r\n\t\t} else if (hp.indexOf('/') > 0) {\r\n\t\t\tlet [curhp, maxhp] = hp.split('/');\r\n\t\t\tif (isNaN(parseFloat(curhp)) || isNaN(parseFloat(maxhp))) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\toutput.hp = parseFloat(curhp);\r\n\t\t\toutput.maxhp = parseFloat(maxhp);\r\n\t\t\tif (output.hp > output.maxhp) output.hp = output.maxhp;\r\n\t\t\tconst colorchar = maxhp.slice(-1);\r\n\t\t\tif (colorchar === 'y' || colorchar === 'g') {\r\n\t\t\t\toutput.hpcolor = colorchar;\r\n\t\t\t}\r\n\t\t} else if (!isNaN(parseFloat(hp))) {\r\n\t\t\tif (!output.maxhp) output.maxhp = 100;\r\n\t\t\toutput.hp = output.maxhp * parseFloat(hp) / 100;\r\n\t\t}\r\n\r\n\t\t// status parse\r\n\t\tif (!status) {\r\n\t\t\toutput.status = '';\r\n\t\t} else if (status === 'par' || status === 'brn' || status === 'slp' || status === 'frz' || status === 'tox') {\r\n\t\t\toutput.status = status;\r\n\t\t} else if (status === 'psn' && output.status !== 'tox') {\r\n\t\t\toutput.status = status;\r\n\t\t} else if (status === 'fnt') {\r\n\t\t\toutput.hp = 0;\r\n\t\t\toutput.fainted = true;\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\tparsePokemonId(pokemonid: string) {\r\n\t\tlet name = pokemonid;\r\n\r\n\t\tlet siden = -1;\r\n\t\tlet slot = -1; // if there is an explicit slot for this pokemon\r\n\t\tif (/^p[1-9]($|: )/.test(name)) {\r\n\t\t\tsiden = parseInt(name.charAt(1), 10) - 1;\r\n\t\t\tname = name.slice(4);\r\n\t\t} else if (/^p[1-9][a-f]: /.test(name)) {\r\n\t\t\tconst slotChart: { [k: string]: number } = { a: 0, b: 1, c: 2, d: 3, e: 4, f: 5 };\r\n\t\t\tsiden = parseInt(name.charAt(1), 10) - 1;\r\n\t\t\tslot = slotChart[name.charAt(2)];\r\n\t\t\tname = name.slice(5);\r\n\t\t\tpokemonid = `p${siden + 1}: ${name}`;\r\n\t\t}\r\n\t\treturn { name, siden, slot, pokemonid };\r\n\t}\r\n\tgetSwitchedPokemon(pokemonid: string, details: string) {\r\n\t\tif (pokemonid === '??') throw new Error(`pokemonid not passed`);\r\n\t\tconst { name, siden, slot, pokemonid: parsedPokemonid } = this.parsePokemonId(pokemonid);\r\n\t\tpokemonid = parsedPokemonid;\r\n\r\n\t\tconst searchid = `${pokemonid}|${details}`;\r\n\t\tconst side = this.sides[siden];\r\n\r\n\t\t// search inactive revealed pokemon\r\n\t\tfor (let i = 0; i < side.pokemon.length; i++) {\r\n\t\t\tlet pokemon = side.pokemon[i];\r\n\t\t\tif (pokemon.fainted) continue;\r\n\t\t\t// already active, can't be switching in\r\n\t\t\tif (side.active.includes(pokemon)) continue;\r\n\t\t\t// just switched out, can't be switching in\r\n\t\t\tif (pokemon === side.lastPokemon && !side.active[slot]) continue;\r\n\r\n\t\t\tif (pokemon.searchid === searchid) {\r\n\t\t\t\t// exact match\r\n\t\t\t\tif (slot >= 0) pokemon.slot = slot;\r\n\t\t\t\treturn pokemon;\r\n\t\t\t}\r\n\t\t\tif (!pokemon.searchid && pokemon.checkDetails(details)) {\r\n\t\t\t\t// switch-in matches Team Preview entry\r\n\t\t\t\tpokemon = side.addPokemon(name, pokemonid, details, i);\r\n\t\t\t\tif (slot >= 0) pokemon.slot = slot;\r\n\t\t\t\treturn pokemon;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// pokemon not found, create a new pokemon object for it\r\n\t\tconst pokemon = side.addPokemon(name, pokemonid, details);\r\n\t\tif (slot >= 0) pokemon.slot = slot;\r\n\t\treturn pokemon;\r\n\t}\r\n\trememberTeamPreviewPokemon(sideid: string, details: string) {\r\n\t\tconst { siden } = this.parsePokemonId(sideid);\r\n\r\n\t\treturn this.sides[siden].addPokemon('', '', details);\r\n\t}\r\n\tfindCorrespondingPokemon(serverPokemon: { ident: string, details: string }) {\r\n\t\tconst { siden } = this.parsePokemonId(serverPokemon.ident);\r\n\t\tconst searchid = `${serverPokemon.ident}|${serverPokemon.details}`;\r\n\t\tfor (const pokemon of this.sides[siden].pokemon) {\r\n\t\t\tif (pokemon.searchid === searchid) {\r\n\t\t\t\treturn pokemon;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tgetPokemon(pokemonid: string | undefined, faintedOnly = false) {\r\n\t\tif (!pokemonid || pokemonid === '??' || pokemonid === 'null' || pokemonid === 'false') {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst { siden, slot, pokemonid: parsedPokemonid } = this.parsePokemonId(pokemonid);\r\n\t\tpokemonid = parsedPokemonid;\r\n\r\n\t\t/** if true, don't match an active pokemon */\r\n\t\tconst isInactive = (slot < 0);\r\n\t\tconst side = this.sides[siden];\r\n\r\n\t\t// search player's pokemon\r\n\t\tif (!isInactive && side.active[slot]) return side.active[slot];\r\n\r\n\t\tfor (const pokemon of side.pokemon) {\r\n\t\t\tif (isInactive && !this.compatMode && side.active.includes(pokemon)) continue;\r\n\t\t\tif (faintedOnly && pokemon.hp) continue;\r\n\t\t\tif (pokemon.ident === pokemonid) { // name matched, good enough\r\n\t\t\t\tif (slot >= 0) pokemon.slot = slot;\r\n\t\t\t\treturn pokemon;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\tgetSide(sidename: string): Side {\r\n\t\tif (sidename === 'p1' || sidename.startsWith('p1:')) return this.p1;\r\n\t\tif (sidename === 'p2' || sidename.startsWith('p2:')) return this.p2;\r\n\t\tif ((sidename === 'p3' || sidename.startsWith('p3:')) && this.p3) return this.p3;\r\n\t\tif ((sidename === 'p4' || sidename.startsWith('p4:')) && this.p4) return this.p4;\r\n\t\tif (this.nearSide.id === sidename) return this.nearSide;\r\n\t\tif (this.farSide.id === sidename) return this.farSide;\r\n\t\tif (this.nearSide.name === sidename) return this.nearSide;\r\n\t\tif (this.farSide.name === sidename) return this.farSide;\r\n\t\treturn {\r\n\t\t\tname: sidename,\r\n\t\t\tid: sidename.replace(/ /g, ''),\r\n\t\t} as any;\r\n\t}\r\n\r\n\tadd(command?: string) {\r\n\t\tif (command) this.stepQueue.push(command);\r\n\r\n\t\tif (this.atQueueEnd && this.currentStep < this.stepQueue.length) {\r\n\t\t\tthis.atQueueEnd = false;\r\n\t\t\tthis.nextStep();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * PS's preempt system is intended to show chat messages immediately,\r\n\t * instead of waiting for the battle to get to the point where the\r\n\t * message was said.\r\n\t *\r\n\t * In addition to being a nice quality-of-life feature, it's also\r\n\t * important to make sure timer updates happen in real-time.\r\n\t */\r\n\tinstantAdd(command: string) {\r\n\t\tthis.run(command, true);\r\n\t\tthis.preemptStepQueue.push(command);\r\n\t\tthis.add(command);\r\n\t}\r\n\trunMajor(args: Args, kwArgs: KWArgs, preempt?: boolean) {\r\n\t\tswitch (args[0]) {\r\n\t\tcase 'start': {\r\n\t\t\tthis.nearSide.active[0] = null;\r\n\t\t\tthis.farSide.active[0] = null;\r\n\t\t\tthis.scene.resetSides();\r\n\t\t\tthis.start();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'upkeep': {\r\n\t\t\tthis.usesUpkeep = true;\r\n\t\t\tthis.updateTurnCounters();\r\n\t\t\t// Prevents getSwitchedPokemon from skipping over a Pokemon that switched out mid turn (e.g. U-turn)\r\n\t\t\tfor (const side of this.sides) {\r\n\t\t\t\tside.lastPokemon = null;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'turn': {\r\n\t\t\tthis.setTurn(parseInt(args[1], 10));\r\n\t\t\tthis.log(args);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'tier': {\r\n\t\t\tthis.tier = args[1];\r\n\t\t\tif (this.tier.endsWith('Random Battle')) {\r\n\t\t\t\tthis.speciesClause = true;\r\n\t\t\t}\r\n\t\t\tif (this.tier.endsWith(' (Blitz)')) {\r\n\t\t\t\tthis.messageFadeTime = 40;\r\n\t\t\t\tthis.isBlitz = true;\r\n\t\t\t}\r\n\t\t\tif (this.tier.includes(`Let's Go`)) {\r\n\t\t\t\tthis.dex = Dex.mod('gen7letsgo' as ID);\r\n\t\t\t}\r\n\t\t\tif (this.tier.includes('Super Staff Bros')) {\r\n\t\t\t\tthis.dex = Dex.mod('gen9ssb' as ID);\r\n\t\t\t}\r\n\t\t\tthis.log(args);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'gametype': {\r\n\t\t\tthis.gameType = args[1] as any;\r\n\t\t\tthis.compatMode = false;\r\n\t\t\tswitch (args[1]) {\r\n\t\t\tcase 'multi':\r\n\t\t\tcase 'freeforall':\r\n\t\t\t\tthis.pokemonControlled = 1;\r\n\t\t\t\tif (!this.p3) this.p3 = new Side(this, 2);\r\n\t\t\t\tif (!this.p4) this.p4 = new Side(this, 3);\r\n\t\t\t\tthis.p3.foe = this.p2;\r\n\t\t\t\tthis.p4.foe = this.p1;\r\n\r\n\t\t\t\tif (args[1] === 'multi') {\r\n\t\t\t\t\tthis.p4.ally = this.p2;\r\n\t\t\t\t\tthis.p3.ally = this.p1;\r\n\t\t\t\t\tthis.p1.ally = this.p3;\r\n\t\t\t\t\tthis.p2.ally = this.p4;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.p3.isFar = this.p1.isFar;\r\n\t\t\t\tthis.p4.isFar = this.p2.isFar;\r\n\t\t\t\tthis.sides = [this.p1, this.p2, this.p3, this.p4];\r\n\t\t\t\t// intentionally sync p1/p3 and p2/p4's active arrays\r\n\t\t\t\tthis.p1.active = this.p3.active = [null, null];\r\n\t\t\t\tthis.p2.active = this.p4.active = [null, null];\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'doubles':\r\n\t\t\t\tthis.nearSide.active = [null, null];\r\n\t\t\t\tthis.farSide.active = [null, null];\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'triples':\r\n\t\t\tcase 'rotation':\r\n\t\t\t\tthis.nearSide.active = [null, null, null];\r\n\t\t\t\tthis.farSide.active = [null, null, null];\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tfor (const side of this.sides) side.active = [null];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (!this.pokemonControlled) this.pokemonControlled = this.nearSide.active.length;\r\n\t\t\tthis.scene.updateGen();\r\n\t\t\tthis.scene.resetSides();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'rule': {\r\n\t\t\tlet ruleName = args[1].split(': ')[0];\r\n\t\t\tif (ruleName === 'Species Clause') this.speciesClause = true;\r\n\t\t\tif (ruleName === 'Blitz') {\r\n\t\t\t\tthis.messageFadeTime = 40;\r\n\t\t\t\tthis.isBlitz = true;\r\n\t\t\t}\r\n\t\t\tif (ruleName === 'Exact HP Mod') this.reportExactHP = true;\r\n\t\t\tthis.rules[ruleName] = 1;\r\n\t\t\tthis.log(args);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'rated': {\r\n\t\t\tthis.rated = args[1] || true;\r\n\t\t\tthis.scene.updateGen();\r\n\t\t\tthis.log(args);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'inactive': {\r\n\t\t\tif (!this.kickingInactive) this.kickingInactive = true;\r\n\t\t\tif (args[1].startsWith(\"Time left: \")) {\r\n\t\t\t\tlet [time, totalTime, graceTime] = args[1].split(' | ');\r\n\t\t\t\tthis.kickingInactive = parseInt(time.slice(11), 10) || true;\r\n\t\t\t\tthis.totalTimeLeft = parseInt(totalTime, 10);\r\n\t\t\t\tthis.graceTimeLeft = parseInt(graceTime || '', 10) || 0;\r\n\t\t\t\tif (this.totalTimeLeft === this.kickingInactive) this.totalTimeLeft = 0;\r\n\t\t\t\treturn;\r\n\t\t\t} else if (args[1].startsWith(\"You have \")) {\r\n\t\t\t\t// this is ugly but parseInt is documented to work this way\r\n\t\t\t\t// so I'm going to be lazy and not chop off the rest of the\r\n\t\t\t\t// sentence\r\n\t\t\t\tthis.kickingInactive = parseInt(args[1].slice(9), 10) || true;\r\n\t\t\t\treturn;\r\n\t\t\t} else if (args[1].endsWith(' seconds left.')) {\r\n\t\t\t\tlet hasIndex = args[1].indexOf(' has ');\r\n\t\t\t\tlet userid = window.app?.user?.get('userid') || window.PS?.user.userid;\r\n\t\t\t\tif (toID(args[1].slice(0, hasIndex)) === userid) {\r\n\t\t\t\t\tthis.kickingInactive = parseInt(args[1].slice(hasIndex + 5), 10) || true;\r\n\t\t\t\t}\r\n\t\t\t} else if (args[1].endsWith(' 15 seconds left this turn.')) {\r\n\t\t\t\tif (this.isBlitz) return;\r\n\t\t\t}\r\n\t\t\tthis.log(args, undefined, preempt);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'inactiveoff': {\r\n\t\t\tthis.kickingInactive = false;\r\n\t\t\tthis.log(args, undefined, preempt);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'join': case 'j': case 'J': {\r\n\t\t\tif (this.roomid) {\r\n\t\t\t\tlet room = app!.rooms[this.roomid];\r\n\t\t\t\tlet user = BattleTextParser.parseNameParts(args[1]);\r\n\t\t\t\tlet userid = toUserid(user.name);\r\n\t\t\t\tif (!room.users[userid]) room.userCount.users++;\r\n\t\t\t\troom.users[userid] = user;\r\n\t\t\t\troom.userList.add(userid);\r\n\t\t\t\troom.userList.updateUserCount();\r\n\t\t\t\troom.userList.updateNoUsersOnline();\r\n\t\t\t}\r\n\t\t\tthis.log(args, undefined, preempt);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'leave': case 'l': case 'L': {\r\n\t\t\tif (this.roomid) {\r\n\t\t\t\tlet room = app!.rooms[this.roomid];\r\n\t\t\t\tlet user = args[1];\r\n\t\t\t\tlet userid = toUserid(user);\r\n\t\t\t\tif (room.users[userid]) room.userCount.users--;\r\n\t\t\t\tdelete room.users[userid];\r\n\t\t\t\troom.userList.remove(userid);\r\n\t\t\t\troom.userList.updateUserCount();\r\n\t\t\t\troom.userList.updateNoUsersOnline();\r\n\t\t\t}\r\n\t\t\tthis.log(args, undefined, preempt);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'name': case 'n': case 'N': {\r\n\t\t\tif (this.roomid) {\r\n\t\t\t\tlet room = app!.rooms[this.roomid];\r\n\t\t\t\tlet user = BattleTextParser.parseNameParts(args[1]);\r\n\t\t\t\tlet oldid = args[2];\r\n\t\t\t\tif (toUserid(oldid) === app!.user.get('userid')) {\r\n\t\t\t\t\tapp!.user.set({\r\n\t\t\t\t\t\taway: user.away,\r\n\t\t\t\t\t\tstatus: user.status,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tlet userid = toUserid(user.name);\r\n\t\t\t\troom.users[userid] = user;\r\n\t\t\t\troom.userList.remove(oldid);\r\n\t\t\t\troom.userList.add(userid);\r\n\t\t\t}\r\n\t\t\tif (!this.ignoreSpects) {\r\n\t\t\t\tthis.log(args, undefined, preempt);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'player': {\r\n\t\t\tlet side = this.getSide(args[1]);\r\n\t\t\tside.setName(args[2]);\r\n\t\t\tif (args[3]) side.setAvatar(args[3]);\r\n\t\t\tif (args[4]) side.rating = args[4];\r\n\t\t\tif (this.joinButtons) this.scene.hideJoinButtons();\r\n\t\t\tthis.log(args);\r\n\t\t\tthis.scene.updateSidebar(side);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'badge': {\r\n\t\t\tlet side = this.getSide(args[1]);\r\n\t\t\t// handle all the rendering further down\r\n\t\t\tconst badge = args.slice(2).join('|');\r\n\t\t\t// (don't allow duping)\r\n\t\t\tif (!side.badges.includes(badge)) side.badges.push(badge);\r\n\t\t\tthis.scene.updateSidebar(side);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'teamsize': {\r\n\t\t\tlet side = this.getSide(args[1]);\r\n\t\t\tside.totalPokemon = parseInt(args[2], 10);\r\n\t\t\tthis.scene.updateSidebar(side);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'win': case 'tie': {\r\n\t\t\tthis.winner(args[0] === 'tie' ? undefined : args[1]);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'prematureend': {\r\n\t\t\tthis.prematureEnd();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'clearpoke': {\r\n\t\t\tthis.p1.clearPokemon();\r\n\t\t\tthis.p2.clearPokemon();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'poke': {\r\n\t\t\tlet pokemon = this.rememberTeamPreviewPokemon(args[1], args[2]);\r\n\t\t\tif (args[3] === 'mail') {\r\n\t\t\t\tpokemon.item = '(mail)';\r\n\t\t\t} else if (args[3] === 'item') {\r\n\t\t\t\tpokemon.item = '(exists)';\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'updatepoke': {\r\n\t\t\tconst { siden } = this.parsePokemonId(args[1]);\r\n\t\t\tconst side = this.sides[siden];\r\n\t\t\tfor (let i = 0; i < side.pokemon.length; i++) {\r\n\t\t\t\tconst pokemon = side.pokemon[i];\r\n\t\t\t\tif (pokemon.details !== args[2] && pokemon.checkDetails(args[2])) {\r\n\t\t\t\t\tside.addPokemon('', '', args[2], i);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'teampreview': {\r\n\t\t\tthis.teamPreviewCount = parseInt(args[1], 10);\r\n\t\t\tthis.scene.teamPreview();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'showteam': {\r\n\t\t\tconst team = Teams.unpack(args[2]);\r\n\t\t\tif (!team.length) return;\r\n\t\t\tconst side = this.getSide(args[1]);\r\n\t\t\tside.clearPokemon();\r\n\t\t\tfor (const set of team) {\r\n\t\t\t\tconst details = set.species + (!set.level || set.level === 100 ? '' : `, L${set.level}`) +\r\n\t\t\t\t\t(!set.gender || set.gender === 'N' ? '' : `, ${set.gender}`) + (set.shiny ? ', shiny' : '');\r\n\t\t\t\tconst pokemon = side.addPokemon('', '', details);\r\n\t\t\t\tif (set.item) pokemon.item = set.item;\r\n\t\t\t\tif (set.ability) pokemon.rememberAbility(set.ability);\r\n\t\t\t\tfor (const move of set.moves) {\r\n\t\t\t\t\tpokemon.rememberMove(move, 0);\r\n\t\t\t\t}\r\n\t\t\t\tif (set.teraType) pokemon.teraType = set.teraType;\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'switch': case 'drag': case 'replace': {\r\n\t\t\tthis.endLastTurn();\r\n\t\t\tlet poke = this.getSwitchedPokemon(args[1], args[2]);\r\n\t\t\tlet slot = poke.slot;\r\n\t\t\tpoke.healthParse(args[3]);\r\n\t\t\tpoke.removeVolatile('itemremoved' as ID);\r\n\t\t\tpoke.terastallized = (/tera:([a-z]+)$/i.exec(args[2]))?.[1] || '';\r\n\t\t\tif (args[0] === 'switch') {\r\n\t\t\t\tif (poke.side.active[slot]) {\r\n\t\t\t\t\tpoke.side.switchOut(poke.side.active[slot], kwArgs);\r\n\t\t\t\t}\r\n\t\t\t\tpoke.side.switchIn(poke, kwArgs);\r\n\t\t\t} else if (args[0] === 'replace') {\r\n\t\t\t\tpoke.side.replace(poke);\r\n\t\t\t} else {\r\n\t\t\t\tpoke.side.dragIn(poke);\r\n\t\t\t}\r\n\t\t\tthis.scene.updateWeather();\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'faint': {\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tpoke.side.faint(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'swap': {\r\n\t\t\tif (isNaN(Number(args[2]))) {\r\n\t\t\t\tconst poke = this.getPokemon(args[1])!;\r\n\t\t\t\tpoke.side.swapWith(poke, this.getPokemon(args[2])!, kwArgs);\r\n\t\t\t} else {\r\n\t\t\t\tconst poke = this.getPokemon(args[1])!;\r\n\t\t\t\tconst targetIndex = parseInt(args[2], 10);\r\n\t\t\t\tif (kwArgs.from) {\r\n\t\t\t\t\tconst target = poke.side.active[targetIndex];\r\n\t\t\t\t\tif (target) args[2] = target.ident;\r\n\t\t\t\t}\r\n\t\t\t\tpoke.side.swapTo(poke, targetIndex);\r\n\t\t\t}\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'move': {\r\n\t\t\tthis.endLastTurn();\r\n\t\t\tthis.resetTurnsSinceMoved();\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet move = Dex.moves.get(args[2]);\r\n\t\t\tif (this.checkActive(poke)) return;\r\n\t\t\tlet poke2 = this.getPokemon(args[3]);\r\n\t\t\tthis.scene.beforeMove(poke);\r\n\t\t\tthis.useMove(poke, move, poke2, kwArgs);\r\n\t\t\tthis.animateMove(poke, move, poke2, kwArgs);\r\n\t\t\tthis.scene.afterMove(poke);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'cant': {\r\n\t\t\tthis.endLastTurn();\r\n\t\t\tthis.resetTurnsSinceMoved();\r\n\t\t\tlet poke = this.getPokemon(args[1])!;\r\n\t\t\tlet effect = Dex.getEffect(args[2]);\r\n\t\t\tlet move = Dex.moves.get(args[3]);\r\n\t\t\tthis.cantUseMove(poke, effect, move, kwArgs);\r\n\t\t\tthis.log(args, kwArgs);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'gen': {\r\n\t\t\tthis.gen = parseInt(args[1], 10);\r\n\t\t\tthis.dex = Dex.forGen(this.gen);\r\n\t\t\tthis.scene.updateGen();\r\n\t\t\tthis.log(args);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'callback': {\r\n\t\t\tthis.subscription?.('callback');\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'fieldhtml': {\r\n\t\t\tthis.scene.setFrameHTML(BattleLog.sanitizeHTML(args[1]));\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'controlshtml': {\r\n\t\t\tthis.scene.setControlsHTML(BattleLog.sanitizeHTML(args[1]));\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'custom': {\r\n\t\t\t// Style is always |custom|-subprotocol|pokemon|additional info\r\n\t\t\tif (args[1] === '-endterastallize') {\r\n\t\t\t\tlet poke = this.getPokemon(args[2])!;\r\n\t\t\t\tpoke.removeVolatile('terastallize' as ID);\r\n\t\t\t\tpoke.teraType = '';\r\n\t\t\t\tpoke.terastallized = '';\r\n\t\t\t\tpoke.details = poke.details.replace(/, tera:[a-z]+/i, '');\r\n\t\t\t\tpoke.searchid = poke.searchid.replace(/, tera:[a-z]+/i, '');\r\n\t\t\t\tthis.scene.animTransform(poke);\r\n\t\t\t\tthis.scene.resetStatbar(poke);\r\n\t\t\t\tthis.log(args, kwArgs);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\tthis.log(args, kwArgs, preempt);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trun(str: string, preempt?: boolean) {\r\n\t\tif (!preempt && this.preemptStepQueue.length && str === this.preemptStepQueue[0]) {\r\n\t\t\tthis.preemptStepQueue.shift();\r\n\t\t\tthis.scene.preemptCatchup();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!str) return;\r\n\t\tconst { args, kwArgs } = BattleTextParser.parseBattleLine(str);\r\n\r\n\t\tif (this.scene.maybeCloseMessagebar(args, kwArgs)) {\r\n\t\t\tthis.currentStep--;\r\n\t\t\tthis.activeMoveIsSpread = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// parse the next line if it's a minor: runMinor needs it parsed to determine when to merge minors\r\n\t\tlet nextArgs: Args = [''];\r\n\t\tlet nextKwargs: KWArgs = {};\r\n\t\tconst nextLine = this.stepQueue[this.currentStep + 1] || '';\r\n\t\tif (nextLine.startsWith('|-')) {\r\n\t\t\t({ args: nextArgs, kwArgs: nextKwargs } = BattleTextParser.parseBattleLine(nextLine));\r\n\t\t}\r\n\r\n\t\tif (this.debug) {\r\n\t\t\tif (args[0].startsWith('-') || args[0] === 'detailschange') {\r\n\t\t\t\tthis.runMinor(args, kwArgs, nextArgs, nextKwargs);\r\n\t\t\t} else {\r\n\t\t\t\tthis.runMajor(args, kwArgs, preempt);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tif (args[0].startsWith('-') || args[0] === 'detailschange') {\r\n\t\t\t\t\tthis.runMinor(args, kwArgs, nextArgs, nextKwargs);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.runMajor(args, kwArgs, preempt);\r\n\t\t\t\t}\r\n\t\t\t} catch (err: any) {\r\n\t\t\t\tthis.log(['majorerror', 'Error parsing: ' + str + ' (' + err + ')']);\r\n\t\t\t\tif (err.stack) {\r\n\t\t\t\t\tlet stack = ('' + err.stack).split('\\n');\r\n\t\t\t\t\tfor (const line of stack) {\r\n\t\t\t\t\t\tif (/\\brun\\b/.test(line)) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.log(['error', line]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.subscription?.('error');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (nextLine.startsWith('|start') || args[0] === 'teampreview') {\r\n\t\t\tif (this.turn === -1) {\r\n\t\t\t\tthis.turn = 0;\r\n\t\t\t\tthis.scene.updateBgm();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcheckActive(poke: Pokemon) {\r\n\t\tif (!poke.side.active[poke.slot]) {\r\n\t\t\t// SOMEONE jumped in in the middle of a replay. <_<\r\n\t\t\tpoke.side.replace(poke);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpause() {\r\n\t\tthis.paused = true;\r\n\t\tthis.scene.pause();\r\n\t\tthis.subscription?.('paused');\r\n\t}\r\n\t/**\r\n\t * Properties relevant to battle playback, for replay UI implementers:\r\n\t * - `ended`: has the game ended in a win/loss?\r\n\t * - `atQueueEnd`: is animation caught up to the end of the battle queue, waiting for more input?\r\n\t * - `seeking`: are we trying to skip to a specific turn\r\n\t * - `turn`: what turn are we currently on? `-1` if we haven't started yet, `0` at team preview\r\n\t * - `paused`: are we playing at all?\r\n\t */\r\n\tplay() {\r\n\t\tthis.paused = false;\r\n\t\tthis.started = true;\r\n\t\tthis.scene.resume();\r\n\t\tthis.nextStep();\r\n\t\tthis.subscription?.('playing');\r\n\t}\r\n\tskipTurn() {\r\n\t\tthis.seekBy(1);\r\n\t}\r\n\tseekBy(deltaTurn: number) {\r\n\t\tif (this.seeking === Infinity && deltaTurn < 0) {\r\n\t\t\treturn this.seekTurn(this.turn + 1);\r\n\t\t}\r\n\t\tthis.seekTurn((this.seeking ?? this.turn) + deltaTurn);\r\n\t}\r\n\tseekTurn(turn: number, forceReset?: boolean) {\r\n\t\tif (isNaN(turn)) return;\r\n\t\tturn = Math.max(Math.floor(turn), 0);\r\n\r\n\t\tif (this.seeking !== null && turn > this.turn && !forceReset) {\r\n\t\t\tthis.seeking = turn;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (turn === 0) {\r\n\t\t\tthis.seeking = null;\r\n\t\t\tthis.resetStep();\r\n\t\t\tthis.scene.animationOn();\r\n\t\t\tif (this.paused) this.subscription?.('paused');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.seeking = turn;\r\n\r\n\t\tif (turn <= this.turn || forceReset) {\r\n\t\t\tthis.scene.animationOff();\r\n\t\t\tthis.resetStep();\r\n\t\t} else if (this.atQueueEnd) {\r\n\t\t\tthis.scene.animationOn();\r\n\t\t\tthis.seeking = null;\r\n\t\t} else {\r\n\t\t\tthis.scene.animationOff();\r\n\t\t\tthis.nextStep();\r\n\t\t}\r\n\t}\r\n\tstopSeeking() {\r\n\t\tthis.seeking = null;\r\n\t\tthis.scene.animationOn();\r\n\t\tthis.subscription?.(this.paused ? 'paused' : 'playing');\r\n\t}\r\n\tshouldStep() {\r\n\t\tif (this.atQueueEnd) return false;\r\n\t\tif (this.seeking !== null) return true;\r\n\t\treturn !(this.paused && this.turn >= 0);\r\n\t}\r\n\tnextStep() {\r\n\t\tif (!this.shouldStep()) return;\r\n\r\n\t\tlet time = Date.now();\r\n\t\tthis.scene.startAnimations();\r\n\t\tlet animations = undefined;\r\n\r\n\t\tlet interruptionCount: number;\r\n\t\tdo {\r\n\t\t\t// modified in this.run() but idk how to tell TS that\r\n\t\t\tthis.waitForAnimations = true as this['waitForAnimations'];\r\n\t\t\tif (this.currentStep >= this.stepQueue.length) {\r\n\t\t\t\tthis.atQueueEnd = true;\r\n\t\t\t\tif (!this.ended && this.isReplay) this.prematureEnd();\r\n\t\t\t\tthis.stopSeeking();\r\n\t\t\t\tif (this.ended) {\r\n\t\t\t\t\tthis.scene.updateBgm();\r\n\t\t\t\t}\r\n\t\t\t\tthis.subscription?.('atqueueend');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.run(this.stepQueue[this.currentStep]);\r\n\t\t\tthis.currentStep++;\r\n\t\t\tif (this.waitForAnimations === true) {\r\n\t\t\t\tanimations = this.scene.finishAnimations();\r\n\t\t\t} else if (this.waitForAnimations === 'simult') {\r\n\t\t\t\tthis.scene.timeOffset = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (Date.now() - time > 300) {\r\n\t\t\t\tinterruptionCount = this.scene.interruptionCount;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tif (interruptionCount === this.scene.interruptionCount) {\r\n\t\t\t\t\t\tthis.nextStep();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 1);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} while (!animations && this.shouldStep());\r\n\r\n\t\tif (this.paused && this.turn >= 0 && this.seeking === null) {\r\n\t\t\t// initial Play button, team preview\r\n\t\t\tthis.scene.pause();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!animations) return;\r\n\r\n\t\tinterruptionCount = this.scene.interruptionCount;\r\n\t\tanimations.done(() => {\r\n\t\t\tif (interruptionCount === this.scene.interruptionCount) {\r\n\t\t\t\tthis.nextStep();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetQueue(queue: string[]) {\r\n\t\tthis.stepQueue = queue;\r\n\t\tthis.resetStep();\r\n\t}\r\n\r\n\tsetMute(mute: boolean) {\r\n\t\tthis.scene.setMute(mute);\r\n\t}\r\n}\r\n\r\ndeclare const require: any;\r\ndeclare const global: any;\r\nif (typeof require === 'function') {\r\n\t// in Node\r\n\tglobal.Battle = Battle;\r\n\tglobal.Pokemon = Pokemon;\r\n}\r\n"],
  "mappings": "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",
  "names": ["badBoostTable", "pokemon"]
}
