{
  "version": 3,
  "sources": ["../../../client/src/client-connection.ts"],
  "sourcesContent": ["/**\r\n * Connection library\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\nimport { Config, PS } from \"./client-main\";\r\n\r\ndeclare const SockJS: any;\r\ndeclare const POKEMON_SHOWDOWN_TESTCLIENT_KEY: string | undefined;\r\n\r\nexport class PSConnection {\r\n\tsocket: WebSocket | null = null;\r\n\tconnected = false;\r\n\tqueue: string[] = [];\r\n\treconnectDelay = 1000;\r\n\tprivate reconnectCap = 15000;\r\n\tprivate shouldReconnect = true;\r\n\treconnectTimer: ReturnType<typeof setTimeout> | null = null;\r\n\tprivate worker: Worker | null = null;\r\n\r\n\tconstructor() {\r\n\t\tconst loading = PSStorage.init();\r\n\t\tif (loading) {\r\n\t\t\tloading.then(() => {\r\n\t\t\t\tthis.initConnection();\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.initConnection();\r\n\t\t}\r\n\t}\r\n\r\n\tinitConnection() {\r\n\t\tif (!this.tryConnectInWorker()) this.directConnect();\r\n\t}\r\n\r\n\tcanReconnect() {\r\n\t\tconst uptime = Date.now() - PS.startTime;\r\n\t\tif (uptime > 24 * 60 * 60 * 1000) {\r\n\t\t\tPS.confirm(`It's been over a day since you first connected. Please refresh.`, {\r\n\t\t\t\tokButton: 'Refresh',\r\n\t\t\t}).then(confirmed => {\r\n\t\t\t\tif (confirmed) PS.room?.send(`/refresh`);\r\n\t\t\t});\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn this.shouldReconnect;\r\n\t}\r\n\r\n\ttryConnectInWorker(): boolean {\r\n\t\tif (this.socket) return false; // must be one or the other\r\n\r\n\t\ttry {\r\n\t\t\tconst worker = new Worker('/js/client-connection-worker.js');\r\n\t\t\tthis.worker = worker;\r\n\r\n\t\t\tworker.postMessage({ type: 'connect', server: PS.server });\r\n\r\n\t\t\tworker.onmessage = event => {\r\n\t\t\t\tconst { type, data } = event.data;\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\tcase 'connected':\r\n\t\t\t\t\tconsole.log('\\u2705 (CONNECTED via worker)');\r\n\t\t\t\t\tthis.connected = true;\r\n\t\t\t\t\tPS.connected = true;\r\n\t\t\t\t\tthis.queue.forEach(msg => worker.postMessage({ type: 'send', data: msg }));\r\n\t\t\t\t\tthis.queue = [];\r\n\t\t\t\t\tPS.update();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'message':\r\n\t\t\t\t\tPS.receive(data);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'disconnected':\r\n\t\t\t\t\tthis.handleDisconnect();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'error':\r\n\t\t\t\t\tconsole.warn(`Worker connection error: ${data}`);\r\n\t\t\t\t\tthis.worker = null;\r\n\t\t\t\t\t// onerror can occur on abrupt disconnects or fatal errors.\r\n\t\t\t\t\t// handleDisconnect ensures proper cleanup and also attemps to reconnect.\r\n\t\t\t\t\tthis.handleDisconnect(); // fallback\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tworker.onerror = (e: ErrorEvent) => {\r\n\t\t\t\tconsole.warn('Worker connection error:', e);\r\n\t\t\t\tthis.worker = null;\r\n\t\t\t\tthis.directConnect(); // fallback\r\n\t\t\t};\r\n\r\n\t\t\treturn true;\r\n\t\t} catch {\r\n\t\t\tconsole.warn('Worker connection failed, falling back to regular connection.');\r\n\t\t\tthis.worker = null;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tdirectConnect() {\r\n\t\tif (this.worker) return; // must be one or the other\r\n\r\n\t\tconst server = PS.server;\r\n\t\tconst port = server.protocol === 'https' ? `:${server.port}` : `:${server.httpport!}`;\r\n\t\tconst url = `${server.protocol}://${server.host}${port}${server.prefix}`;\r\n\r\n\t\ttry {\r\n\t\t\tthis.socket = new SockJS(url, [], { timeout: 5 * 60 * 1000 });\r\n\t\t} catch {\r\n\t\t\tthis.socket = new WebSocket(url.replace('http', 'ws') + '/websocket');\r\n\t\t}\r\n\r\n\t\tconst socket = this.socket!;\r\n\r\n\t\tsocket.onopen = () => {\r\n\t\t\tconsole.log('\\u2705 (CONNECTED)');\r\n\t\t\tthis.connected = true;\r\n\t\t\tPS.connected = true;\r\n\t\t\tthis.reconnectDelay = 1000;\r\n\t\t\tthis.queue.forEach(msg => socket.send(msg));\r\n\t\t\tthis.queue = [];\r\n\t\t\tPS.update();\r\n\t\t};\r\n\r\n\t\tsocket.onmessage = (ev: MessageEvent) => {\r\n\t\t\tPS.receive('' + ev.data);\r\n\t\t};\r\n\r\n\t\tsocket.onclose = () => {\r\n\t\t\tconsole.log('\\u274C (DISCONNECTED)');\r\n\t\t\tthis.handleDisconnect();\r\n\t\t\tconsole.log('\\u2705 (DISCONNECTED)');\r\n\t\t\tthis.connected = false;\r\n\t\t\tPS.connected = false;\r\n\t\t\tPS.isOffline = true;\r\n\t\t\tfor (const roomid in PS.rooms) {\r\n\t\t\t\tconst room = PS.rooms[roomid]!;\r\n\t\t\t\tif (room.connected === true) room.connected = 'autoreconnect';\r\n\t\t\t}\r\n\t\t\tthis.socket = null;\r\n\t\t\tPS.update();\r\n\t\t};\r\n\r\n\t\tsocket.onerror = (ev: Event) => {\r\n\t\t\tPS.connected = false;\r\n\t\t\tPS.isOffline = true;\r\n\t\t\t// no useful info to print from the event\r\n\t\t\tPS.alert(`Connection error`);\r\n\t\t\tthis.retryConnection();\r\n\t\t\tPS.update();\r\n\t\t};\r\n\t}\r\n\r\n\tprivate handleDisconnect() {\r\n\t\tthis.connected = false;\r\n\t\tPS.connected = false;\r\n\t\tPS.isOffline = true;\r\n\t\tthis.socket = null;\r\n\t\tfor (const roomid in PS.rooms) {\r\n\t\t\tconst room = PS.rooms[roomid]!;\r\n\t\t\tif (room.connected === true) room.connected = 'autoreconnect';\r\n\t\t}\r\n\t\tthis.retryConnection();\r\n\t\tPS.update();\r\n\t}\r\n\r\n\tprivate retryConnection() {\r\n\t\tif (!this.canReconnect()) return;\r\n\t\tif (this.reconnectTimer) return;\r\n\t\tthis.reconnectTimer = setTimeout(() => {\r\n\t\t\tthis.reconnectTimer = null;\r\n\t\t\tif (!this.connected && this.canReconnect()) {\r\n\t\t\t\tPS.mainmenu.send('/reconnect');\r\n\t\t\t\tthis.reconnectDelay = Math.min(this.reconnectDelay * 2, this.reconnectCap);\r\n\t\t\t}\r\n\t\t}, this.reconnectDelay);\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\tthis.shouldReconnect = false;\r\n\t\tthis.socket?.close();\r\n\t\tthis.worker?.terminate();\r\n\t\tthis.worker = null;\r\n\t\tPS.connection = null;\r\n\t\tPS.connected = false;\r\n\t\tPS.isOffline = true;\r\n\t}\r\n\r\n\treconnectTest() {\r\n\t\tthis.socket?.close();\r\n\t\tthis.worker?.postMessage({ type: 'disconnect' });\r\n\t\tthis.worker = null;\r\n\t\tPS.connected = false;\r\n\t\tPS.isOffline = true;\r\n\t}\r\n\r\n\tsend(msg: string) {\r\n\t\tif (!this.connected) {\r\n\t\t\tthis.queue.push(msg);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.worker) {\r\n\t\t\tthis.worker.postMessage({ type: 'send', data: msg });\r\n\t\t} else if (this.socket) {\r\n\t\t\tthis.socket.send(msg);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic connect() {\r\n\t\tif (PS.connection?.socket) return;\r\n\t\tPS.isOffline = false;\r\n\t\tif (!PS.connection) {\r\n\t\t\tPS.connection = new PSConnection();\r\n\t\t} else {\r\n\t\t\tPS.connection.directConnect();\r\n\t\t}\r\n\t\tPS.prefs.doAutojoin();\r\n\t}\r\n}\r\n\r\nexport class PSStorage {\r\n\tstatic frame: WindowProxy | null = null;\r\n\tstatic requests: Record<string, (data: any) => void> | null = null;\r\n\tstatic requestCount = 0;\r\n\tstatic readonly origin = `https://${Config.routes.client}`;\r\n\tstatic loader?: () => void;\r\n\tstatic loaded: Promise<void> | boolean = false;\r\n\tstatic init(): void | Promise<void> {\r\n\t\tif (this.loaded) {\r\n\t\t\tif (this.loaded === true) return;\r\n\t\t\treturn this.loaded;\r\n\t\t}\r\n\t\tif (Config.testclient) {\r\n\t\t\treturn;\r\n\t\t} else if (`${location.protocol}//${location.hostname}` === PSStorage.origin) {\r\n\t\t\t// Same origin, everything can be kept as default\r\n\t\t\tConfig.server ||= Config.defaultserver;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Cross-origin\r\n\t\tif (!('postMessage' in window)) {\r\n\t\t\t// browser does not support cross-document messaging\r\n\t\t\tPS.alert(\"Sorry, psim connections are unsupported by your browser.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('message', this.onMessage);\r\n\r\n\t\tif (document.location.hostname !== Config.routes.client) {\r\n\t\t\tconst iframe = document.createElement('iframe');\r\n\t\t\tiframe.src = 'https://' + Config.routes.client + '/crossdomain.php?host=' +\r\n\t\t\t\tencodeURIComponent(document.location.hostname) +\r\n\t\t\t\t'&path=' + encodeURIComponent(document.location.pathname.substr(1)) +\r\n\t\t\t\t'&protocol=' + encodeURIComponent(document.location.protocol);\r\n\t\t\tiframe.style.display = 'none';\r\n\t\t\tdocument.body.appendChild(iframe);\r\n\t\t} else {\r\n\t\t\tConfig.server ||= Config.defaultserver;\r\n\t\t\t$(\r\n\t\t\t\t`<iframe src=\"https://${Config.routes.client}/crossprotocol.html?v1.2\" style=\"display: none;\"></iframe>`\r\n\t\t\t).appendTo('body');\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t// HTTPS may be blocked\r\n\t\t\t\t// yes, this happens, blame Avast! and BitDefender and other antiviruses\r\n\t\t\t\t// that feel a need to MitM HTTPS poorly\r\n\t\t\t}, 2000);\r\n\t\t}\r\n\t\tthis.loaded = new Promise(resolve => {\r\n\t\t\tthis.loader = resolve;\r\n\t\t});\r\n\t\treturn this.loaded;\r\n\t}\r\n\r\n\tstatic onMessage = (e: MessageEvent) => {\r\n\t\tif (e.origin !== PSStorage.origin) return;\r\n\r\n\t\tthis.frame = e.source as WindowProxy;\r\n\t\tconst data = e.data;\r\n\t\t// console.log(`top recv: ${data}`);\r\n\t\tswitch (data.charAt(0)) {\r\n\t\tcase 'c':\r\n\t\t\tConfig.server = JSON.parse(data.substr(1));\r\n\t\t\tif (Config.server.registered && Config.server.id !== 'showdown' && Config.server.id !== 'smogtours') {\r\n\t\t\t\tconst link = document.createElement('link');\r\n\t\t\t\tlink.rel = 'stylesheet';\r\n\t\t\t\tlink.href = `//${Config.routes.client}/customcss.php?server=${encodeURIComponent(Config.server.id)}`;\r\n\t\t\t\tdocument.head.appendChild(link);\r\n\t\t\t}\r\n\t\t\tObject.assign(PS.server, Config.server);\r\n\t\t\tbreak;\r\n\t\tcase 'p':\r\n\t\t\tconst newData = JSON.parse(data.substr(1));\r\n\t\t\tif (newData) PS.prefs.load(newData, true);\r\n\t\t\tPS.prefs.save = function () {\r\n\t\t\t\tconst prefData = JSON.stringify(PS.prefs.storage);\r\n\t\t\t\tPSStorage.postCrossOriginMessage('P' + prefData);\r\n\r\n\t\t\t\t// in Safari, cross-origin local storage is apparently treated as session\r\n\t\t\t\t// storage, so mirror the storage in the current origin just in case\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlocalStorage.setItem('showdown_prefs', prefData);\r\n\t\t\t\t} catch {}\r\n\t\t\t};\r\n\t\t\tPS.prefs.update(null);\r\n\t\t\tbreak;\r\n\t\tcase 't':\r\n\t\t\tif (window.nodewebkit) return;\r\n\t\t\tlet oldTeams;\r\n\t\t\tif (PS.teams.list.length) {\r\n\t\t\t\t// Teams are still stored in the old location; merge them with the\r\n\t\t\t\t// new teams.\r\n\t\t\t\toldTeams = PS.teams.list;\r\n\t\t\t}\r\n\t\t\tPS.teams.unpackAll(data.substr(1));\r\n\t\t\tPS.teams.save = function () {\r\n\t\t\t\tconst packedTeams = PS.teams.packAll(PS.teams.list);\r\n\t\t\t\tPSStorage.postCrossOriginMessage('T' + packedTeams);\r\n\r\n\t\t\t\t// in Safari, cross-origin local storage is apparently treated as session\r\n\t\t\t\t// storage, so mirror the storage in the current origin just in case\r\n\t\t\t\tif (document.location.hostname === Config.routes.client) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlocalStorage.setItem('showdown_teams_local', packedTeams);\r\n\t\t\t\t\t} catch {}\r\n\t\t\t\t}\r\n\t\t\t\tPS.teams.update('team');\r\n\t\t\t};\r\n\t\t\tif (oldTeams) {\r\n\t\t\t\tPS.teams.list = PS.teams.list.concat(oldTeams);\r\n\t\t\t\tPS.teams.save();\r\n\t\t\t\tlocalStorage.removeItem('showdown_teams');\r\n\t\t\t}\r\n\t\t\tif (data === 'tnull' && !PS.teams.list.length) {\r\n\t\t\t\tPS.teams.unpackAll(localStorage.getItem('showdown_teams_local'));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'a':\r\n\t\t\tif (data === 'a0') {\r\n\t\t\t\tPS.alert(\"Your browser doesn't support third-party cookies. Some things might not work correctly.\");\r\n\t\t\t}\r\n\t\t\tif (!window.nodewebkit) {\r\n\t\t\t\t// for whatever reason, Node-Webkit doesn't let us make remote\r\n\t\t\t\t// Ajax requests or something. Oh well, making them direct\r\n\t\t\t\t// isn't a problem, either.\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// I really hope this is a Chrome bug that this can fail\r\n\t\t\t\t\tPSStorage.frame!.postMessage(\"\", PSStorage.origin);\r\n\t\t\t\t} catch {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tPSStorage.requests = {};\r\n\t\t\t}\r\n\t\t\tPSStorage.loaded = true;\r\n\t\t\tPSStorage.loader?.();\r\n\t\t\tPSStorage.loader = undefined;\r\n\t\t\tbreak;\r\n\t\tcase 'r':\r\n\t\t\tconst reqData = JSON.parse(data.slice(1));\r\n\t\t\tconst idx = reqData[0];\r\n\t\t\tif (PSStorage.requests![idx]) {\r\n\t\t\t\tPSStorage.requests![idx](reqData[1]);\r\n\t\t\t\tdelete PSStorage.requests![idx];\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\tstatic request(type: 'GET' | 'POST', uri: string, data: any): void | Promise<string> {\r\n\t\tif (!PSStorage.requests) return;\r\n\t\tconst idx = PSStorage.requestCount++;\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tPSStorage.requests![idx] = resolve;\r\n\t\t\tPSStorage.postCrossOriginMessage((type === 'GET' ? 'R' : 'S') + JSON.stringify([uri, data, idx, 'text']));\r\n\t\t});\r\n\t}\r\n\tstatic postCrossOriginMessage = function (data: string) {\r\n\t\ttry {\r\n\t\t\t// I really hope this is a Chrome bug that this can fail\r\n\t\t\treturn PSStorage.frame!.postMessage(data, PSStorage.origin);\r\n\t\t} catch {\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n};\r\n\r\nPSConnection.connect();\r\n\r\nexport const PSLoginServer = new class {\r\n\trawQuery(act: string, data: PostData): Promise<string | null> {\r\n\t\t// commenting out because for some reason this is working in Chrome????\r\n\t\t// if (location.protocol === 'file:') {\r\n\t\t// \talert(\"Sorry, login server queries don't work in the testclient. To log in, see README.md to set up testclient-key.js\");\r\n\t\t// \treturn Promise.resolve(null);\r\n\t\t// }\r\n\t\tdata.act = act;\r\n\t\tlet url = '/~~' + PS.server.id + '/action.php';\r\n\t\tif (location.pathname.endsWith('.html')) {\r\n\t\t\turl = 'https://' + Config.routes.client + url;\r\n\t\t\tif (typeof POKEMON_SHOWDOWN_TESTCLIENT_KEY === 'string') {\r\n\t\t\t\tdata.sid = POKEMON_SHOWDOWN_TESTCLIENT_KEY.replace(/%2C/g, ',');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn PSStorage.request('POST', url, data) || Net(url).get({ method: 'POST', body: data }).then(\r\n\t\t\tres => res ?? null\r\n\t\t).catch(\r\n\t\t\t() => null\r\n\t\t);\r\n\t}\r\n\tquery(act: string, data: PostData = {}): Promise<{ [k: string]: any } | null> {\r\n\t\treturn this.rawQuery(act, data).then(\r\n\t\t\tres => res ? JSON.parse(res.slice(1)) : null\r\n\t\t).catch(\r\n\t\t\t() => null\r\n\t\t);\r\n\t}\r\n};\r\n\r\ninterface PostData {\r\n\t[key: string]: string | number | boolean | null | undefined;\r\n}\r\ninterface NetRequestOptions {\r\n\tmethod?: 'GET' | 'POST';\r\n\tbody?: string | PostData;\r\n\tquery?: PostData;\r\n}\r\nclass HttpError extends Error {\r\n\tstatusCode?: number;\r\n\tbody: string;\r\n\tconstructor(message: string, statusCode: number | undefined, body: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'HttpError';\r\n\t\tthis.statusCode = statusCode;\r\n\t\tthis.body = body;\r\n\t\ttry {\r\n\t\t\t(Error as any).captureStackTrace(this, HttpError);\r\n\t\t} catch {}\r\n\t}\r\n}\r\nclass NetRequest {\r\n\turi: string;\r\n\tconstructor(uri: string) {\r\n\t\tthis.uri = uri;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a basic http/https request to the URI.\r\n\t * Returns the response data.\r\n\t *\r\n\t * Will throw if the response code isn't 200 OK.\r\n\t *\r\n\t * @param opts request opts\r\n\t */\r\n\tget(opts: NetRequestOptions = {}): Promise<string> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\tlet uri = this.uri;\r\n\t\t\tif (opts.query) {\r\n\t\t\t\turi += (uri.includes('?') ? '&' : '?') + Net.encodeQuery(opts.query);\r\n\t\t\t}\r\n\t\t\txhr.open(opts.method || 'GET', uri);\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tconst DONE = 4;\r\n\t\t\t\tif (xhr.readyState === DONE) {\r\n\t\t\t\t\tif (xhr.status === 200) {\r\n\t\t\t\t\t\tresolve(xhr.responseText || '');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst err = new HttpError(xhr.statusText || \"Connection error\", xhr.status, xhr.responseText);\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif (opts.body) {\r\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\t\t\t\txhr.send(Net.encodeQuery(opts.body));\r\n\t\t\t} else {\r\n\t\t\t\txhr.send();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t * @param body POST body\r\n\t */\r\n\tpost(opts: Omit<NetRequestOptions, 'body'>, body: PostData | string): Promise<string>;\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t */\r\n\tpost(opts?: NetRequestOptions): Promise<string>;\r\n\tpost(opts: NetRequestOptions = {}, body?: PostData | string) {\r\n\t\tif (!body) body = opts.body;\r\n\t\treturn this.get({\r\n\t\t\t...opts,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport function Net(uri: string) {\r\n\tif (uri.startsWith('/') && !uri.startsWith('//') && Net.defaultRoute) uri = Net.defaultRoute + uri;\r\n\tif (uri.startsWith('//') && document.location.protocol === 'file:') uri = 'https:' + uri;\r\n\treturn new NetRequest(uri);\r\n}\r\n\r\nNet.defaultRoute = '';\r\n\r\nNet.encodeQuery = function (data: string | PostData): string {\r\n\tif (typeof data === 'string') return data;\r\n\tlet urlencodedData = '';\r\n\tfor (const key in data) {\r\n\t\tif (urlencodedData) urlencodedData += '&';\r\n\t\tlet value = data[key];\r\n\t\tif (value === true) value = 'on';\r\n\t\tif (value === false || value === null || value === undefined) value = '';\r\n\t\turlencodedData += encodeURIComponent(key) + '=' + encodeURIComponent(value);\r\n\t}\r\n\treturn urlencodedData;\r\n};\r\n\r\nNet.formData = function (form: HTMLFormElement): { [name: string]: string | boolean } {\r\n\t// not technically all `HTMLInputElement`s but who wants to cast all these?\r\n\tconst elements = form.querySelectorAll<HTMLInputElement>('input[name], select[name], textarea[name]');\r\n\tconst out: { [name: string]: string | boolean } = {};\r\n\tfor (const element of elements) {\r\n\t\tif (element.type === 'checkbox') {\r\n\t\t\tout[element.name] = element.getAttribute('value') ? (\r\n\t\t\t\telement.checked ? element.value : ''\r\n\t\t\t) : (\r\n\t\t\t\t!!element.checked\r\n\t\t\t);\r\n\t\t} else if (element.type !== 'radio' || element.checked) {\r\n\t\t\tout[element.name] = element.value;\r\n\t\t}\r\n\t}\r\n\treturn out;\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
