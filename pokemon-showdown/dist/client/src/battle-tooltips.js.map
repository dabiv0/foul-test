{
  "version": 3,
  "sources": ["../../../client/src/battle-tooltips.ts"],
  "sourcesContent": ["/**\r\n * Pokemon Showdown Tooltips\r\n *\r\n * A file for generating tooltips for battles. This should be IE7+ and\r\n * use the DOM directly.\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\nimport { Pokemon, type Battle, type ServerPokemon } from \"./battle\";\r\nimport { Dex, type ModdedDex, toID, type ID } from \"./battle-dex\";\r\nimport type { BattleScene } from \"./battle-animations\";\r\nimport { BattleLog } from \"./battle-log\";\r\nimport { Move, BattleNatures } from \"./battle-dex-data\";\r\nimport { BattleTextParser } from \"./battle-text-parser\";\r\n\r\nexport class ModifiableValue {\r\n\tvalue = 0;\r\n\tmaxValue = 0;\r\n\tcomment: string[];\r\n\tbattle: Battle;\r\n\tpokemon: Pokemon;\r\n\tserverPokemon: ServerPokemon;\r\n\titemName: string;\r\n\tabilityName: string;\r\n\tweatherName: string;\r\n\tisAccuracy = false;\r\n\tconstructor(battle: Battle, pokemon: Pokemon, serverPokemon: ServerPokemon) {\r\n\t\tthis.comment = [];\r\n\t\tthis.battle = battle;\r\n\t\tthis.pokemon = pokemon;\r\n\t\tthis.serverPokemon = serverPokemon;\r\n\r\n\t\tthis.itemName = this.battle.dex.items.get(serverPokemon.item).name;\r\n\t\tconst ability = serverPokemon.ability || pokemon?.ability || serverPokemon.baseAbility;\r\n\t\tthis.abilityName = this.battle.dex.abilities.get(ability).name;\r\n\t\tthis.weatherName = this.battle.dex.moves.get(battle.weather).exists ?\r\n\t\t\tthis.battle.dex.moves.get(battle.weather).name : this.battle.dex.abilities.get(battle.weather).name;\r\n\t}\r\n\treset(value = 0, isAccuracy?: boolean) {\r\n\t\tthis.value = value;\r\n\t\tthis.maxValue = 0;\r\n\t\tthis.isAccuracy = !!isAccuracy;\r\n\t\tthis.comment = [];\r\n\t}\r\n\ttryItem(itemName: string) {\r\n\t\tif (itemName !== this.itemName) return false;\r\n\t\tif (this.battle.hasPseudoWeather('Magic Room')) {\r\n\t\t\tthis.comment.push(` (${itemName} suppressed by Magic Room)`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (this.pokemon?.volatiles['embargo']) {\r\n\t\t\tthis.comment.push(` (${itemName} suppressed by Embargo)`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst ignoreKlutz = [\r\n\t\t\t\"Macho Brace\", \"Power Anklet\", \"Power Band\", \"Power Belt\", \"Power Bracer\", \"Power Lens\", \"Power Weight\",\r\n\t\t];\r\n\t\tif (this.tryAbility('Klutz') && !ignoreKlutz.includes(itemName)) {\r\n\t\t\tthis.comment.push(` (${itemName} suppressed by Klutz)`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\ttryAbility(abilityName: string) {\r\n\t\tif (abilityName !== this.abilityName) return false;\r\n\t\tif (this.pokemon?.volatiles['gastroacid']) {\r\n\t\t\tthis.comment.push(` (${abilityName} suppressed by Gastro Acid)`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Check for Neutralizing Gas\r\n\t\tif (!this.pokemon?.effectiveAbility(this.serverPokemon)) return false;\r\n\t\treturn true;\r\n\t}\r\n\ttryWeather(weatherName?: string) {\r\n\t\tif (!this.weatherName) return false;\r\n\t\tif (!weatherName) weatherName = this.weatherName;\r\n\t\telse if (weatherName !== this.weatherName) return false;\r\n\t\tfor (const side of this.battle.sides) {\r\n\t\t\tfor (const active of side.active) {\r\n\t\t\t\tif (active && ['Air Lock', 'Cloud Nine'].includes(active.ability)) {\r\n\t\t\t\t\tthis.comment.push(` (${weatherName} suppressed by ${active.ability})`);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\titemModify(factor: number, itemName?: string) {\r\n\t\tif (!itemName) itemName = this.itemName;\r\n\t\tif (!itemName) return false;\r\n\t\tif (!this.tryItem(itemName)) return false;\r\n\t\treturn this.modify(factor, itemName);\r\n\t}\r\n\tabilityModify(factor: number, abilityName: string) {\r\n\t\tif (!this.tryAbility(abilityName)) return false;\r\n\t\treturn this.modify(factor, abilityName);\r\n\t}\r\n\tweatherModify(factor: number, weatherName?: string, name?: string) {\r\n\t\tif (!weatherName) weatherName = this.weatherName;\r\n\t\tif (!weatherName) return false;\r\n\t\tif (!this.tryWeather(weatherName)) return false;\r\n\t\treturn this.modify(factor, name || weatherName);\r\n\t}\r\n\tmodify(factor: number, name?: string) {\r\n\t\tif (factor === 0) {\r\n\t\t\tif (name) this.comment.push(` (${name})`);\r\n\t\t\tthis.value = 0;\r\n\t\t\tthis.maxValue = 0;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (name) this.comment.push(` (${this.round(factor)}&times; from ${name})`);\r\n\t\tthis.value *= factor;\r\n\t\tif (!(name === 'Technician' && this.maxValue > 60)) this.maxValue *= factor;\r\n\t\tif (this.battle.tier.includes('Super Staff Bros') &&\r\n\t\t\t!(name === 'Confirmed Town' && this.maxValue > 60)) this.maxValue *= factor;\r\n\t\treturn true;\r\n\t}\r\n\tset(value: number, reason?: string) {\r\n\t\tif (reason) this.comment.push(` (${reason})`);\r\n\t\tthis.value = value;\r\n\t\tthis.maxValue = 0;\r\n\t\treturn true;\r\n\t}\r\n\tsetRange(value: number, maxValue: number, reason?: string) {\r\n\t\tif (reason) this.comment.push(` (${reason})`);\r\n\t\tthis.value = value;\r\n\t\tthis.maxValue = maxValue;\r\n\t\treturn true;\r\n\t}\r\n\tround(value: number) {\r\n\t\treturn value ? Number(value.toFixed(2)) : 0;\r\n\t}\r\n\ttoString() {\r\n\t\tlet valueString;\r\n\t\tif (this.isAccuracy) {\r\n\t\t\tvalueString = this.value ? `${this.round(this.value)}%` : `can't miss`;\r\n\t\t} else {\r\n\t\t\tvalueString = this.value ? `${this.round(this.value)}` : ``;\r\n\t\t}\r\n\t\tif (this.maxValue) {\r\n\t\t\tvalueString += ` to ${this.round(this.maxValue)}` + (this.isAccuracy ? '%' : '');\r\n\t\t}\r\n\t\treturn valueString + this.comment.join('');\r\n\t}\r\n}\r\n\r\nexport class BattleTooltips {\r\n\tbattle: Battle;\r\n\r\n\tconstructor(battle: Battle) {\r\n\t\tthis.battle = battle;\r\n\t}\r\n\r\n\t// tooltips\r\n\t// Touch delay, pressing finger more than that time will cause the tooltip to open.\r\n\t// Shorter time will cause the button to click\r\n\tstatic LONG_TAP_DELAY = 500; // ms\r\n\tstatic LONG_CLICK_DELAY = 700; // ms\r\n\tstatic longTapTimeout = 0;\r\n\tstatic elem: HTMLDivElement | null = null;\r\n\tstatic parentElem: HTMLElement | null = null;\r\n\tstatic isLocked = false;\r\n\tstatic isPressed = false;\r\n\r\n\tstatic hideTooltip() {\r\n\t\tBattleTooltips.cancelLongTap();\r\n\t\tif (!BattleTooltips.elem) return;\r\n\t\tBattleTooltips.elem.parentNode!.removeChild(BattleTooltips.elem);\r\n\t\tBattleTooltips.elem = null;\r\n\t\tBattleTooltips.parentElem = null;\r\n\t\tBattleTooltips.isLocked = false;\r\n\t\t$('#tooltipwrapper').removeClass('tooltip-locked tooltip-locking-click tooltip-locking-tap');\r\n\t}\r\n\r\n\tstatic cancelLongTap() {\r\n\t\tif (BattleTooltips.longTapTimeout) {\r\n\t\t\tclearTimeout(BattleTooltips.longTapTimeout);\r\n\t\t\tBattleTooltips.longTapTimeout = 0;\r\n\t\t}\r\n\t\t$('#tooltipwrapper').removeClass('tooltip-locking-click tooltip-locking-tap');\r\n\t}\r\n\r\n\tlockTooltip() {\r\n\t\tif (BattleTooltips.elem && !BattleTooltips.isLocked) {\r\n\t\t\tBattleTooltips.isLocked = true;\r\n\t\t\tif (BattleTooltips.isPressed) {\r\n\t\t\t\t$(BattleTooltips.parentElem!).removeClass('pressed');\r\n\t\t\t\tBattleTooltips.isPressed = false;\r\n\t\t\t}\r\n\t\t\t// $('#tooltipwrapper').removeClass('tooltip-locking');\r\n\t\t\t$('#tooltipwrapper').addClass('tooltip-locked');\r\n\t\t}\r\n\t}\r\n\r\n\thandleTouchEnd(e: TouchEvent) {\r\n\t\tBattleTooltips.cancelLongTap();\r\n\r\n\t\tif (!BattleTooltips.isLocked) BattleTooltips.hideTooltip();\r\n\t}\r\n\r\n\tlisten(elem: HTMLElement | JQuery) {\r\n\t\tconst $elem = $(elem);\r\n\t\t$elem.on('mouseover', '.has-tooltip', this.showTooltipEvent);\r\n\t\t$elem.on('click', '.has-tooltip', this.clickTooltipEvent);\r\n\t\t$elem.on('focus', '.has-tooltip', this.showTooltipEvent);\r\n\t\t$elem.on('mouseout', '.has-tooltip', BattleTooltips.unshowTooltip);\r\n\t\t$elem.on('mousedown', '.has-tooltip', this.holdLockTooltipEvent);\r\n\t\t$elem.on('blur', '.has-tooltip', BattleTooltips.unshowTooltip);\r\n\t\t$elem.on('mouseup', '.has-tooltip', BattleTooltips.unshowTooltip);\r\n\r\n\t\t$elem.on('touchstart', '.has-tooltip', e => {\r\n\t\t\te.preventDefault();\r\n\t\t\tthis.holdLockTooltipEvent(e);\r\n\t\t\tif (!BattleTooltips.parentElem) {\r\n\t\t\t\t// should never happen, but in case there's a bug in the tooltip handler\r\n\t\t\t\tBattleTooltips.parentElem = e.currentTarget;\r\n\t\t\t}\r\n\t\t\t$(BattleTooltips.parentElem!).addClass('pressed');\r\n\t\t\tBattleTooltips.isPressed = true;\r\n\t\t});\r\n\t\t$elem.on('touchend', '.has-tooltip', e => {\r\n\t\t\te.preventDefault();\r\n\t\t\tif (e.currentTarget === BattleTooltips.parentElem && BattleTooltips.isPressed) {\r\n\t\t\t\tBattleTooltips.parentElem!.click();\r\n\t\t\t}\r\n\t\t\tBattleTooltips.unshowTooltip();\r\n\t\t});\r\n\t\t$elem.on('touchleave', '.has-tooltip', BattleTooltips.unshowTooltip);\r\n\t\t$elem.on('touchcancel', '.has-tooltip', BattleTooltips.unshowTooltip);\r\n\t}\r\n\r\n\tclickTooltipEvent = (e: Event) => {\r\n\t\tif (BattleTooltips.isLocked) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopImmediatePropagation();\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * An event that will lock a tooltip if held down\r\n\t *\r\n\t * (Namely, a long-tap or long-click)\r\n\t */\r\n\tholdLockTooltipEvent = (e: JQuery.TriggeredEvent) => {\r\n\t\tif (BattleTooltips.isLocked) BattleTooltips.hideTooltip();\r\n\t\tconst target = e.currentTarget as HTMLElement;\r\n\t\tthis.showTooltip(target);\r\n\t\tconst isClick = (e.type === 'mousedown' && target.tagName === 'BUTTON');\r\n\r\n\t\tBattleTooltips.longTapTimeout = setTimeout(() => {\r\n\t\t\tBattleTooltips.longTapTimeout = 0;\r\n\t\t\tthis.lockTooltip();\r\n\t\t}, isClick ? BattleTooltips.LONG_CLICK_DELAY : BattleTooltips.LONG_TAP_DELAY);\r\n\t\tif (isClick) {\r\n\t\t\t$('#tooltipwrapper').addClass('tooltip-locking-click');\r\n\t\t} else {\r\n\t\t\t$('#tooltipwrapper').addClass('tooltip-locking-tap');\r\n\t\t}\r\n\t};\r\n\r\n\tshowTooltipEvent = (e: Event) => {\r\n\t\tif (BattleTooltips.isLocked) return;\r\n\t\tthis.showTooltip(e.currentTarget as HTMLElement);\r\n\t};\r\n\r\n\t/**\r\n\t * Only hides tooltips if they're not locked\r\n\t */\r\n\tstatic unshowTooltip() {\r\n\t\tif (BattleTooltips.isLocked) return;\r\n\t\tif (BattleTooltips.isPressed) {\r\n\t\t\t$(BattleTooltips.parentElem!).removeClass('pressed');\r\n\t\t\tBattleTooltips.isPressed = false;\r\n\t\t}\r\n\t\tBattleTooltips.hideTooltip();\r\n\t}\r\n\r\n\tshowTooltip(elem: HTMLElement) {\r\n\t\tconst args = (elem.dataset.tooltip || '').split('|');\r\n\t\tconst [type] = args;\r\n\t\t/**\r\n\t\t * If false, we instead attach the tooltip above the parent element.\r\n\t\t * This is important for the move/switch menus so the tooltip doesn't\r\n\t\t * cover up buttons above the hovered button.\r\n\t\t */\r\n\t\tlet ownHeight = !!elem.dataset.ownheight;\r\n\r\n\t\tlet buf: string;\r\n\t\tswitch (type) {\r\n\t\tcase 'move':\r\n\t\tcase 'zmove':\r\n\t\tcase 'maxmove': { // move|MOVE|ACTIVEPOKEMON|[GMAXMOVE]\r\n\t\t\tlet move = this.battle.dex.moves.get(args[1]);\r\n\t\t\tlet teamIndex = parseInt(args[2], 10);\r\n\t\t\tlet pokemon = this.battle.nearSide.active[\r\n\t\t\t\tteamIndex + this.battle.pokemonControlled * Math.floor(this.battle.mySide.n / 2)\r\n\t\t\t];\r\n\t\t\tlet gmaxMove = args[3] ? this.battle.dex.moves.get(args[3]) : undefined;\r\n\t\t\tif (!pokemon) return false;\r\n\t\t\tlet serverPokemon = this.battle.myPokemon![teamIndex];\r\n\t\t\tbuf = this.showMoveTooltip(move, type, pokemon, serverPokemon, gmaxMove);\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcase 'pokemon': { // pokemon|SIDE|POKEMON\r\n\t\t\t// mouse over sidebar pokemon\r\n\t\t\t// pokemon definitely exists, serverPokemon always ignored\r\n\t\t\tlet sideIndex = parseInt(args[1], 10);\r\n\t\t\tlet side = this.battle.sides[sideIndex];\r\n\t\t\tlet pokemon = side.pokemon[parseInt(args[2], 10)];\r\n\t\t\tif (args[3] === 'illusion') {\r\n\t\t\t\tbuf = '';\r\n\t\t\t\tconst species = pokemon.getBaseSpecies().baseSpecies;\r\n\t\t\t\tlet index = 1;\r\n\t\t\t\tfor (const otherPokemon of side.pokemon) {\r\n\t\t\t\t\tif (otherPokemon.getBaseSpecies().baseSpecies === species) {\r\n\t\t\t\t\t\tbuf += this.showPokemonTooltip(otherPokemon, null, false, index);\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tbuf = this.showPokemonTooltip(pokemon);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'activepokemon': { // activepokemon|SIDE|ACTIVE\r\n\t\t\t// mouse over active pokemon\r\n\t\t\t// pokemon definitely exists, serverPokemon maybe\r\n\t\t\tlet sideIndex = parseInt(args[1], 10);\r\n\t\t\tlet side = this.battle.sides[+this.battle.viewpointSwitched ^ sideIndex];\r\n\t\t\tlet activeIndex = parseInt(args[2], 10);\r\n\t\t\tlet pokemonIndex = activeIndex;\r\n\t\t\tif (activeIndex >= 1 && this.battle.sides.length > 2) {\r\n\t\t\t\tpokemonIndex -= 1;\r\n\t\t\t\tside = this.battle.sides[side.n + 2];\r\n\t\t\t}\r\n\t\t\tlet pokemon = side.active[activeIndex];\r\n\t\t\tlet serverPokemon = null;\r\n\t\t\tif (side === this.battle.mySide && this.battle.myPokemon) {\r\n\t\t\t\tserverPokemon = this.battle.myPokemon[pokemonIndex];\r\n\t\t\t}\r\n\t\t\tif (side === this.battle.mySide.ally && this.battle.myAllyPokemon) {\r\n\t\t\t\tserverPokemon = this.battle.myAllyPokemon[pokemonIndex];\r\n\t\t\t}\r\n\t\t\tif (!pokemon) return false;\r\n\t\t\tbuf = this.showPokemonTooltip(pokemon, serverPokemon, true);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'switchpokemon': { // switchpokemon|POKEMON\r\n\t\t\t// mouse over switchable pokemon\r\n\t\t\t// serverPokemon definitely exists, sidePokemon maybe\r\n\t\t\t// let side = this.battle.mySide;\r\n\t\t\tlet activeIndex = parseInt(args[1], 10);\r\n\t\t\tlet pokemon = null;\r\n\t\t\t/* if (activeIndex < side.active.length && activeIndex < this.battle.pokemonControlled) {\r\n\t\t\t\tpokemon = side.active[activeIndex];\r\n\t\t\t\tif (pokemon && pokemon.side === side.ally) pokemon = null;\r\n\t\t\t} */\r\n\t\t\tlet serverPokemon = this.battle.myPokemon![activeIndex];\r\n\t\t\tbuf = this.showPokemonTooltip(pokemon, serverPokemon);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'allypokemon': { // allypokemon|POKEMON\r\n\t\t\t// mouse over ally's pokemon in multi battles\r\n\t\t\t// serverPokemon definitely exists, sidePokemon maybe\r\n\t\t\t// let side = this.battle.mySide.ally;\r\n\t\t\tlet activeIndex = parseInt(args[1], 10);\r\n\t\t\tlet pokemon = null;\r\n\t\t\t/* if (activeIndex < side.pokemon.length) {\r\n\t\t\t\tpokemon = side.pokemon[activeIndex] || side.ally ? side.ally.pokemon[activeIndex] : null;\r\n\t\t\t} */\r\n\t\t\tlet serverPokemon = this.battle.myAllyPokemon ? this.battle.myAllyPokemon[activeIndex] : null;\r\n\t\t\tbuf = this.showPokemonTooltip(pokemon, serverPokemon);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'field': {\r\n\t\t\tbuf = this.showFieldTooltip();\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\t// \"throws\" an error without crashing\r\n\t\t\tPromise.resolve(new Error(`unrecognized type`));\r\n\t\t\tbuf = `<p class=\"message-error\" style=\"white-space: pre-wrap\">${new Error(`unrecognized type`).stack!}</p>`;\r\n\t\t}\r\n\r\n\t\tthis.placeTooltip(buf, elem, ownHeight, type);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tplaceTooltip(innerHTML: string, hoveredElem?: HTMLElement, notRelativeToParent?: boolean, type?: string) {\r\n\t\tlet $elem;\r\n\t\tif (hoveredElem) {\r\n\t\t\t$elem = $(hoveredElem);\r\n\t\t} else {\r\n\t\t\t$elem = (this.battle.scene as BattleScene).$turn;\r\n\t\t\tnotRelativeToParent = true;\r\n\t\t}\r\n\r\n\t\tlet hoveredX1 = $elem.offset()!.left;\r\n\r\n\t\tif (!notRelativeToParent) {\r\n\t\t\t$elem = $elem.parent();\r\n\t\t}\r\n\r\n\t\tlet hoveredY1 = $elem.offset()!.top;\r\n\t\tlet hoveredY2 = hoveredY1 + $elem.outerHeight()!;\r\n\r\n\t\t// (x, y) are the left and top offsets of #tooltipwrapper, which mark the\r\n\t\t// BOTTOM LEFT CORNER of the tooltip\r\n\r\n\t\tlet x = Math.max(hoveredX1 - 2, 0);\r\n\t\tlet y = Math.max(hoveredY1 - 5, 0);\r\n\r\n\t\tlet $wrapper = $('#tooltipwrapper');\r\n\t\tif (!$wrapper.length) {\r\n\t\t\t$wrapper = $(`<div id=\"tooltipwrapper\" role=\"tooltip\"></div>`);\r\n\t\t\t$(document.body).append($wrapper);\r\n\t\t\t$wrapper.on('click', e => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst selection = window.getSelection()!;\r\n\t\t\t\t\tif (selection.type === 'Range') return;\r\n\t\t\t\t} catch {}\r\n\t\t\t\tBattleTooltips.hideTooltip();\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t$wrapper.removeClass('tooltip-locked');\r\n\t\t}\r\n\t\t$wrapper.css({\r\n\t\t\tleft: Math.min(x, document.documentElement.clientWidth - 400),\r\n\t\t\ttop: y,\r\n\t\t});\r\n\t\tinnerHTML = `<div class=\"tooltipinner\"><div class=\"tooltip tooltip-${type!}\">${innerHTML}</div></div>`;\r\n\t\t$wrapper.html(innerHTML).appendTo(document.body);\r\n\t\tBattleTooltips.elem = $wrapper.find('.tooltip')[0] as HTMLDivElement;\r\n\t\tBattleTooltips.isLocked = false;\r\n\r\n\t\tlet height = $(BattleTooltips.elem).outerHeight()!;\r\n\t\tif (y - height < 1) {\r\n\t\t\t// tooltip is too tall to fit above the element:\r\n\t\t\t// try to fit it below it instead\r\n\t\t\ty = hoveredY2 + height + 5;\r\n\t\t\tif (y > document.documentElement.clientHeight) {\r\n\t\t\t\t// tooltip is also too tall to fit below the element:\r\n\t\t\t\t// just place it at the top of the screen\r\n\t\t\t\ty = height + 1;\r\n\t\t\t}\r\n\t\t\t$wrapper.css('top', y);\r\n\t\t} else if (y < 75) {\r\n\t\t\t// tooltip is pretty high up, put it below the element if it fits\r\n\t\t\ty = hoveredY2 + height + 5;\r\n\t\t\tif (y < document.documentElement.clientHeight) {\r\n\t\t\t\t// it fits\r\n\t\t\t\t$wrapper.css('top', y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet width = $(BattleTooltips.elem).outerWidth()!;\r\n\t\tconst availableWidth = document.documentElement.clientWidth + window.scrollX;\r\n\t\tif (x > availableWidth - width - 2) {\r\n\t\t\tx = availableWidth - width - 2;\r\n\t\t\t$wrapper.css('left', x);\r\n\t\t} else if (x > document.documentElement.clientWidth - 400) {\r\n\t\t\t$wrapper.css('left', x);\r\n\t\t}\r\n\r\n\t\tBattleTooltips.parentElem = hoveredElem || null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\thideTooltip() {\r\n\t\tBattleTooltips.hideTooltip();\r\n\t}\r\n\r\n\tstatic zMoveEffects: { [zEffect: string]: string } = {\r\n\t\t'clearnegativeboost': \"Restores negative stat stages to 0\",\r\n\t\t'crit2': \"Crit ratio +2\",\r\n\t\t'heal': \"Restores HP 100%\",\r\n\t\t'curse': \"Restores HP 100% if user is Ghost type, otherwise Attack +1\",\r\n\t\t'redirect': \"Redirects opposing attacks to user\",\r\n\t\t'healreplacement': \"Restores replacement's HP 100%\",\r\n\t};\r\n\r\n\tgetStatusZMoveEffect(move: Dex.Move) {\r\n\t\tif (move.zMove!.effect! in BattleTooltips.zMoveEffects) {\r\n\t\t\treturn BattleTooltips.zMoveEffects[move.zMove!.effect!];\r\n\t\t}\r\n\t\tlet boostText = '';\r\n\t\tif (move.zMove!.boost) {\r\n\t\t\tboostText = Object.entries(move.zMove!.boost).map(([stat, boost]) =>\r\n\t\t\t\t`${BattleTextParser.stat(stat)} +${boost}`\r\n\t\t\t).join(', ');\r\n\t\t}\r\n\t\treturn boostText;\r\n\t}\r\n\r\n\tstatic zMoveTable: { [type in Dex.TypeName]: string } = {\r\n\t\tPoison: \"Acid Downpour\",\r\n\t\tFighting: \"All-Out Pummeling\",\r\n\t\tDark: \"Black Hole Eclipse\",\r\n\t\tGrass: \"Bloom Doom\",\r\n\t\tNormal: \"Breakneck Blitz\",\r\n\t\tRock: \"Continental Crush\",\r\n\t\tSteel: \"Corkscrew Crash\",\r\n\t\tDragon: \"Devastating Drake\",\r\n\t\tElectric: \"Gigavolt Havoc\",\r\n\t\tWater: \"Hydro Vortex\",\r\n\t\tFire: \"Inferno Overdrive\",\r\n\t\tGhost: \"Never-Ending Nightmare\",\r\n\t\tBug: \"Savage Spin-Out\",\r\n\t\tPsychic: \"Shattered Psyche\",\r\n\t\tIce: \"Subzero Slammer\",\r\n\t\tFlying: \"Supersonic Skystrike\",\r\n\t\tGround: \"Tectonic Rage\",\r\n\t\tFairy: \"Twinkle Tackle\",\r\n\t\tStellar: \"\",\r\n\t\t\"???\": \"\",\r\n\t};\r\n\r\n\tstatic maxMoveTable: { [type in Dex.TypeName]: string } = {\r\n\t\tPoison: \"Max Ooze\",\r\n\t\tFighting: \"Max Knuckle\",\r\n\t\tDark: \"Max Darkness\",\r\n\t\tGrass: \"Max Overgrowth\",\r\n\t\tNormal: \"Max Strike\",\r\n\t\tRock: \"Max Rockfall\",\r\n\t\tSteel: \"Max Steelspike\",\r\n\t\tDragon: \"Max Wyrmwind\",\r\n\t\tElectric: \"Max Lightning\",\r\n\t\tWater: \"Max Geyser\",\r\n\t\tFire: \"Max Flare\",\r\n\t\tGhost: \"Max Phantasm\",\r\n\t\tBug: \"Max Flutterby\",\r\n\t\tPsychic: \"Max Mindstorm\",\r\n\t\tIce: \"Max Hailstorm\",\r\n\t\tFlying: \"Max Airstream\",\r\n\t\tGround: \"Max Quake\",\r\n\t\tFairy: \"Max Starfall\",\r\n\t\tStellar: \"\",\r\n\t\t\"???\": \"\",\r\n\t};\r\n\r\n\tgetMaxMoveFromType(type: Dex.TypeName, gmaxMove?: string | Dex.Move) {\r\n\t\tif (gmaxMove) {\r\n\t\t\tif (typeof gmaxMove === 'string') gmaxMove = this.battle.dex.moves.get(gmaxMove);\r\n\t\t\tif (type === gmaxMove.type) return gmaxMove;\r\n\t\t}\r\n\t\treturn this.battle.dex.moves.get(BattleTooltips.maxMoveTable[type]);\r\n\t}\r\n\r\n\tshowMoveTooltip(\r\n\t\tmove: Dex.Move, isZOrMax: string, pokemon: Pokemon, serverPokemon: ServerPokemon, gmaxMove?: Dex.Move\r\n\t) {\r\n\t\tlet text = '';\r\n\r\n\t\tlet zEffect = '';\r\n\t\tlet foeActive = pokemon.side.foe.active;\r\n\t\tif (this.battle.gameType === 'freeforall') {\r\n\t\t\tfoeActive = [...foeActive, ...pokemon.side.active].filter(active => active !== pokemon);\r\n\t\t}\r\n\t\t// TODO: move this somewhere it makes more sense\r\n\t\tif (pokemon.ability === '(suppressed)') serverPokemon.ability = '(suppressed)';\r\n\t\tlet ability = toID(serverPokemon.ability || pokemon.ability || serverPokemon.baseAbility);\r\n\t\tlet item = this.battle.dex.items.get(serverPokemon.item);\r\n\r\n\t\tlet value = new ModifiableValue(this.battle, pokemon, serverPokemon);\r\n\t\tlet [moveType, category] = this.getMoveType(move, value, gmaxMove || isZOrMax === 'maxmove');\r\n\t\tlet categoryDiff = move.category !== category;\r\n\r\n\t\tif (isZOrMax === 'zmove') {\r\n\t\t\tif (item.zMoveFrom === move.name) {\r\n\t\t\t\tmove = this.battle.dex.moves.get(item.zMove as string);\r\n\t\t\t} else if (move.category === 'Status') {\r\n\t\t\t\tmove = new Move(move.id, \"\", {\r\n\t\t\t\t\t...move,\r\n\t\t\t\t\tname: 'Z-' + move.name,\r\n\t\t\t\t});\r\n\t\t\t\tzEffect = this.getStatusZMoveEffect(move);\r\n\t\t\t} else {\r\n\t\t\t\tlet moveName = BattleTooltips.zMoveTable[item.zMoveType as Dex.TypeName];\r\n\t\t\t\tlet zMove = this.battle.dex.moves.get(moveName);\r\n\t\t\t\tlet movePower = move.zMove!.basePower;\r\n\t\t\t\t// the different Hidden Power types don't have a Z power set, fall back on base move\r\n\t\t\t\tif (!movePower && move.id.startsWith('hiddenpower')) {\r\n\t\t\t\t\tmovePower = this.battle.dex.moves.get('hiddenpower').zMove!.basePower;\r\n\t\t\t\t}\r\n\t\t\t\tif (move.id === 'weatherball') {\r\n\t\t\t\t\tswitch (this.battle.weather) {\r\n\t\t\t\t\tcase 'sunnyday':\r\n\t\t\t\t\tcase 'desolateland':\r\n\t\t\t\t\t\tzMove = this.battle.dex.moves.get(BattleTooltips.zMoveTable['Fire']);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'raindance':\r\n\t\t\t\t\tcase 'primordialsea':\r\n\t\t\t\t\t\tzMove = this.battle.dex.moves.get(BattleTooltips.zMoveTable['Water']);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'sandstorm':\r\n\t\t\t\t\t\tzMove = this.battle.dex.moves.get(BattleTooltips.zMoveTable['Rock']);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'hail':\r\n\t\t\t\t\tcase 'snowscape':\r\n\t\t\t\t\t\tzMove = this.battle.dex.moves.get(BattleTooltips.zMoveTable['Ice']);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmove = new Move(zMove.id, zMove.name, {\r\n\t\t\t\t\t...zMove,\r\n\t\t\t\t\tcategory: move.category,\r\n\t\t\t\t\tbasePower: movePower,\r\n\t\t\t\t});\r\n\t\t\t\tcategoryDiff = false;\r\n\t\t\t}\r\n\t\t} else if (isZOrMax === 'maxmove') {\r\n\t\t\tif (move.category === 'Status') {\r\n\t\t\t\tmove = this.battle.dex.moves.get('Max Guard');\r\n\t\t\t} else {\r\n\t\t\t\tlet maxMove = this.getMaxMoveFromType(moveType, gmaxMove);\r\n\t\t\t\tconst basePower = ['gmaxdrumsolo', 'gmaxfireball', 'gmaxhydrosnipe'].includes(maxMove.id) ?\r\n\t\t\t\t\tmaxMove.basePower : move.maxMove.basePower;\r\n\t\t\t\tmove = new Move(maxMove.id, maxMove.name, {\r\n\t\t\t\t\t...maxMove,\r\n\t\t\t\t\tcategory: move.category,\r\n\t\t\t\t\tbasePower,\r\n\t\t\t\t});\r\n\t\t\t\tcategoryDiff = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (categoryDiff) {\r\n\t\t\tmove = new Move(move.id, move.name, {\r\n\t\t\t\t...move,\r\n\t\t\t\tcategory,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\ttext += `<h2>${move.name}<br />`;\r\n\r\n\t\ttext += Dex.getTypeIcon(moveType);\r\n\t\ttext += ` ${Dex.getCategoryIcon(category)}</h2>`;\r\n\r\n\t\t// Check if there are more than one active Pok\u00E9mon to check for multiple possible BPs.\r\n\t\tlet showingMultipleBasePowers = false;\r\n\t\tif (category !== 'Status' && foeActive.length > 1) {\r\n\t\t\t// We check if there is a difference in base powers to note it.\r\n\t\t\t// Otherwise, it is just shown as in singles.\r\n\t\t\t// The trick is that we need to calculate it first for each Pok\u00E9mon to see if it changes.\r\n\t\t\tlet prevBasePower: string | null = null;\r\n\t\t\tlet basePower = '';\r\n\t\t\tlet difference = false;\r\n\t\t\tlet basePowers = [];\r\n\t\t\tfor (const active of foeActive) {\r\n\t\t\t\tif (!active) continue;\r\n\t\t\t\tvalue = this.getMoveBasePower(move, moveType, value, active);\r\n\t\t\t\tbasePower = `${value}`;\r\n\t\t\t\tif (prevBasePower === null) prevBasePower = basePower;\r\n\t\t\t\tif (prevBasePower !== basePower) difference = true;\r\n\t\t\t\tbasePowers.push(`Base power vs ${active.name}: ${basePower}`);\r\n\t\t\t}\r\n\t\t\tif (difference) {\r\n\t\t\t\ttext += '<p>' + basePowers.join('<br />') + '</p>';\r\n\t\t\t\tshowingMultipleBasePowers = true;\r\n\t\t\t}\r\n\t\t\t// Falls through to not to repeat code on showing the base power.\r\n\t\t}\r\n\t\tif (!showingMultipleBasePowers && category !== 'Status') {\r\n\t\t\tlet activeTarget = foeActive[0] || foeActive[1] || foeActive[2];\r\n\t\t\tvalue = this.getMoveBasePower(move, moveType, value, activeTarget);\r\n\t\t\ttext += `<p>Base power: ${value}</p>`;\r\n\t\t}\r\n\r\n\t\tlet accuracy = this.getMoveAccuracy(move, value);\r\n\r\n\t\t// Deal with Nature Power special case, indicating which move it calls.\r\n\t\tif (move.id === 'naturepower') {\r\n\t\t\tlet calls;\r\n\t\t\tif (this.battle.gen > 5) {\r\n\t\t\t\tif (this.battle.hasPseudoWeather('Electric Terrain')) {\r\n\t\t\t\t\tcalls = 'Thunderbolt';\r\n\t\t\t\t} else if (this.battle.hasPseudoWeather('Grassy Terrain')) {\r\n\t\t\t\t\tcalls = 'Energy Ball';\r\n\t\t\t\t} else if (this.battle.hasPseudoWeather('Misty Terrain')) {\r\n\t\t\t\t\tcalls = 'Moonblast';\r\n\t\t\t\t} else if (this.battle.hasPseudoWeather('Psychic Terrain')) {\r\n\t\t\t\t\tcalls = 'Psychic';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcalls = 'Tri Attack';\r\n\t\t\t\t}\r\n\t\t\t} else if (this.battle.gen > 3) {\r\n\t\t\t\t// In gens 4 and 5 it calls Earthquake.\r\n\t\t\t\tcalls = 'Earthquake';\r\n\t\t\t} else {\r\n\t\t\t\t// In gen 3 it calls Swift, so it retains its normal typing.\r\n\t\t\t\tcalls = 'Swift';\r\n\t\t\t}\r\n\t\t\tlet calledMove = this.battle.dex.moves.get(calls);\r\n\t\t\ttext += `Calls ${Dex.getTypeIcon(this.getMoveType(calledMove, value)[0])} ${calledMove.name}`;\r\n\t\t}\r\n\r\n\t\ttext += `<p>Accuracy: ${accuracy}</p>`;\r\n\t\tif (zEffect) text += `<p>Z-Effect: ${zEffect}</p>`;\r\n\r\n\t\tif (this.battle.hardcoreMode) {\r\n\t\t\ttext += `<p class=\"tooltip-section\">${move.shortDesc}</p>`;\r\n\t\t} else {\r\n\t\t\ttext += '<p class=\"tooltip-section\">';\r\n\t\t\tif (move.priority > 1) {\r\n\t\t\t\ttext += `Nearly always moves first <em>(priority +${move.priority})</em>.</p><p>`;\r\n\t\t\t} else if (move.priority <= -1) {\r\n\t\t\t\ttext += `Nearly always moves last <em>(priority &minus;${-move.priority})</em>.</p><p>`;\r\n\t\t\t} else if (move.priority === 1) {\r\n\t\t\t\ttext += `Usually moves first <em>(priority +${move.priority})</em>.</p><p>`;\r\n\t\t\t} else {\r\n\t\t\t\tif (move.id === 'grassyglide' && this.battle.hasPseudoWeather('Grassy Terrain')) {\r\n\t\t\t\t\ttext += 'Usually moves first <em>(priority +1)</em>.</p><p>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ttext += '' + (move.desc || move.shortDesc || '') + '</p>';\r\n\r\n\t\t\tif (this.battle.gameType === 'doubles' || this.battle.gameType === 'multi') {\r\n\t\t\t\tif (move.target === 'allAdjacent') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Hits both foes and ally.</p>';\r\n\t\t\t\t} else if (move.target === 'allAdjacentFoes') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Hits both foes.</p>';\r\n\t\t\t\t}\r\n\t\t\t} else if (this.battle.gameType === 'triples') {\r\n\t\t\t\tif (move.target === 'allAdjacent') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Hits adjacent foes and allies.</p>';\r\n\t\t\t\t} else if (move.target === 'allAdjacentFoes') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Hits adjacent foes.</p>';\r\n\t\t\t\t} else if (move.target === 'any') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Can target distant Pok&eacute;mon in Triples.</p>';\r\n\t\t\t\t}\r\n\t\t\t} else if (this.battle.gameType === 'freeforall') {\r\n\t\t\t\tif (move.target === 'allAdjacent' || move.target === 'allAdjacentFoes') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Hits all foes.</p>';\r\n\t\t\t\t} else if (move.target === 'adjacentAlly') {\r\n\t\t\t\t\ttext += '<p>&#x25ce; Can target any foe in Free-For-All.</p>';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (move.flags.defrost) {\r\n\t\t\t\ttext += `<p class=\"movetag\">The user thaws out if it is frozen.</p>`;\r\n\t\t\t}\r\n\t\t\tif (!move.flags.protect && !['self', 'allySide'].includes(move.target)) {\r\n\t\t\t\ttext += `<p class=\"movetag\">Not blocked by Protect <small>(and Detect, King's Shield, Spiky Shield)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.bypasssub) {\r\n\t\t\t\ttext += `<p class=\"movetag\">Bypasses Substitute <small>(but does not break it)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (!move.flags.reflectable && !['self', 'allySide'].includes(move.target) && move.category === 'Status') {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Not bounceable <small>(can't be bounced by Magic Coat/Bounce)</small></p>`;\r\n\t\t\t}\r\n\r\n\t\t\tif (move.flags.contact) {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Contact <small>(triggers Iron Barbs, Spiky Shield, etc)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.sound) {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Sound <small>(doesn't affect Soundproof pokemon)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.powder && this.battle.gen > 5) {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Powder <small>(doesn't affect Grass, Overcoat, Safety Goggles)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.punch && ability === 'ironfist') {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Fist <small>(boosted by Iron Fist)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.pulse && ability === 'megalauncher') {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Pulse <small>(boosted by Mega Launcher)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.bite && ability === 'strongjaw') {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Bite <small>(boosted by Strong Jaw)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif ((move.recoil || move.hasCrashDamage) && ability === 'reckless') {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Recoil <small>(boosted by Reckless)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.bullet) {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Bullet-like <small>(doesn't affect Bulletproof pokemon)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.slicing) {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Slicing <small>(boosted by Sharpness)</small></p>`;\r\n\t\t\t}\r\n\t\t\tif (move.flags.wind) {\r\n\t\t\t\ttext += `<p class=\"movetag\">&#x2713; Wind <small>(activates Wind Power and Wind Rider)</small></p>`;\r\n\t\t\t}\r\n\t\t\t// RBY healing move glitch\r\n\t\t\tif (this.battle.gen === 1 && !toID(this.battle.tier).includes('stadium') &&\r\n\t\t\t\t['recover', 'softboiled', 'rest'].includes(move.id)) {\r\n\t\t\t\tconst hpValues = [];\r\n\t\t\t\t// glitches at HP values equal to `maxHP + 1 % 256` unless they are `0 % 256`\r\n\t\t\t\tconst hp = serverPokemon.maxhp - 255;\r\n\t\t\t\tif (hp > 0 && hp % 256 !== 0) {\r\n\t\t\t\t\thpValues.push(hp);\r\n\t\t\t\t\tif (hp - 256 > 0) {\r\n\t\t\t\t\t\thpValues.push(hp - 256);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet failMessage = hpValues.length ? `Fails if current HP is ${hpValues.join(' or ')}.` : '';\r\n\t\t\t\tif (hpValues.includes(serverPokemon.hp)) failMessage = `<strong class=\"message-error\">${failMessage}</strong>`;\r\n\t\t\t\tif (failMessage) text += `<p>${failMessage}</p>`;\r\n\t\t\t}\r\n\t\t\tif (this.battle.gen === 1 && !toID(this.battle.tier).includes('stadium') &&\r\n\t\t\t\tmove.id === 'substitute') {\r\n\t\t\t\tconst selfKO = serverPokemon.maxhp % 4 === 0 ? serverPokemon.maxhp / 4 : null;\r\n\t\t\t\tlet failMessage = selfKO ? `KOs yourself if current HP is exactly ${selfKO}.` : '';\r\n\t\t\t\tif (selfKO === serverPokemon.hp) failMessage = `<strong class=\"message-error\">${failMessage}</strong>`;\r\n\t\t\t\tif (failMessage) text += `<p>${failMessage}</p>`;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\r\n\t/**\r\n\t * Needs either a Pokemon or a ServerPokemon, but note that neither\r\n\t * are guaranteed: If you hover over a possible switch-in that's\r\n\t * never been switched in before, you'll only have a ServerPokemon,\r\n\t * and if you hover over an opponent's pokemon, you'll only have a\r\n\t * Pokemon.\r\n\t *\r\n\t * isActive is true if hovering over a pokemon in the battlefield,\r\n\t * and false if hovering over a pokemon in the Switch menu.\r\n\t */\r\n\tshowPokemonTooltip(\r\n\t\tclientPokemon: Pokemon | null, serverPokemon?: ServerPokemon | null, isActive?: boolean, illusionIndex?: number\r\n\t) {\r\n\t\tconst pokemon = clientPokemon || serverPokemon!;\r\n\t\tlet text = '';\r\n\t\tlet genderBuf = '';\r\n\t\tconst gender = pokemon.gender;\r\n\t\tif (gender === 'M' || gender === 'F') {\r\n\t\t\tgenderBuf = ` <img src=\"${Dex.fxPrefix}gender-${gender.toLowerCase()}.png\" alt=\"${gender}\" width=\"7\" height=\"10\" class=\"pixelated\" /> `;\r\n\t\t}\r\n\r\n\t\tlet name = BattleLog.escapeHTML(pokemon.name);\r\n\t\tif (pokemon.speciesForme !== pokemon.name) {\r\n\t\t\tname += ` <small>(${BattleLog.escapeHTML(pokemon.speciesForme)})</small>`;\r\n\t\t}\r\n\r\n\t\tlet levelBuf = (pokemon.level !== 100 ? ` <small>L${pokemon.level}</small>` : ``);\r\n\t\tif (!illusionIndex || illusionIndex === 1) {\r\n\t\t\ttext += `<h2>${name}${genderBuf}${illusionIndex ? '' : levelBuf}<br />`;\r\n\r\n\t\t\tif (clientPokemon?.volatiles.formechange) {\r\n\t\t\t\tif (clientPokemon.volatiles.transform) {\r\n\t\t\t\t\ttext += `<small>(Transformed into ${clientPokemon.volatiles.formechange[1]})</small><br />`;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttext += `<small>(Changed forme: ${clientPokemon.volatiles.formechange[1]})</small><br />`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet types = serverPokemon?.terastallized ? [serverPokemon.teraType] : this.getPokemonTypes(pokemon);\r\n\t\t\tlet knownPokemon = serverPokemon || clientPokemon!;\r\n\r\n\t\t\tif (pokemon.terastallized) {\r\n\t\t\t\ttext += `<small>(Terastallized)</small><br />`;\r\n\t\t\t} else if (clientPokemon?.volatiles.typechange || clientPokemon?.volatiles.typeadd) {\r\n\t\t\t\ttext += `<small>(Type changed)</small><br />`;\r\n\t\t\t}\r\n\t\t\ttext += `<span class=\"textaligned-typeicons\">${types.map(type => Dex.getTypeIcon(type)).join(' ')}</span>`;\r\n\t\t\tif (pokemon.terastallized) {\r\n\t\t\t\ttext += `&nbsp; &nbsp; <small>(base: <span class=\"textaligned-typeicons\">${this.getPokemonTypes(pokemon, true).map(type => Dex.getTypeIcon(type)).join(' ')}</span>)</small>`;\r\n\t\t\t} else if (knownPokemon.teraType && !this.battle.rules['Terastal Clause']) {\r\n\t\t\t\ttext += `&nbsp; &nbsp; <small>(Tera Type: <span class=\"textaligned-typeicons\">${Dex.getTypeIcon(knownPokemon.teraType)}</span>)</small>`;\r\n\t\t\t}\r\n\t\t\ttext += `</h2>`;\r\n\t\t}\r\n\r\n\t\tif (illusionIndex) {\r\n\t\t\ttext += `<p class=\"tooltip-section\"><strong>Possible Illusion #${illusionIndex}</strong>${levelBuf}</p>`;\r\n\t\t}\r\n\r\n\t\tif (pokemon.fainted) {\r\n\t\t\ttext += '<p><small>HP:</small> (fainted)</p>';\r\n\t\t} else if (this.battle.hardcoreMode) {\r\n\t\t\tif (serverPokemon) {\r\n\t\t\t\tconst status = pokemon.status ? ` <span class=\"status ${pokemon.status}\">${pokemon.status.toUpperCase()}</span>` : '';\r\n\t\t\t\ttext += `<p><small>HP:</small> ${serverPokemon.hp}/${serverPokemon.maxhp}${status}</p>`;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet exacthp = '';\r\n\t\t\tif (serverPokemon) {\r\n\t\t\t\texacthp = ` (${serverPokemon.hp}/${serverPokemon.maxhp})`;\r\n\t\t\t} else if (pokemon.maxhp === 48) {\r\n\t\t\t\texacthp = ` <small>(${pokemon.hp}/${pokemon.maxhp} pixels)</small>`;\r\n\t\t\t}\r\n\t\t\tconst status = pokemon.status ? ` <span class=\"status ${pokemon.status}\">${pokemon.status.toUpperCase()}</span>` : '';\r\n\t\t\ttext += `<p><small>HP:</small> ${Pokemon.getHPText(pokemon, this.battle.reportExactHP)}${exacthp}${status}`;\r\n\t\t\tif (clientPokemon) {\r\n\t\t\t\tif (pokemon.status === 'tox') {\r\n\t\t\t\t\tif (pokemon.ability === 'Poison Heal' || pokemon.ability === 'Magic Guard') {\r\n\t\t\t\t\t\ttext += ` <small>Would take if ability removed: ${Math.floor(\r\n\t\t\t\t\t\t\t100 / 16 * Math.min(clientPokemon.statusData.toxicTurns + 1, 15)\r\n\t\t\t\t\t\t)}%</small>`;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttext += ` Next damage: ${Math.floor(\r\n\t\t\t\t\t\t\t100 / (clientPokemon.volatiles['dynamax'] ? 32 : 16) * Math.min(clientPokemon.statusData.toxicTurns + 1, 15)\r\n\t\t\t\t\t\t)}%`;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (pokemon.status === 'slp') {\r\n\t\t\t\t\ttext += ` Turns asleep: ${clientPokemon.statusData.sleepTurns}`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttext += '</p>';\r\n\t\t}\r\n\r\n\t\tconst supportsAbilities = this.battle.gen > 2 && !this.battle.tier.includes(\"Let's Go\");\r\n\r\n\t\tlet abilityText = '';\r\n\t\tif (supportsAbilities) {\r\n\t\t\tabilityText = this.getPokemonAbilityText(\r\n\t\t\t\tclientPokemon, serverPokemon, isActive, !!illusionIndex && illusionIndex > 1\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet itemText = '';\r\n\t\tif (serverPokemon) {\r\n\t\t\tlet item = '';\r\n\t\t\tlet itemEffect = '';\r\n\t\t\tif (clientPokemon?.prevItem) {\r\n\t\t\t\titem = 'None';\r\n\t\t\t\tlet prevItem = this.battle.dex.items.get(clientPokemon.prevItem).name;\r\n\t\t\t\titemEffect += clientPokemon.prevItemEffect ? prevItem + ' was ' + clientPokemon.prevItemEffect : 'was ' + prevItem;\r\n\t\t\t}\r\n\t\t\tif (serverPokemon.item) item = this.battle.dex.items.get(serverPokemon.item).name;\r\n\t\t\tif (itemEffect) itemEffect = ' (' + itemEffect + ')';\r\n\t\t\tif (item) itemText = '<small>Item:</small> ' + item + itemEffect;\r\n\t\t} else if (clientPokemon) {\r\n\t\t\tlet item = '';\r\n\t\t\tlet itemEffect = clientPokemon.itemEffect || '';\r\n\t\t\tif (clientPokemon.prevItem) {\r\n\t\t\t\titem = 'None';\r\n\t\t\t\tif (itemEffect) itemEffect += '; ';\r\n\t\t\t\tlet prevItem = this.battle.dex.items.get(clientPokemon.prevItem).name;\r\n\t\t\t\titemEffect += clientPokemon.prevItemEffect ? prevItem + ' was ' + clientPokemon.prevItemEffect : 'was ' + prevItem;\r\n\t\t\t}\r\n\t\t\tif (pokemon.item) item = this.battle.dex.items.get(pokemon.item).name;\r\n\t\t\tif (itemEffect) itemEffect = ' (' + itemEffect + ')';\r\n\t\t\tif (item) itemText = '<small>Item:</small> ' + item + itemEffect;\r\n\t\t}\r\n\r\n\t\tif (abilityText || itemText) {\r\n\t\t\ttext += '<p>';\r\n\t\t\ttext += abilityText;\r\n\t\t\tif (abilityText && itemText) {\r\n\t\t\t\t// ability/item on one line for your own switch tooltips, two lines everywhere else\r\n\t\t\t\ttext += (!isActive && serverPokemon ? ' / ' : '</p><p>');\r\n\t\t\t}\r\n\t\t\ttext += itemText;\r\n\t\t\ttext += '</p>';\r\n\t\t}\r\n\r\n\t\ttext += this.renderStats(clientPokemon, serverPokemon, !isActive);\r\n\r\n\t\tif (serverPokemon && !isActive) {\r\n\t\t\t// move list\r\n\t\t\ttext += `<p class=\"tooltip-section\">`;\r\n\t\t\tconst battlePokemon = clientPokemon || this.battle.findCorrespondingPokemon(pokemon);\r\n\t\t\tfor (const moveid of serverPokemon.moves) {\r\n\t\t\t\tconst move = this.battle.dex.moves.get(moveid);\r\n\t\t\t\tlet moveName = `&#8226; ${move.name}`;\r\n\t\t\t\tif (battlePokemon?.moveTrack) {\r\n\t\t\t\t\tfor (const row of battlePokemon.moveTrack) {\r\n\t\t\t\t\t\tif (moveName === row[0]) {\r\n\t\t\t\t\t\t\tmoveName = this.getPPUseText(row, true);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttext += `${moveName}<br />`;\r\n\t\t\t}\r\n\t\t\ttext += '</p>';\r\n\t\t} else if (!this.battle.hardcoreMode && clientPokemon?.moveTrack.length) {\r\n\t\t\t// move list (guessed)\r\n\t\t\ttext += `<p class=\"tooltip-section\">`;\r\n\t\t\tfor (const row of clientPokemon.moveTrack) {\r\n\t\t\t\ttext += `${this.getPPUseText(row)}<br />`;\r\n\t\t\t}\r\n\t\t\tif (clientPokemon.moveTrack.filter(([moveName]) => {\r\n\t\t\t\tif (moveName.startsWith('*')) return false;\r\n\t\t\t\tconst move = this.battle.dex.moves.get(moveName);\r\n\t\t\t\treturn !move.isZ && !move.isMax && move.name !== 'Mimic';\r\n\t\t\t}).length > 4) {\r\n\t\t\t\ttext += `(More than 4 moves is usually a sign of Illusion Zoroark/Zorua.) `;\r\n\t\t\t}\r\n\t\t\tif (this.battle.gen === 3) {\r\n\t\t\t\ttext += `(Pressure is not visible in Gen 3, so in certain situations, more PP may have been lost than shown here.) `;\r\n\t\t\t}\r\n\t\t\tif (this.pokemonHasClones(clientPokemon)) {\r\n\t\t\t\ttext += `(Your opponent has two indistinguishable Pok\u00E9mon, making it impossible for you to tell which one has which moves/ability/item.) `;\r\n\t\t\t}\r\n\t\t\ttext += `</p>`;\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\r\n\tshowFieldTooltip() {\r\n\t\tconst scene = this.battle.scene as BattleScene;\r\n\t\tlet buf = `<table style=\"border: 0; border-collapse: collapse; vertical-align: top; padding: 0; width: 100%\"><tr>`;\r\n\r\n\t\tlet atLeastOne = false;\r\n\t\tfor (const side of this.battle.sides) {\r\n\t\t\tconst sideConditions = scene.sideConditionsLeft(side, true);\r\n\t\t\tif (sideConditions) atLeastOne = true;\r\n\t\t\tbuf += `<td><p class=\"tooltip-section\"><strong>${BattleLog.escapeHTML(side.name)}</strong>${sideConditions || \"<br />(no conditions)\"}</p></td>`;\r\n\t\t}\r\n\t\tbuf += `</tr><table>`;\r\n\t\tif (!atLeastOne) buf = ``;\r\n\r\n\t\tlet weatherbuf = scene.weatherLeft() || `(no weather)`;\r\n\t\tif (weatherbuf.startsWith('<br />')) {\r\n\t\t\tweatherbuf = weatherbuf.slice(6);\r\n\t\t}\r\n\t\tbuf = `<p>${weatherbuf}</p>` + buf;\r\n\t\treturn `<p>${buf}</p>`;\r\n\t}\r\n\r\n\t/**\r\n\t * Does this Pok\u00E9mon's trainer have two of these Pok\u00E9mon that are\r\n\t * indistinguishable? (Same nickname, species, forme, level, gender,\r\n\t * and shininess.)\r\n\t */\r\n\tpokemonHasClones(pokemon: Pokemon) {\r\n\t\tconst side = pokemon.side;\r\n\t\tif (side.battle.speciesClause) return false;\r\n\t\tfor (const ally of side.pokemon) {\r\n\t\t\tif (pokemon !== ally && pokemon.searchid === ally.searchid) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcalculateModifiedStats(clientPokemon: Pokemon | null, serverPokemon: ServerPokemon, statStagesOnly?: boolean) {\r\n\t\tlet stats = { ...serverPokemon.stats };\r\n\t\tlet pokemon = clientPokemon || serverPokemon;\r\n\t\tconst isPowerTrick = clientPokemon?.volatiles['powertrick'];\r\n\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\tlet sourceStatName = statName;\r\n\t\t\tif (isPowerTrick) {\r\n\t\t\t\tif (statName === 'atk') sourceStatName = 'def';\r\n\t\t\t\tif (statName === 'def') sourceStatName = 'atk';\r\n\t\t\t}\r\n\t\t\tstats[statName] = serverPokemon.stats[sourceStatName];\r\n\t\t\tif (!clientPokemon) continue;\r\n\r\n\t\t\tconst clientStatName = clientPokemon.boosts.spc && (statName === 'spa' || statName === 'spd') ? 'spc' : statName;\r\n\t\t\tconst boostLevel = clientPokemon.boosts[clientStatName];\r\n\t\t\tif (boostLevel) {\r\n\t\t\t\tlet boostTable = [1, 1.5, 2, 2.5, 3, 3.5, 4];\r\n\t\t\t\tif (boostLevel > 0) {\r\n\t\t\t\t\tstats[statName] *= boostTable[boostLevel];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.battle.gen <= 2) boostTable = [1, 100 / 66, 2, 2.5, 100 / 33, 100 / 28, 4];\r\n\t\t\t\t\tstats[statName] /= boostTable[-boostLevel];\r\n\t\t\t\t}\r\n\t\t\t\tstats[statName] = Math.floor(stats[statName]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (statStagesOnly) return stats;\r\n\r\n\t\tconst ability = toID(\r\n\t\t\tclientPokemon?.effectiveAbility(serverPokemon) ?? (serverPokemon.ability || serverPokemon.baseAbility)\r\n\t\t);\r\n\r\n\t\t// check for burn, paralysis, guts, quick feet\r\n\t\tif (pokemon.status) {\r\n\t\t\tif (this.battle.gen > 2 && ability === 'guts') {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 1.5);\r\n\t\t\t} else if (this.battle.gen < 2 && pokemon.status === 'brn') {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 0.5);\r\n\t\t\t}\r\n\r\n\t\t\t// Paralysis is calculated later in newer generations, so we need to apply it early here\r\n\t\t\tif (this.battle.gen <= 2 && pokemon.status === 'par') {\r\n\t\t\t\tstats.spe = Math.floor(stats.spe * 0.25);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// gen 1 doesn't support items\r\n\t\tif (this.battle.gen <= 1) {\r\n\t\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\t\tif (stats[statName] > 999) stats[statName] = 999;\r\n\t\t\t}\r\n\t\t\treturn stats;\r\n\t\t}\r\n\r\n\t\tlet item = toID(serverPokemon.item);\r\n\t\tlet speedHalvingEVItems = [\r\n\t\t\t'machobrace', 'poweranklet', 'powerband', 'powerbelt', 'powerbracer', 'powerlens', 'powerweight',\r\n\t\t];\r\n\t\tif (\r\n\t\t\t(ability === 'klutz' && !speedHalvingEVItems.includes(item)) ||\r\n\t\t\tthis.battle.hasPseudoWeather('Magic Room') ||\r\n\t\t\tclientPokemon?.volatiles['embargo']\r\n\t\t) {\r\n\t\t\titem = '' as ID;\r\n\t\t}\r\n\r\n\t\tconst species = this.battle.dex.species.get(serverPokemon.speciesForme).baseSpecies;\r\n\t\tconst isTransform = clientPokemon?.volatiles.transform;\r\n\t\tconst speciesName = isTransform && clientPokemon?.volatiles.formechange?.[1] && this.battle.gen <= 4 ?\r\n\t\t\tthis.battle.dex.species.get(clientPokemon.volatiles.formechange[1]).baseSpecies : species;\r\n\r\n\t\tlet speedModifiers = [];\r\n\r\n\t\t// check for light ball, thick club, metal/quick powder\r\n\t\t// the only stat modifying items in gen 2 were light ball, thick club, metal powder\r\n\t\tif (item === 'lightball' && speciesName === 'Pikachu' && this.battle.gen !== 4) {\r\n\t\t\tif (this.battle.gen > 4) stats.atk *= 2;\r\n\t\t\tstats.spa *= 2;\r\n\t\t}\r\n\r\n\t\tif (item === 'thickclub') {\r\n\t\t\tif (speciesName === 'Marowak' || speciesName === 'Cubone') {\r\n\t\t\t\tstats.atk *= 2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (speciesName === 'Ditto' && !(clientPokemon && 'transform' in clientPokemon.volatiles)) {\r\n\t\t\tif (item === 'quickpowder') {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (item === 'metalpowder') {\r\n\t\t\t\tif (this.battle.gen === 2) {\r\n\t\t\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstats.def *= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// check abilities other than Guts and Quick Feet\r\n\t\t// check items other than light ball, thick club, metal/quick powder\r\n\t\tif (this.battle.gen <= 2) {\r\n\t\t\treturn stats;\r\n\t\t}\r\n\r\n\t\tlet weather = this.battle.weather;\r\n\t\tif (this.battle.abilityActive(['Air Lock', 'Cloud Nine'])) {\r\n\t\t\tweather = '' as ID;\r\n\t\t}\r\n\r\n\t\tif (item === 'choiceband' && !clientPokemon?.volatiles['dynamax']) {\r\n\t\t\tstats.atk = Math.floor(stats.atk * 1.5);\r\n\t\t}\r\n\t\tif (ability === 'purepower' || ability === 'hugepower') {\r\n\t\t\tstats.atk *= 2;\r\n\t\t}\r\n\t\tif (ability === 'hustle' || (ability === 'gorillatactics' && !clientPokemon?.volatiles['dynamax'])) {\r\n\t\t\tstats.atk = Math.floor(stats.atk * 1.5);\r\n\t\t}\r\n\t\tif (weather) {\r\n\t\t\tif (this.battle.gen >= 4 && this.pokemonHasType(pokemon, 'Rock') && weather === 'sandstorm') {\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t}\r\n\t\t\tif (this.pokemonHasType(pokemon, 'Ice') && weather === 'snowscape') {\r\n\t\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'sandrush' && weather === 'sandstorm') {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (ability === 'slushrush' && (weather === 'hail' || weather === 'snowscape')) {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (item !== 'utilityumbrella') {\r\n\t\t\t\tif (weather === 'sunnyday' || weather === 'desolateland') {\r\n\t\t\t\t\tif (ability === 'chlorophyll') {\r\n\t\t\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ability === 'solarpower') {\r\n\t\t\t\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ability === 'orichalcumpulse') {\r\n\t\t\t\t\t\tstats.atk = Math.floor(stats.atk * 1.3333);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet allyActive = clientPokemon?.side.active;\r\n\t\t\t\t\tif (allyActive) {\r\n\t\t\t\t\t\tfor (const ally of allyActive) {\r\n\t\t\t\t\t\t\tif (!ally || ally.fainted) continue;\r\n\t\t\t\t\t\t\tlet allyAbility = this.getAllyAbility(ally);\r\n\t\t\t\t\t\t\tif (allyAbility === 'Flower Gift' && (ally.getSpecies().baseSpecies === 'Cherrim' || this.battle.gen <= 4)) {\r\n\t\t\t\t\t\t\t\tstats.atk = Math.floor(stats.atk * 1.5);\r\n\t\t\t\t\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (weather === 'raindance' || weather === 'primordialsea') {\r\n\t\t\t\t\tif (ability === 'swiftswim') {\r\n\t\t\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ability === 'defeatist' && serverPokemon.hp <= serverPokemon.maxhp / 2) {\r\n\t\t\tstats.atk = Math.floor(stats.atk * 0.5);\r\n\t\t\tstats.spa = Math.floor(stats.spa * 0.5);\r\n\t\t}\r\n\t\tif (clientPokemon) {\r\n\t\t\tif (clientPokemon.volatiles['slowstart']) {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 0.5);\r\n\t\t\t\tspeedModifiers.push(0.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'unburden' && clientPokemon.volatiles['itemremoved'] && !item) {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\t\tif (clientPokemon.volatiles['protosynthesis' + statName] || clientPokemon.volatiles['quarkdrive' + statName]) {\r\n\t\t\t\t\tif (statName === 'spe') {\r\n\t\t\t\t\t\tspeedModifiers.push(1.5);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstats[statName] = Math.floor(stats[statName] * 1.3);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (pokemon.status) {\r\n\t\t\tif (ability === 'marvelscale') {\r\n\t\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'quickfeet') {\r\n\t\t\t\tspeedModifiers.push(1.5);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (item === 'eviolite' && this.battle.dex.species.get(serverPokemon.speciesForme).nfe) {\r\n\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t}\r\n\t\tif (ability === 'grasspelt' && this.battle.hasPseudoWeather('Grassy Terrain')) {\r\n\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t}\r\n\t\tif (this.battle.hasPseudoWeather('Electric Terrain')) {\r\n\t\t\tif (ability === 'surgesurfer') {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (ability === 'hadronengine') {\r\n\t\t\t\tstats.spa = Math.floor(stats.spa * 1.3333);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (item === 'choicespecs' && !clientPokemon?.volatiles['dynamax']) {\r\n\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t}\r\n\t\tif (item === 'deepseatooth' && species === 'Clamperl') {\r\n\t\t\tstats.spa *= 2;\r\n\t\t}\r\n\t\tif (item === 'souldew' && this.battle.gen <= 6 && (species === 'Latios' || species === 'Latias')) {\r\n\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t}\r\n\t\tif (clientPokemon && (ability === 'plus' || ability === 'minus')) {\r\n\t\t\tlet allyActive = clientPokemon.side.active;\r\n\t\t\tif (allyActive.length > 1) {\r\n\t\t\t\tlet abilityName = (ability === 'plus' ? 'Plus' : 'Minus');\r\n\t\t\t\tfor (const ally of allyActive) {\r\n\t\t\t\t\tif (!ally || ally === clientPokemon || ally.fainted) continue;\r\n\t\t\t\t\tlet allyAbility = this.getAllyAbility(ally);\r\n\t\t\t\t\tif (allyAbility !== 'Plus' && allyAbility !== 'Minus') continue;\r\n\t\t\t\t\tif (this.battle.gen <= 4 && allyAbility === abilityName) continue;\r\n\t\t\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (item === 'assaultvest') {\r\n\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t}\r\n\t\tif (item === 'deepseascale' && species === 'Clamperl') {\r\n\t\t\tstats.spd *= 2;\r\n\t\t}\r\n\t\tif (item === 'choicescarf' && !clientPokemon?.volatiles['dynamax']) {\r\n\t\t\tspeedModifiers.push(1.5);\r\n\t\t}\r\n\t\tif (item === 'ironball' || speedHalvingEVItems.includes(item)) {\r\n\t\t\tspeedModifiers.push(0.5);\r\n\t\t}\r\n\t\tif (ability === 'furcoat') {\r\n\t\t\tstats.def *= 2;\r\n\t\t}\r\n\t\tif (this.battle.abilityActive('Vessel of Ruin')) {\r\n\t\t\tif (ability !== 'vesselofruin') {\r\n\t\t\t\tstats.spa = Math.floor(stats.spa * 0.75);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.battle.abilityActive('Sword of Ruin')) {\r\n\t\t\tif (ability !== 'swordofruin') {\r\n\t\t\t\tstats.def = Math.floor(stats.def * 0.75);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.battle.abilityActive('Tablets of Ruin')) {\r\n\t\t\tif (ability !== 'tabletsofruin') {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 0.75);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.battle.abilityActive('Beads of Ruin')) {\r\n\t\t\tif (ability !== 'beadsofruin') {\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 0.75);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// SSB\r\n\t\tif (this.battle.tier.includes('Super Staff Bros')) {\r\n\t\t\tif (pokemon.name === 'Felucia') {\r\n\t\t\t\tspeedModifiers.push(1.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'misspelled') {\r\n\t\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'fortifyingfrost' && weather === 'snowscape') {\r\n\t\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t}\r\n\t\t\tif (weather === 'deserteddunes' && this.pokemonHasType(pokemon, 'Rock')) {\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.25);\r\n\t\t\t}\r\n\t\t\tif (weather === 'stormsurge' && ability === 'swiftswim') {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (pokemon.status && ability === 'fortifiedmetal') {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 1.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'grassyemperor' && this.battle.hasPseudoWeather('Grassy Terrain')) {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 1.3333);\r\n\t\t\t}\r\n\t\t\tif (ability === 'magicalmysterycharge' && this.battle.hasPseudoWeather('Electric Terrain')) {\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t}\r\n\t\t\tif (ability === 'youkaiofthedusk' || ability === 'galeguard') {\r\n\t\t\t\tstats.def *= 2;\r\n\t\t\t}\r\n\t\t\tif (ability === 'climatechange') {\r\n\t\t\t\tif (weather === 'snowscape') {\r\n\t\t\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t\t}\r\n\t\t\t\tif (weather === 'sunnyday' || weather === 'desolateland') stats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t}\r\n\t\t\tif (item !== 'utilityumbrella' && ability === 'ridethesun' &&\r\n\t\t\t\t(weather === 'sunnyday' || weather === 'desolateland')) {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (ability === 'soulsurfer' && this.battle.hasPseudoWeather('Electric Terrain')) {\r\n\t\t\t\tspeedModifiers.push(2);\r\n\t\t\t}\r\n\t\t\tif (ability === 'orchardsgift' && this.battle.hasPseudoWeather('Grassy Terrain')) {\r\n\t\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t}\r\n\t\t\tif (item === 'eviolite' && this.battle.dex.species.get(serverPokemon.speciesForme).id === 'pichuspikyeared') {\r\n\t\t\t\tstats.def = Math.floor(stats.def * 1.5);\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.5);\r\n\t\t\t}\r\n\t\t\tif (this.battle.abilityActive('quagofruin')) {\r\n\t\t\t\tif (ability !== 'quagofruin') {\r\n\t\t\t\t\tstats.def = Math.floor(stats.def * 0.85);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.battle.abilityActive('clodofruin')) {\r\n\t\t\t\tif (ability !== 'clodofruin') {\r\n\t\t\t\t\tstats.atk = Math.floor(stats.atk * 0.85);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.battle.abilityActive('blitzofruin')) {\r\n\t\t\t\tif (ability !== 'blitzofruin') {\r\n\t\t\t\t\tspeedModifiers.push(0.75);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.battle.hasPseudoWeather('Anfield Atmosphere') && ability === 'youllneverwalkalone') {\r\n\t\t\t\tstats.atk = Math.floor(stats.atk * 1.25);\r\n\t\t\t\tstats.def = Math.floor(stats.def * 1.25);\r\n\t\t\t\tstats.spd = Math.floor(stats.spd * 1.25);\r\n\t\t\t\tspeedModifiers.push(1.25);\r\n\t\t\t}\r\n\t\t\tif (clientPokemon) {\r\n\t\t\t\tif (clientPokemon.volatiles['boiled']) {\r\n\t\t\t\t\tstats.spa = Math.floor(stats.spa * 1.5);\r\n\t\t\t\t}\r\n\t\t\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\t\t\tif (clientPokemon.volatiles['ultramystik']) {\r\n\t\t\t\t\t\tif (statName === 'spe') {\r\n\t\t\t\t\t\t\tspeedModifiers.push(1.3);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstats[statName] = Math.floor(stats[statName] * 1.3);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst sideConditions = this.battle.mySide.sideConditions;\r\n\t\tif (sideConditions['tailwind']) {\r\n\t\t\tspeedModifiers.push(2);\r\n\t\t}\r\n\t\tif (sideConditions['grasspledge']) {\r\n\t\t\tspeedModifiers.push(0.25);\r\n\t\t}\r\n\r\n\t\tlet chainedSpeedModifier = 1;\r\n\t\tfor (const modifier of speedModifiers) {\r\n\t\t\tchainedSpeedModifier *= modifier;\r\n\t\t}\r\n\t\t// Chained modifiers round down on 0.5\r\n\t\tstats.spe *= chainedSpeedModifier;\r\n\t\tstats.spe = stats.spe % 1 > 0.5 ? Math.ceil(stats.spe) : Math.floor(stats.spe);\r\n\r\n\t\tif (pokemon.status === 'par' && ability !== 'quickfeet') {\r\n\t\t\tif (this.battle.gen > 6) {\r\n\t\t\t\tstats.spe = Math.floor(stats.spe * 0.5);\r\n\t\t\t} else {\r\n\t\t\t\tstats.spe = Math.floor(stats.spe * 0.25);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn stats;\r\n\t}\r\n\r\n\trenderStats(clientPokemon: Pokemon | null, serverPokemon?: ServerPokemon | null, short?: boolean) {\r\n\t\tconst isTransformed = clientPokemon?.volatiles.transform;\r\n\t\tif (!serverPokemon || isTransformed) {\r\n\t\t\tif (!clientPokemon) throw new Error('Must pass either clientPokemon or serverPokemon');\r\n\t\t\tlet [min, max] = this.getSpeedRange(clientPokemon);\r\n\t\t\treturn `<p><small>Spe</small> ${min} to ${max} <small>(before items/abilities/modifiers)</small></p>`;\r\n\t\t}\r\n\t\tconst stats = serverPokemon.stats;\r\n\t\tconst modifiedStats = this.calculateModifiedStats(clientPokemon, serverPokemon);\r\n\r\n\t\tlet buf = '<p>';\r\n\r\n\t\tif (!short) {\r\n\t\t\tlet hasModifiedStat = false;\r\n\t\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\t\tif (this.battle.gen === 1 && statName === 'spd') continue;\r\n\t\t\t\tlet statLabel = this.battle.gen === 1 && statName === 'spa' ? 'spc' : statName;\r\n\t\t\t\tbuf += statName === 'atk' ? '<small>' : '<small> / ';\r\n\t\t\t\tbuf += `${BattleText[statLabel].statShortName}&nbsp;</small>`;\r\n\t\t\t\tbuf += `${stats[statName]}`;\r\n\t\t\t\tif (modifiedStats[statName] !== stats[statName]) hasModifiedStat = true;\r\n\t\t\t}\r\n\t\t\tbuf += '</p>';\r\n\r\n\t\t\tif (!hasModifiedStat) return buf;\r\n\r\n\t\t\tbuf += '<p><small>(After stat modifiers:)</small></p>';\r\n\t\t\tbuf += '<p>';\r\n\t\t}\r\n\r\n\t\tfor (const statName of Dex.statNamesExceptHP) {\r\n\t\t\tif (this.battle.gen === 1 && statName === 'spd') continue;\r\n\t\t\tlet statLabel = this.battle.gen === 1 && statName === 'spa' ? 'spc' : statName;\r\n\t\t\tbuf += statName === 'atk' ? '<small>' : '<small> / ';\r\n\t\t\tbuf += `${BattleText[statLabel].statShortName}&nbsp;</small>`;\r\n\t\t\tif (modifiedStats[statName] === stats[statName]) {\r\n\t\t\t\tbuf += `${modifiedStats[statName]}`;\r\n\t\t\t} else if (modifiedStats[statName] < stats[statName]) {\r\n\t\t\t\tbuf += `<strong class=\"stat-lowered\">${modifiedStats[statName]}</strong>`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += `<strong class=\"stat-boosted\">${modifiedStats[statName]}</strong>`;\r\n\t\t\t}\r\n\t\t}\r\n\t\tbuf += '</p>';\r\n\t\treturn buf;\r\n\t}\r\n\r\n\tgetPPUseText(moveTrackRow: [string, number], showKnown?: boolean) {\r\n\t\tlet [moveName, ppUsed] = moveTrackRow;\r\n\t\tlet move;\r\n\t\tlet maxpp;\r\n\t\tif (moveName.startsWith('*')) {\r\n\t\t\t// Transformed move\r\n\t\t\tmove = this.battle.dex.moves.get(moveName.substr(1));\r\n\t\t\tmaxpp = 5;\r\n\t\t} else {\r\n\t\t\tmove = this.battle.dex.moves.get(moveName);\r\n\t\t\tmaxpp = (move.pp === 1 || move.noPPBoosts ? move.pp : move.pp * 8 / 5);\r\n\t\t\tif (this.battle.gen < 3) maxpp = Math.min(61, maxpp);\r\n\t\t}\r\n\t\tconst bullet = moveName.startsWith('*') || move.isZ ? '<span style=\"color:#888\">&#8226;</span>' : '&#8226;';\r\n\t\tif (ppUsed === Infinity) {\r\n\t\t\treturn `${bullet} ${move.name} <small>(0/${maxpp})</small>`;\r\n\t\t}\r\n\t\tif (ppUsed || moveName.startsWith('*')) {\r\n\t\t\treturn `${bullet} ${move.name} <small>(${maxpp - ppUsed}/${maxpp})</small>`;\r\n\t\t}\r\n\t\treturn `${bullet} ${move.name} ${showKnown ? ' <small>(revealed)</small>' : ''}`;\r\n\t}\r\n\r\n\tppUsed(move: Dex.Move, pokemon: Pokemon) {\r\n\t\tfor (let [moveName, ppUsed] of pokemon.moveTrack) {\r\n\t\t\tif (moveName.startsWith('*')) moveName = moveName.substr(1);\r\n\t\t\tif (move.name === moveName) return ppUsed;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates possible Speed stat range of an opponent\r\n\t */\r\n\tgetSpeedRange(pokemon: Pokemon): [number, number] {\r\n\t\tconst tr = Math.trunc || Math.floor;\r\n\t\tconst species = pokemon.getSpecies();\r\n\t\tlet rules = this.battle.rules;\r\n\t\tlet baseSpe = species.baseStats.spe;\r\n\t\tif (rules['Scalemons Mod']) {\r\n\t\t\tconst bstWithoutHp = species.bst - species.baseStats.hp;\r\n\t\t\tconst scale = 600 - species.baseStats.hp;\r\n\t\t\tbaseSpe = tr(baseSpe * scale / bstWithoutHp);\r\n\t\t\tif (baseSpe < 1) baseSpe = 1;\r\n\t\t\tif (baseSpe > 255) baseSpe = 255;\r\n\t\t}\r\n\t\tif (rules['Frantic Fusions Mod']) {\r\n\t\t\tconst fusionSpecies = this.battle.dex.species.get(pokemon.name);\r\n\t\t\tif (fusionSpecies.exists && fusionSpecies.name !== species.name) {\r\n\t\t\t\tbaseSpe += tr(fusionSpecies.baseStats.spe / 4);\r\n\t\t\t\tif (baseSpe < 1) baseSpe = 1;\r\n\t\t\t\tif (baseSpe > 255) baseSpe = 255;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (rules['Flipped Mod']) {\r\n\t\t\tbaseSpe = species.baseStats.hp;\r\n\t\t\tif (baseSpe < 1) baseSpe = 1;\r\n\t\t\tif (baseSpe > 255) baseSpe = 255;\r\n\t\t}\r\n\t\tif (rules['350 Cup Mod'] && species.bst <= 350) {\r\n\t\t\tbaseSpe *= 2;\r\n\t\t\tif (baseSpe < 1) baseSpe = 1;\r\n\t\t\tif (baseSpe > 255) baseSpe = 255;\r\n\t\t}\r\n\t\tlet level = pokemon.volatiles.transform?.[4] || pokemon.level;\r\n\t\tlet tier = this.battle.tier;\r\n\t\tlet gen = this.battle.gen;\r\n\t\tlet isCGT = tier.includes('Computer-Generated Teams');\r\n\t\tlet isRandomBattle = tier.includes('Random Battle') ||\r\n\t\t\t(tier.includes('Random') && tier.includes('Battle') && gen >= 6) || isCGT;\r\n\r\n\t\tlet minNature = (isRandomBattle || gen < 3) ? 1 : 0.9;\r\n\t\tlet maxNature = (isRandomBattle || gen < 3) ? 1 : 1.1;\r\n\t\tlet maxIv = (gen < 3) ? 30 : 31;\r\n\r\n\t\tlet min;\r\n\t\tlet max;\r\n\t\tif (tier.includes(\"Let's Go\")) {\r\n\t\t\tmin = tr(tr(tr(2 * baseSpe * level / 100 + 5) * minNature) * tr((70 / 255 / 10 + 1) * 100) / 100);\r\n\t\t\tmax = tr(tr(tr((2 * baseSpe + maxIv) * level / 100 + 5) * maxNature) * tr((70 / 255 / 10 + 1) * 100) / 100);\r\n\t\t\tif (tier.includes('No Restrictions')) max += 200;\r\n\t\t\telse if (tier.includes('Random')) max += 20;\r\n\t\t} else {\r\n\t\t\tlet maxIvEvOffset = maxIv + ((isRandomBattle && gen >= 3) ? 21 : 63);\r\n\t\t\tmax = tr(tr((2 * baseSpe + maxIvEvOffset) * level / 100 + 5) * maxNature);\r\n\t\t\tmin = isCGT ? max : tr(tr(2 * baseSpe * level / 100 + 5) * minNature);\r\n\t\t}\r\n\t\treturn [min, max];\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the proper current type for moves with a variable type.\r\n\t */\r\n\tgetMoveType(\r\n\t\tmove: Dex.Move, value: ModifiableValue, forMaxMove?: boolean | Dex.Move\r\n\t): [Dex.TypeName, 'Physical' | 'Special' | 'Status'] {\r\n\t\tconst pokemon = value.pokemon;\r\n\t\tconst serverPokemon = value.serverPokemon;\r\n\r\n\t\tlet moveType = move.type;\r\n\t\tlet category = move.category;\r\n\t\tif (category === 'Status' && forMaxMove) return ['Normal', 'Status']; // Max Guard\r\n\t\t// can happen in obscure situations\r\n\t\tif (!pokemon) return [moveType, category];\r\n\r\n\t\tlet pokemonTypes = pokemon.getTypeList(serverPokemon);\r\n\t\tvalue.reset();\r\n\t\tif (move.id === 'revelationdance') {\r\n\t\t\tmoveType = pokemonTypes[0];\r\n\t\t}\r\n\t\t// Moves that require an item to change their type.\r\n\t\tlet item = this.battle.dex.items.get(value.itemName);\r\n\t\tif (move.id === 'multiattack' && item.onMemory) {\r\n\t\t\tif (value.itemModify(0)) moveType = item.onMemory;\r\n\t\t}\r\n\t\tif (move.id === 'judgment' && item.onPlate && !item.zMoveType) {\r\n\t\t\tif (value.itemModify(0)) moveType = item.onPlate;\r\n\t\t}\r\n\t\tif (move.id === 'technoblast' && item.onDrive) {\r\n\t\t\tif (value.itemModify(0)) moveType = item.onDrive;\r\n\t\t}\r\n\t\tif (move.id === 'naturalgift' && item.naturalGift) {\r\n\t\t\tif (value.itemModify(0)) moveType = item.naturalGift.type;\r\n\t\t}\r\n\t\t// Weather and pseudo-weather type changes.\r\n\t\tif (move.id === 'weatherball' && value.weatherModify(0)) {\r\n\t\t\tswitch (this.battle.weather) {\r\n\t\t\tcase 'sunnyday':\r\n\t\t\tcase 'desolateland':\r\n\t\t\t\tif (item.id === 'utilityumbrella') break;\r\n\t\t\t\tmoveType = 'Fire';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'raindance':\r\n\t\t\tcase 'primordialsea':\r\n\t\t\t\tif (item.id === 'utilityumbrella') break;\r\n\t\t\t\tmoveType = 'Water';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sandstorm':\r\n\t\t\t\tmoveType = 'Rock';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hail':\r\n\t\t\tcase 'snowscape':\r\n\t\t\t\tmoveType = 'Ice';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.id === 'terrainpulse' && pokemon.isGrounded(serverPokemon)) {\r\n\t\t\tif (this.battle.hasPseudoWeather('Electric Terrain')) {\r\n\t\t\t\tmoveType = 'Electric';\r\n\t\t\t} else if (this.battle.hasPseudoWeather('Grassy Terrain')) {\r\n\t\t\t\tmoveType = 'Grass';\r\n\t\t\t} else if (this.battle.hasPseudoWeather('Misty Terrain')) {\r\n\t\t\t\tmoveType = 'Fairy';\r\n\t\t\t} else if (this.battle.hasPseudoWeather('Psychic Terrain')) {\r\n\t\t\t\tmoveType = 'Psychic';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.id === 'terablast' && pokemon.terastallized) {\r\n\t\t\tmoveType = pokemon.terastallized as Dex.TypeName;\r\n\t\t}\r\n\t\tif (move.id === 'terastarstorm' && pokemon.getSpeciesForme() === 'Terapagos-Stellar') {\r\n\t\t\tmoveType = 'Stellar';\r\n\t\t}\r\n\r\n\t\t// Aura Wheel as Morpeko-Hangry changes the type to Dark\r\n\t\tif (move.id === 'aurawheel' && pokemon.getSpeciesForme() === 'Morpeko-Hangry') {\r\n\t\t\tmoveType = 'Dark';\r\n\t\t}\r\n\t\t// Raging Bull's type depends on the Tauros forme\r\n\t\tif (move.id === 'ragingbull') {\r\n\t\t\tswitch (pokemon.getSpeciesForme()) {\r\n\t\t\tcase 'Tauros-Paldea-Combat':\r\n\t\t\t\tmoveType = 'Fighting';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Tauros-Paldea-Blaze':\r\n\t\t\t\tmoveType = 'Fire';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Tauros-Paldea-Aqua':\r\n\t\t\t\tmoveType = 'Water';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Ivy Cudgel's type depends on the Ogerpon forme\r\n\t\tif (move.id === 'ivycudgel') {\r\n\t\t\tswitch (pokemon.getSpeciesForme()) {\r\n\t\t\tcase 'Ogerpon-Wellspring': case 'Ogerpon-Wellspring-Tera':\r\n\t\t\t\tmoveType = 'Water';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Ogerpon-Hearthflame': case 'Ogerpon-Hearthflame-Tera':\r\n\t\t\t\tmoveType = 'Fire';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Ogerpon-Cornerstone': case 'Ogerpon-Cornerstone-Tera':\r\n\t\t\t\tmoveType = 'Rock';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Other abilities that change the move type.\r\n\t\tconst noTypeOverride = [\r\n\t\t\t'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'struggle', 'technoblast', 'terrainpulse', 'weatherball',\r\n\t\t];\r\n\t\tconst allowTypeOverride = !noTypeOverride.includes(move.id) && (move.id !== 'terablast' || !pokemon.terastallized);\r\n\t\tif (allowTypeOverride) {\r\n\t\t\tif (this.battle.rules['Revelationmons Mod']) {\r\n\t\t\t\tconst [types] = pokemon.getTypes(serverPokemon);\r\n\t\t\t\tfor (let i = 0; i < types.length; i++) {\r\n\t\t\t\t\tif (serverPokemon.moves[i] && move.id === toID(serverPokemon.moves[i])) {\r\n\t\t\t\t\t\tmoveType = types[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (category !== 'Status' && !move.isZ && !move.id.startsWith('hiddenpower')) {\r\n\t\t\t\tif (moveType === 'Normal') {\r\n\t\t\t\t\tif (value.abilityModify(0, 'Aerilate')) moveType = 'Flying';\r\n\t\t\t\t\tif (value.abilityModify(0, 'Galvanize')) moveType = 'Electric';\r\n\t\t\t\t\tif (value.abilityModify(0, 'Pixilate')) moveType = 'Fairy';\r\n\t\t\t\t\tif (value.abilityModify(0, 'Refrigerate')) moveType = 'Ice';\r\n\t\t\t\t}\r\n\t\t\t\tif (value.abilityModify(0, 'Normalize')) moveType = 'Normal';\r\n\t\t\t}\r\n\r\n\t\t\t// There aren't any max moves with the sound flag, but if there were, Liquid Voice would make them water type\r\n\t\t\tconst isSound = !!(\r\n\t\t\t\tforMaxMove ?\r\n\t\t\t\t\tthis.getMaxMoveFromType(moveType, forMaxMove !== true && forMaxMove || undefined) : move\r\n\t\t\t).flags['sound'];\r\n\t\t\tif (isSound && value.abilityModify(0, 'Liquid Voice')) {\r\n\t\t\t\tmoveType = 'Water';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (move.id === 'photongeyser' || move.id === 'lightthatburnsthesky' ||\r\n\t\t\t(move.id === 'terablast' && pokemon.terastallized) ||\r\n\t\t\t(move.id === 'terastarstorm' && pokemon.getSpeciesForme() === 'Terapagos-Stellar')) {\r\n\t\t\tconst stats = this.calculateModifiedStats(pokemon, serverPokemon, true);\r\n\t\t\tif (stats.atk > stats.spa) category = 'Physical';\r\n\t\t}\r\n\r\n\t\t// SSB\r\n\t\tif (this.battle.tier.includes('Super Staff Bros')) {\r\n\t\t\tif (allowTypeOverride && category !== \"Status\" && !move.isZ && !move.id.startsWith('hiddenpower')) {\r\n\t\t\t\tif (value.abilityModify(0, 'Acetosa')) moveType = 'Grass';\r\n\t\t\t\tif (value.abilityModify(0, 'I Can Hear The Heart Beating As One') && moveType === 'Normal') moveType = 'Fairy';\r\n\t\t\t}\r\n\t\t\tif (move.id === 'tsignore' || move.id === 'o') {\r\n\t\t\t\tconst stats = this.calculateModifiedStats(pokemon, serverPokemon, true);\r\n\t\t\t\tif (stats.atk > stats.spa) category = 'Physical';\r\n\t\t\t}\r\n\t\t\tif (move.id === 'tsignore' && pokemon.getSpeciesForme().startsWith('Meloetta') &&\r\n\t\t\t\tpokemon.terastallized) {\r\n\t\t\t\tmoveType = 'Stellar';\r\n\t\t\t}\r\n\t\t\tif (move.id === 'weatherball' && value.weatherModify(0)) {\r\n\t\t\t\tif (this.battle.weather === 'stormsurge' && item.id !== 'utilityumbrella') moveType = 'Water';\r\n\t\t\t\tif (this.battle.weather === 'deserteddunes') moveType = 'Rock';\r\n\t\t\t}\r\n\t\t\tif (move.id === 'o' || move.id === 'worriednoises') {\r\n\t\t\t\tmoveType = pokemonTypes[0];\r\n\t\t\t}\r\n\t\t\tif (move.id === 'dillydally') {\r\n\t\t\t\tmoveType = pokemonTypes[pokemonTypes.length - 1];\r\n\t\t\t}\r\n\t\t\tif (move.id === 'magicalfocus') {\r\n\t\t\t\tif (this.battle.turn % 3 === 1) {\r\n\t\t\t\t\tmoveType = 'Fire';\r\n\t\t\t\t} else if (this.battle.turn % 3 === 2) {\r\n\t\t\t\t\tmoveType = 'Electric';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoveType = 'Ice';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (move.id === 'hydrostatics' && pokemon.terastallized) {\r\n\t\t\t\tmoveType = 'Water';\r\n\t\t\t}\r\n\t\t\tif (move.id === 'asongoficeandfire' && pokemon.getSpeciesForme() === 'Volcarona') moveType = 'Ice';\r\n\t\t\tif (this.battle.abilityActive('dynamictyping')) {\r\n\t\t\t\tmoveType = '???';\r\n\t\t\t}\r\n\t\t\tif (move.id === 'alting') {\r\n\t\t\t\tmoveType = '???';\r\n\t\t\t\tif (pokemon.shiny) {\r\n\t\t\t\t\tcategory = 'Special';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [moveType, category];\r\n\t}\r\n\r\n\t// Gets the current accuracy for a move.\r\n\tgetMoveAccuracy(move: Dex.Move, value: ModifiableValue, target?: Pokemon) {\r\n\t\tvalue.reset(move.accuracy === true ? 0 : move.accuracy, true);\r\n\r\n\t\tlet pokemon = value.pokemon;\r\n\t\t// Sure-hit accuracy\r\n\t\tif (move.id === 'toxic' && this.battle.gen >= 6 && this.pokemonHasType(pokemon, 'Poison')) {\r\n\t\t\tvalue.set(0, \"Poison type\");\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tif (move.id === 'blizzard' && this.battle.gen >= 4) {\r\n\t\t\tvalue.weatherModify(0, 'Hail');\r\n\t\t\tvalue.weatherModify(0, 'Snowscape');\r\n\t\t}\r\n\t\tif (['hurricane', 'thunder', 'bleakwindstorm', 'wildboltstorm', 'sandsearstorm'].includes(move.id)) {\r\n\t\t\tvalue.weatherModify(0, 'Rain Dance');\r\n\t\t\tvalue.weatherModify(0, 'Primordial Sea');\r\n\t\t}\r\n\t\tvalue.abilityModify(0, 'No Guard');\r\n\t\tif (!value.value) return value;\r\n\r\n\t\t// OHKO moves don't use standard accuracy / evasion modifiers\r\n\t\tif (move.ohko) {\r\n\t\t\tif (this.battle.gen === 1) {\r\n\t\t\t\tvalue.set(value.value, `fails if target's Speed is higher`);\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t\tif (move.id === 'sheercold' && this.battle.gen >= 7 && !this.pokemonHasType(pokemon, 'Ice')) {\r\n\t\t\t\tvalue.set(20, 'not Ice-type');\r\n\t\t\t}\r\n\t\t\tif (target) {\r\n\t\t\t\tif (pokemon.level < target.level) {\r\n\t\t\t\t\tvalue.reset(0);\r\n\t\t\t\t\tvalue.set(0, \"FAILS: target's level is higher\");\r\n\t\t\t\t} else if (pokemon.level > target.level) {\r\n\t\t\t\t\tvalue.set(value.value + pokemon.level - target.level, \"+1% per level above target\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (pokemon.level < 100) value.set(value.value, \"fails if target's level is higher\");\r\n\t\t\t\tif (pokemon.level > 1) value.set(value.value, \"+1% per level above target\");\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Accuracy modifiers start\r\n\r\n\t\tlet accuracyModifiers = [];\r\n\t\tif (this.battle.hasPseudoWeather('Gravity')) {\r\n\t\t\taccuracyModifiers.push(6840);\r\n\t\t\tvalue.modify(5 / 3, \"Gravity\");\r\n\t\t}\r\n\r\n\t\tfor (const active of pokemon.side.active) {\r\n\t\t\tif (!active || active.fainted) continue;\r\n\t\t\tconst ability = this.getAllyAbility(active);\r\n\t\t\tif (ability === 'Victory Star') {\r\n\t\t\t\taccuracyModifiers.push(4506);\r\n\t\t\t\tvalue.modify(1.1, \"Victory Star\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value.tryAbility('Hustle') && move.category === 'Physical') {\r\n\t\t\taccuracyModifiers.push(3277);\r\n\t\t\tvalue.abilityModify(0.8, \"Hustle\");\r\n\t\t} else if (value.tryAbility('Compound Eyes')) {\r\n\t\t\taccuracyModifiers.push(5325);\r\n\t\t\tvalue.abilityModify(1.3, \"Compound Eyes\");\r\n\t\t}\r\n\r\n\t\tif (value.tryItem('Wide Lens')) {\r\n\t\t\taccuracyModifiers.push(4505);\r\n\t\t\tvalue.itemModify(1.1, \"Wide Lens\");\r\n\t\t}\r\n\r\n\t\t// SSB\r\n\t\tif (this.battle.tier.includes('Super Staff Bros')) {\r\n\t\t\tif (move.id === 'alting' && pokemon.shiny) {\r\n\t\t\t\tvalue.set(100);\r\n\t\t\t}\r\n\t\t\tif (move.flags['wind'] && this.battle.weather === 'stormsurge') {\r\n\t\t\t\tvalue.weatherModify(0, 'Storm Surge');\r\n\t\t\t}\r\n\t\t\tif (value.tryAbility('Misspelled') && move.category === 'Special') {\r\n\t\t\t\taccuracyModifiers.push(3277);\r\n\t\t\t\tvalue.abilityModify(0.8, \"Misspelled\");\r\n\t\t\t}\r\n\t\t\tif (value.tryAbility('Hydrostatic Positivity') && ['Electric', 'Water'].includes(move.type)) {\r\n\t\t\t\taccuracyModifiers.push(5325);\r\n\t\t\t\tvalue.abilityModify(1.3, \"Hydrostatic Positivity\");\r\n\t\t\t}\r\n\t\t\tif (value.tryAbility('Hardcore Hustle')) {\r\n\t\t\t\tfor (let i = 1; i <= 5 && i <= pokemon.side.faintCounter; i++) {\r\n\t\t\t\t\tif (pokemon.volatiles[`fallen${i}`]) {\r\n\t\t\t\t\t\tvalue.abilityModify([1, 0.95, 0.90, 0.85, 0.80, 0.75][i], \"Hardcore Hustle\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (value.tryAbility('See No Evil, Hear No Evil, Speak No Evil') &&\r\n\t\t\t\tpokemon.getSpeciesForme().includes('Wellspring')) {\r\n\t\t\t\tvalue.abilityModify(0, 'See No Evil, Hear No Evil, Speak No Evil');\r\n\t\t\t}\r\n\t\t\tvalue.abilityModify(0, 'Sure Hit Sorcery');\r\n\t\t\tvalue.abilityModify(0, 'Eyes of Eternity');\r\n\t\t\tif (!value.value) return value;\r\n\t\t}\r\n\r\n\t\t// Chaining modifiers\r\n\t\tlet chain = 4096;\r\n\t\tfor (const mod of accuracyModifiers) {\r\n\t\t\tif (mod !== 4096) {\r\n\t\t\t\tchain = (chain * mod + 2048) >> 12;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Applying modifiers\r\n\t\tvalue.set(move.accuracy as number);\r\n\r\n\t\tif (move.id === 'hurricane' || move.id === 'thunder') {\r\n\t\t\tif (value.tryWeather('Sunny Day')) value.set(50, 'Sunny Day');\r\n\t\t\tif (value.tryWeather('Desolate Land')) value.set(50, 'Desolate Land');\r\n\t\t}\r\n\r\n\t\t// Chained modifiers round down on 0.5\r\n\t\tlet accuracyAfterChain = (value.value * chain) / 4096;\r\n\t\taccuracyAfterChain = accuracyAfterChain % 1 > 0.5 ? Math.ceil(accuracyAfterChain) : Math.floor(accuracyAfterChain);\r\n\t\tvalue.set(accuracyAfterChain);\r\n\r\n\t\t// Unlike for Atk, Def, etc. accuracy and evasion boosts are applied after modifiers\r\n\t\tif (pokemon?.boosts.accuracy) {\r\n\t\t\tif (pokemon.boosts.accuracy > 0) {\r\n\t\t\t\tvalue.set(Math.floor(value.value * (pokemon.boosts.accuracy + 3) / 3));\r\n\t\t\t} else {\r\n\t\t\t\tvalue.set(Math.floor(value.value * 3 / (3 - pokemon.boosts.accuracy)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 1/256 glitch\r\n\t\tif (this.battle.gen === 1 && !toID(this.battle.tier).includes('stadium')) {\r\n\t\t\tvalue.set((Math.floor(value.value * 255 / 100) / 256) * 100);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Gets the proper current base power for moves which have a variable base power.\r\n\t// Takes into account the target for some moves.\r\n\t// If it is unsure of the actual base power, it gives an estimate.\r\n\tgetMoveBasePower(move: Dex.Move, moveType: Dex.TypeName, value: ModifiableValue, target: Pokemon | null = null) {\r\n\t\tconst pokemon = value.pokemon;\r\n\t\tconst serverPokemon = value.serverPokemon;\r\n\r\n\t\t// apply modifiers for moves that depend on the actual stats\r\n\t\tconst modifiedStats = this.calculateModifiedStats(pokemon, serverPokemon);\r\n\r\n\t\tvalue.reset(move.basePower);\r\n\r\n\t\tif (move.id === 'acrobatics') {\r\n\t\t\tif (!serverPokemon.item) {\r\n\t\t\t\tvalue.modify(2, \"Acrobatics + no item\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet variableBPCap = ['crushgrip', 'wringout'].includes(move.id) ? 120 : move.id === 'hardpress' ? 100 : undefined;\r\n\t\tif (variableBPCap && target) {\r\n\t\t\tvalue.set(\r\n\t\t\t\tMath.floor(\r\n\t\t\t\t\tMath.floor((variableBPCap * (100 * Math.floor(target.hp * 4096 / target.maxhp)) + 2048 - 1) / 4096) / 100\r\n\t\t\t\t) || 1,\r\n\t\t\t\t'approximate'\r\n\t\t\t);\r\n\t\t}\r\n\t\tif (move.id === 'terablast' && pokemon.terastallized === 'Stellar') {\r\n\t\t\tvalue.set(100, 'Tera Stellar boost');\r\n\t\t}\r\n\t\tif (move.id === 'brine' && target && target.hp * 2 <= target.maxhp) {\r\n\t\t\tvalue.modify(2, 'Brine + target below half HP');\r\n\t\t}\r\n\t\tif (move.id === 'eruption' || move.id === 'waterspout' || move.id === 'dragonenergy') {\r\n\t\t\tvalue.set(Math.floor(150 * pokemon.hp / pokemon.maxhp) || 1);\r\n\t\t}\r\n\t\tif (move.id === 'facade' && !['', 'slp', 'frz'].includes(pokemon.status)) {\r\n\t\t\tvalue.modify(2, 'Facade + status');\r\n\t\t}\r\n\t\tif (move.id === 'flail' || move.id === 'reversal') {\r\n\t\t\tlet multiplier;\r\n\t\t\tlet ratios;\r\n\t\t\tif (this.battle.gen > 4) {\r\n\t\t\t\tmultiplier = 48;\r\n\t\t\t\tratios = [2, 5, 10, 17, 33];\r\n\t\t\t} else {\r\n\t\t\t\tmultiplier = 64;\r\n\t\t\t\tratios = [2, 6, 13, 22, 43];\r\n\t\t\t}\r\n\t\t\tlet ratio = pokemon.hp * multiplier / pokemon.maxhp;\r\n\t\t\tlet basePower;\r\n\t\t\tif (ratio < ratios[0]) basePower = 200;\r\n\t\t\telse if (ratio < ratios[1]) basePower = 150;\r\n\t\t\telse if (ratio < ratios[2]) basePower = 100;\r\n\t\t\telse if (ratio < ratios[3]) basePower = 80;\r\n\t\t\telse if (ratio < ratios[4]) basePower = 40;\r\n\t\t\telse basePower = 20;\r\n\t\t\tvalue.set(basePower);\r\n\t\t}\r\n\t\tif (['hex', 'infernalparade'].includes(move.id) && target?.status) {\r\n\t\t\tvalue.modify(2, move.name + ' + status');\r\n\t\t}\r\n\t\tif (move.id === 'lastrespects') {\r\n\t\t\tvalue.set(Math.min(50 + 50 * pokemon.side.faintCounter));\r\n\t\t}\r\n\t\tif (move.id === 'punishment' && target) {\r\n\t\t\tlet boostCount = 0;\r\n\t\t\tfor (const boost of Object.values(target.boosts)) {\r\n\t\t\t\tif (boost > 0) boostCount += boost;\r\n\t\t\t}\r\n\t\t\tvalue.set(Math.min(60 + 20 * boostCount, 200));\r\n\t\t}\r\n\t\tif (move.id === 'smellingsalts' && target) {\r\n\t\t\tif (target.status === 'par') {\r\n\t\t\t\tvalue.modify(2, 'Smelling Salts + Paralysis');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (['storedpower', 'powertrip'].includes(move.id) && target) {\r\n\t\t\tlet boostCount = 0;\r\n\t\t\tfor (const boost of Object.values(pokemon.boosts)) {\r\n\t\t\t\tif (boost > 0) boostCount += boost;\r\n\t\t\t}\r\n\t\t\tvalue.set(20 + 20 * boostCount);\r\n\t\t}\r\n\t\tif (move.id === 'trumpcard') {\r\n\t\t\tconst ppLeft = 5 - this.ppUsed(move, pokemon);\r\n\t\t\tlet basePower = 40;\r\n\t\t\tif (ppLeft === 1) basePower = 200;\r\n\t\t\telse if (ppLeft === 2) basePower = 80;\r\n\t\t\telse if (ppLeft === 3) basePower = 60;\r\n\t\t\telse if (ppLeft === 4) basePower = 50;\r\n\t\t\tvalue.set(basePower);\r\n\t\t}\r\n\t\tif (move.id === 'magnitude') {\r\n\t\t\tvalue.setRange(10, 150);\r\n\t\t}\r\n\t\tif (['venoshock', 'barbbarrage'].includes(move.id) && target) {\r\n\t\t\tif (['psn', 'tox'].includes(target.status)) {\r\n\t\t\t\tvalue.modify(2, move.name + ' + Poison');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.id === 'wakeupslap' && target) {\r\n\t\t\tif (target.status === 'slp') {\r\n\t\t\t\tvalue.modify(2, 'Wake-Up Slap + Sleep');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.id === 'weatherball') {\r\n\t\t\tif (this.battle.weather !== 'deltastream') {\r\n\t\t\t\tvalue.weatherModify(2);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.id === 'hydrosteam') {\r\n\t\t\tvalue.weatherModify(1.5, 'Sunny Day');\r\n\t\t}\r\n\t\tif (move.id === 'psyblade' && this.battle.hasPseudoWeather('Electric Terrain')) {\r\n\t\t\tvalue.modify(1.5, 'Electric Terrain');\r\n\t\t}\r\n\t\tif (move.id === 'terrainpulse' && pokemon.isGrounded(serverPokemon)) {\r\n\t\t\tif (\r\n\t\t\t\tthis.battle.hasPseudoWeather('Electric Terrain') ||\r\n\t\t\t\tthis.battle.hasPseudoWeather('Grassy Terrain') ||\r\n\t\t\t\tthis.battle.hasPseudoWeather('Misty Terrain') ||\r\n\t\t\t\tthis.battle.hasPseudoWeather('Psychic Terrain')\r\n\t\t\t) {\r\n\t\t\t\tvalue.modify(2, 'Terrain Pulse boost');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\r\n\t\t\tmove.id === 'watershuriken' && pokemon.getSpeciesForme() === 'Greninja-Ash' && pokemon.ability === 'Battle Bond'\r\n\t\t) {\r\n\t\t\tvalue.set(20, 'Battle Bond');\r\n\t\t}\r\n\t\t// Moves that check opponent speed\r\n\t\tif (move.id === 'electroball' && target) {\r\n\t\t\tlet [minSpe, maxSpe] = this.getSpeedRange(target);\r\n\t\t\tlet minRatio = (modifiedStats.spe / maxSpe);\r\n\t\t\tlet maxRatio = (modifiedStats.spe / minSpe);\r\n\t\t\tlet min;\r\n\t\t\tlet max;\r\n\r\n\t\t\tif (minRatio >= 4) min = 150;\r\n\t\t\telse if (minRatio >= 3) min = 120;\r\n\t\t\telse if (minRatio >= 2) min = 80;\r\n\t\t\telse if (minRatio >= 1) min = 60;\r\n\t\t\telse min = 40;\r\n\r\n\t\t\tif (maxRatio >= 4) max = 150;\r\n\t\t\telse if (maxRatio >= 3) max = 120;\r\n\t\t\telse if (maxRatio >= 2) max = 80;\r\n\t\t\telse if (maxRatio >= 1) max = 60;\r\n\t\t\telse max = 40;\r\n\r\n\t\t\tvalue.setRange(min, max);\r\n\t\t}\r\n\t\tif (move.id === 'gyroball' && target) {\r\n\t\t\tlet [minSpe, maxSpe] = this.getSpeedRange(target);\r\n\t\t\tlet min = (Math.floor(25 * minSpe / modifiedStats.spe) || 1);\r\n\t\t\tif (min > 150) min = 150;\r\n\t\t\tlet max = (Math.floor(25 * maxSpe / modifiedStats.spe) || 1);\r\n\t\t\tif (max > 150) max = 150;\r\n\t\t\tvalue.setRange(min, max);\r\n\t\t}\r\n\t\t// Moves which have base power changed due to items\r\n\t\tif (serverPokemon.item) {\r\n\t\t\tlet item = this.battle.dex.items.get(serverPokemon.item);\r\n\t\t\tif (move.id === 'fling' && item.fling) {\r\n\t\t\t\tvalue.itemModify(item.fling.basePower);\r\n\t\t\t}\r\n\t\t\tif (move.id === 'naturalgift') {\r\n\t\t\t\tvalue.itemModify(item.naturalGift.basePower);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Moves which have base power changed according to weight\r\n\t\tif (['lowkick', 'grassknot', 'heavyslam', 'heatcrash'].includes(move.id) && this.battle.gen > 2) {\r\n\t\t\tlet isGKLK = ['lowkick', 'grassknot'].includes(move.id);\r\n\t\t\tif (target) {\r\n\t\t\t\tlet targetWeight = target.getWeightKg();\r\n\t\t\t\tlet pokemonWeight = pokemon.getWeightKg(serverPokemon);\r\n\t\t\t\tlet basePower;\r\n\t\t\t\tif (isGKLK) {\r\n\t\t\t\t\tbasePower = 20;\r\n\t\t\t\t\tif (targetWeight >= 200) basePower = 120;\r\n\t\t\t\t\telse if (targetWeight >= 100) basePower = 100;\r\n\t\t\t\t\telse if (targetWeight >= 50) basePower = 80;\r\n\t\t\t\t\telse if (targetWeight >= 25) basePower = 60;\r\n\t\t\t\t\telse if (targetWeight >= 10) basePower = 40;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbasePower = 40;\r\n\t\t\t\t\tif (pokemonWeight >= targetWeight * 5) basePower = 120;\r\n\t\t\t\t\telse if (pokemonWeight >= targetWeight * 4) basePower = 100;\r\n\t\t\t\t\telse if (pokemonWeight >= targetWeight * 3) basePower = 80;\r\n\t\t\t\t\telse if (pokemonWeight >= targetWeight * 2) basePower = 60;\r\n\t\t\t\t}\r\n\t\t\t\tif (target.volatiles['dynamax']) {\r\n\t\t\t\t\tvalue.set(0, 'blocked by target\\'s Dynamax');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue.set(basePower);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvalue.setRange(isGKLK ? 20 : 40, 120);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Base power based on times hit\r\n\t\tif (move.id === 'ragefist') {\r\n\t\t\tvalue.set(Math.min(350, 50 + 50 * pokemon.timesAttacked),\r\n\t\t\t\tpokemon.timesAttacked > 0 ?\r\n\t\t\t\t\t`Hit ${pokemon.timesAttacked} time${pokemon.timesAttacked > 1 ? 's' : ''}` :\r\n\t\t\t\t\tundefined);\r\n\t\t}\r\n\t\tif (!value.value) return value;\r\n\r\n\t\t// Other ability boosts\r\n\t\tif (pokemon.status === 'brn' && move.category === 'Special') {\r\n\t\t\tvalue.abilityModify(1.5, \"Flare Boost\");\r\n\t\t}\r\n\t\tif (move.flags['punch']) {\r\n\t\t\tvalue.abilityModify(1.2, 'Iron Fist');\r\n\t\t}\r\n\t\tif (move.flags['pulse']) {\r\n\t\t\tvalue.abilityModify(1.5, \"Mega Launcher\");\r\n\t\t}\r\n\t\tif (move.flags['bite']) {\r\n\t\t\tvalue.abilityModify(1.5, \"Strong Jaw\");\r\n\t\t}\r\n\t\tif (value.value <= 60) {\r\n\t\t\tvalue.abilityModify(1.5, \"Technician\");\r\n\t\t}\r\n\t\tif (['psn', 'tox'].includes(pokemon.status) && move.category === 'Physical') {\r\n\t\t\tvalue.abilityModify(1.5, \"Toxic Boost\");\r\n\t\t}\r\n\t\tif (['Rock', 'Ground', 'Steel'].includes(moveType) && this.battle.weather === 'sandstorm') {\r\n\t\t\tif (value.tryAbility(\"Sand Force\")) value.weatherModify(1.3, \"Sandstorm\", \"Sand Force\");\r\n\t\t}\r\n\t\tif (move.secondaries) {\r\n\t\t\tvalue.abilityModify(1.3, \"Sheer Force\");\r\n\t\t}\r\n\t\tif (move.flags['contact']) {\r\n\t\t\tvalue.abilityModify(1.3, \"Tough Claws\");\r\n\t\t}\r\n\t\tif (move.flags['sound']) {\r\n\t\t\tvalue.abilityModify(1.3, \"Punk Rock\");\r\n\t\t}\r\n\t\tif (move.flags['slicing']) {\r\n\t\t\tvalue.abilityModify(1.5, \"Sharpness\");\r\n\t\t}\r\n\t\tfor (let i = 1; i <= 5 && i <= pokemon.side.faintCounter; i++) {\r\n\t\t\tif (pokemon.volatiles[`fallen${i}`]) {\r\n\t\t\t\tvalue.abilityModify(1 + 0.1 * i, \"Supreme Overlord\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (target) {\r\n\t\t\tif ([\"MF\", \"FM\"].includes(pokemon.gender + target.gender)) {\r\n\t\t\t\tvalue.abilityModify(0.75, \"Rivalry\");\r\n\t\t\t} else if ([\"MM\", \"FF\"].includes(pokemon.gender + target.gender)) {\r\n\t\t\t\tvalue.abilityModify(1.25, \"Rivalry\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst noTypeOverride = [\r\n\t\t\t'judgment', 'multiattack', 'naturalgift', 'revelationdance', 'struggle', 'technoblast', 'terrainpulse', 'weatherball',\r\n\t\t];\r\n\t\tconst allowTypeOverride = !noTypeOverride.includes(move.id) && (move.id !== 'terablast' || !pokemon.terastallized);\r\n\t\tif (\r\n\t\t\tmove.category !== 'Status' && allowTypeOverride && !move.isZ && !move.isMax &&\r\n\t\t\t!move.id.startsWith('hiddenpower')\r\n\t\t) {\r\n\t\t\tif (move.type === 'Normal') {\r\n\t\t\t\tvalue.abilityModify(this.battle.gen > 6 ? 1.2 : 1.3, \"Aerilate\");\r\n\t\t\t\tvalue.abilityModify(this.battle.gen > 6 ? 1.2 : 1.3, \"Galvanize\");\r\n\t\t\t\tvalue.abilityModify(this.battle.gen > 6 ? 1.2 : 1.3, \"Pixilate\");\r\n\t\t\t\tvalue.abilityModify(this.battle.gen > 6 ? 1.2 : 1.3, \"Refrigerate\");\r\n\t\t\t}\r\n\t\t\tif (this.battle.gen > 6) {\r\n\t\t\t\tvalue.abilityModify(1.2, \"Normalize\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (move.recoil || move.hasCrashDamage) {\r\n\t\t\tvalue.abilityModify(1.2, 'Reckless');\r\n\t\t}\r\n\r\n\t\tif (move.category !== 'Status') {\r\n\t\t\tlet auraBoosted = '';\r\n\t\t\tlet auraBroken = false;\r\n\t\t\tfor (const ally of pokemon.side.active) {\r\n\t\t\t\tif (!ally || ally.fainted) continue;\r\n\t\t\t\tlet allyAbility = this.getAllyAbility(ally);\r\n\t\t\t\tif (moveType === 'Fairy' && allyAbility === 'Fairy Aura') {\r\n\t\t\t\t\tauraBoosted = 'Fairy Aura';\r\n\t\t\t\t} else if (moveType === 'Dark' && allyAbility === 'Dark Aura') {\r\n\t\t\t\t\tauraBoosted = 'Dark Aura';\r\n\t\t\t\t} else if (allyAbility === 'Aura Break') {\r\n\t\t\t\t\tauraBroken = true;\r\n\t\t\t\t} else if (allyAbility === 'Battery' && ally !== pokemon && move.category === 'Special') {\r\n\t\t\t\t\tvalue.modify(1.3, 'Battery');\r\n\t\t\t\t} else if (allyAbility === 'Power Spot' && ally !== pokemon) {\r\n\t\t\t\t\tvalue.modify(1.3, 'Power Spot');\r\n\t\t\t\t} else if (allyAbility === 'Steely Spirit' && moveType === 'Steel') {\r\n\t\t\t\t\tvalue.modify(1.5, 'Steely Spirit');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (const foe of pokemon.side.foe.active) {\r\n\t\t\t\tif (!foe || foe.fainted) continue;\r\n\t\t\t\tif (foe.ability === 'Fairy Aura' && moveType === 'Fairy') {\r\n\t\t\t\t\tauraBoosted = 'Fairy Aura';\r\n\t\t\t\t} else if (foe.ability === 'Dark Aura' && moveType === 'Dark') {\r\n\t\t\t\t\tauraBoosted = 'Dark Aura';\r\n\t\t\t\t} else if (foe.ability === 'Aura Break') {\r\n\t\t\t\t\tauraBroken = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (auraBoosted) {\r\n\t\t\t\tif (auraBroken) {\r\n\t\t\t\t\tvalue.modify(0.75, auraBoosted + ' + Aura Break');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue.modify(1.33, auraBoosted);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Terrain\r\n\t\tif ((this.battle.hasPseudoWeather('Electric Terrain') && moveType === 'Electric') ||\r\n\t\t\t(this.battle.hasPseudoWeather('Grassy Terrain') && moveType === 'Grass') ||\r\n\t\t\t(this.battle.hasPseudoWeather('Psychic Terrain') && moveType === 'Psychic')) {\r\n\t\t\tif (pokemon.isGrounded(serverPokemon)) {\r\n\t\t\t\tvalue.modify(this.battle.gen > 7 ? 1.3 : 1.5, 'Terrain boost');\r\n\t\t\t}\r\n\t\t} else if (this.battle.hasPseudoWeather('Misty Terrain') && moveType === 'Dragon') {\r\n\t\t\tif (target ? target.isGrounded() : true) {\r\n\t\t\t\tvalue.modify(0.5, 'Misty Terrain + grounded target');\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\tthis.battle.hasPseudoWeather('Grassy Terrain') && ['earthquake', 'bulldoze', 'magnitude'].includes(move.id)\r\n\t\t) {\r\n\t\t\tif (target ? target.isGrounded() : true) {\r\n\t\t\t\tvalue.modify(0.5, 'Grassy Terrain + grounded target');\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\r\n\t\t\tmove.id === 'expandingforce' &&\r\n\t\t\tthis.battle.hasPseudoWeather('Psychic Terrain') &&\r\n\t\t\tpokemon.isGrounded(serverPokemon)\r\n\t\t) {\r\n\t\t\tvalue.modify(1.5, 'Expanding Force + Psychic Terrain boost');\r\n\t\t}\r\n\t\tif (move.id === 'mistyexplosion' && this.battle.hasPseudoWeather('Misty Terrain')) {\r\n\t\t\tvalue.modify(1.5, 'Misty Explosion + Misty Terrain boost');\r\n\t\t}\r\n\t\tif (move.id === 'risingvoltage' && this.battle.hasPseudoWeather('Electric Terrain') && target?.isGrounded()) {\r\n\t\t\tvalue.modify(2, 'Rising Voltage + Electric Terrain boost');\r\n\t\t}\r\n\r\n\t\t// Item\r\n\t\tvalue = this.getItemBoost(move, value, moveType);\r\n\r\n\t\t// Terastal base power floor\r\n\t\tif (\r\n\t\t\tpokemon.terastallized && (pokemon.terastallized === move.type || pokemon.terastallized === 'Stellar') &&\r\n\t\t\tvalue.value < 60 && move.priority <= 0 && !move.multihit && !(\r\n\t\t\t\t(move.basePower === 0 || move.basePower === 150) && move.basePowerCallback\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tvalue.set(60, 'Tera type BP minimum');\r\n\t\t}\r\n\r\n\t\t// Burn isn't really a base power modifier, so it needs to be applied after the Tera BP floor\r\n\t\tif (this.battle.gen > 2 && serverPokemon.status === 'brn' && move.id !== 'facade' && move.category === 'Physical') {\r\n\t\t\tif (!value.tryAbility(\"Guts\")) value.modify(0.5, 'Burn');\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tmove.id === 'steelroller' &&\r\n\t\t\t!this.battle.hasPseudoWeather('Electric Terrain') &&\r\n\t\t\t!this.battle.hasPseudoWeather('Grassy Terrain') &&\r\n\t\t\t!this.battle.hasPseudoWeather('Misty Terrain') &&\r\n\t\t\t!this.battle.hasPseudoWeather('Psychic Terrain')\r\n\t\t) {\r\n\t\t\tvalue.set(0, 'no Terrain');\r\n\t\t}\r\n\r\n\t\t// SSB\r\n\t\tif (this.battle.tier.includes('Super Staff Bros')) {\r\n\t\t\tif (move.id === 'bodycount') {\r\n\t\t\t\tvalue.set(50 + 50 * pokemon.side.faintCounter,\r\n\t\t\t\t\tpokemon.side.faintCounter > 0 ?\r\n\t\t\t\t\t\t`${pokemon.side.faintCounter} teammate${pokemon.side.faintCounter > 1 ? 's' : ''} KOed` :\r\n\t\t\t\t\t\tundefined);\r\n\t\t\t}\r\n\t\t\t// Base power based on times hit\r\n\t\t\tif (move.id === 'vengefulmood') {\r\n\t\t\t\tvalue.set(Math.min(140, 60 + 20 * pokemon.timesAttacked),\r\n\t\t\t\t\tpokemon.timesAttacked > 0 ?\r\n\t\t\t\t\t\t`Hit ${pokemon.timesAttacked} time${pokemon.timesAttacked > 1 ? 's' : ''}` :\r\n\t\t\t\t\t\tundefined);\r\n\t\t\t}\r\n\t\t\tif (move.id === 'alting' && pokemon.shiny) {\r\n\t\t\t\tvalue.set(69, 'Shiny');\r\n\t\t\t}\r\n\t\t\tif (move.id === 'darkmooncackle') {\r\n\t\t\t\tlet boostCount = 0;\r\n\t\t\t\tfor (const boost of Object.values(pokemon.boosts)) {\r\n\t\t\t\t\tif (boost > 0) boostCount += boost;\r\n\t\t\t\t}\r\n\t\t\t\tvalue.set(30 + 20 * boostCount);\r\n\t\t\t}\r\n\t\t\tif (move.id === 'buildingcharacter' && target?.terastallized) {\r\n\t\t\t\tvalue.modify(2, 'Terastallized target');\r\n\t\t\t}\r\n\t\t\tif (move.id === 'mysticalbonfire' && target?.status) {\r\n\t\t\t\tvalue.modify(1.5, 'Mystical Bonfire + status');\r\n\t\t\t}\r\n\t\t\tif (move.id === 'adaptivebeam' && target && Object.values(target.boosts).some(x => x > 0)) {\r\n\t\t\t\tvalue.set(0, \"Target has more boosts\");\r\n\t\t\t}\r\n\t\t\tif (value.value <= 60) {\r\n\t\t\t\tvalue.abilityModify(1.5, \"Confirmed Town\");\r\n\t\t\t}\r\n\t\t\tif (move.category !== 'Status' && allowTypeOverride && !move.isZ &&\r\n\t\t\t\t!move.isMax && !move.id.startsWith('hiddenpower')) {\r\n\t\t\t\tif (moveType === 'Normal') value.abilityModify(this.battle.gen > 6 ? 1.2 : 1.3, \"I Can Hear The Heart Beating As One\");\r\n\t\t\t\tvalue.abilityModify(this.battle.gen > 6 ? 1.2 : 1.3, \"Acetosa\");\r\n\t\t\t}\r\n\t\t\tif (move.flags['punch']) {\r\n\t\t\t\tvalue.abilityModify(1.5, \"Harambe Hit\");\r\n\t\t\t}\r\n\t\t\tif (move.flags['slicing']) {\r\n\t\t\t\tvalue.abilityModify(1.5, \"I Can Hear The Heart Beating As One\");\r\n\t\t\t}\r\n\t\t\tif (move.priority > 0) {\r\n\t\t\t\tvalue.abilityModify(2, \"Full Bloom\");\r\n\t\t\t}\r\n\t\t\tif (move.recoil || move.hasCrashDamage) {\r\n\t\t\t\tvalue.abilityModify(1.2, 'Hogwash');\r\n\t\t\t\tif (pokemon.name === \"Billo\") {\r\n\t\t\t\t\tvalue.modify(1.2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (target?.gender === \"M\" && pokemon.getSpeciesForme().includes(\"Hearthflame\")) {\r\n\t\t\t\tvalue.abilityModify(1.3, 'See No Evil, Hear No Evil, Speak No Evil');\r\n\t\t\t}\r\n\t\t\tfor (let i = 1; i <= 5 && i <= pokemon.side.faintCounter; i++) {\r\n\t\t\t\tif (pokemon.volatiles[`fallen${i}`]) {\r\n\t\t\t\t\tvalue.abilityModify([1, 1.15, 1.3, 1.45, 1.6, 1.75][i], \"Hardcore Hustle\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet timeDilationBPMod = 1 + (0.1 * Math.floor(this.battle.turn / 10));\r\n\t\t\tif (timeDilationBPMod > 2) timeDilationBPMod = 2;\r\n\t\t\tvalue.abilityModify(timeDilationBPMod, \"Time Dilation\");\r\n\r\n\t\t\tfor (let i = 1; i <= 5 && i <= pokemon.side.faintCounter; i++) {\r\n\t\t\t\tif (pokemon.volatiles[`fallen${i}`]) {\r\n\t\t\t\t\tvalue.abilityModify(1 + 0.05 * i, \"The Eminence in the Shadow\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\tstatic incenseTypes: { [itemName: string]: Dex.TypeName } = {\r\n\t\t'Odd Incense': 'Psychic',\r\n\t\t'Rock Incense': 'Rock',\r\n\t\t'Rose Incense': 'Grass',\r\n\t\t'Sea Incense': 'Water',\r\n\t\t'Wave Incense': 'Water',\r\n\t};\r\n\tstatic itemTypes: { [itemName: string]: Dex.TypeName } = {\r\n\t\t'Black Belt': 'Fighting',\r\n\t\t'Black Glasses': 'Dark',\r\n\t\t'Charcoal': 'Fire',\r\n\t\t'Dragon Fang': 'Dragon',\r\n\t\t'Fairy Feather': 'Fairy',\r\n\t\t'Hard Stone': 'Rock',\r\n\t\t'Magnet': 'Electric',\r\n\t\t'Metal Coat': 'Steel',\r\n\t\t'Miracle Seed': 'Grass',\r\n\t\t'Mystic Water': 'Water',\r\n\t\t'Never-Melt Ice': 'Ice',\r\n\t\t'Poison Barb': 'Poison',\r\n\t\t'Sharp Beak': 'Flying',\r\n\t\t'Silk Scarf': 'Normal',\r\n\t\t'Silver Powder': 'Bug',\r\n\t\t'Soft Sand': 'Ground',\r\n\t\t'Spell Tag': 'Ghost',\r\n\t\t'Twisted Spoon': 'Psychic',\r\n\t};\r\n\tstatic orbUsers: { [speciesForme: string]: string[] } = {\r\n\t\t'Latias': ['Soul Dew'],\r\n\t\t'Latios': ['Soul Dew'],\r\n\t\t'Dialga': ['Adamant Crystal', 'Adamant Orb'],\r\n\t\t'Palkia': ['Lustrous Globe', 'Lustrous Orb'],\r\n\t\t'Giratina': ['Griseous Core', 'Griseous Orb'],\r\n\t\t'Venomicon': ['Vile Vial'],\r\n\t};\r\n\tstatic orbTypes: { [itemName: string]: Dex.TypeName[] } = {\r\n\t\t'Soul Dew': ['Psychic', 'Dragon'],\r\n\t\t'Adamant Crystal': ['Steel', 'Dragon'],\r\n\t\t'Adamant Orb': ['Steel', 'Dragon'],\r\n\t\t'Lustrous Globe': ['Water', 'Dragon'],\r\n\t\t'Lustrous Orb': ['Water', 'Dragon'],\r\n\t\t'Griseous Core': ['Ghost', 'Dragon'],\r\n\t\t'Griseous Orb': ['Ghost', 'Dragon'],\r\n\t\t'Vile Vial': ['Poison', 'Flying'],\r\n\t};\r\n\tstatic noGemMoves = [\r\n\t\t'Fire Pledge',\r\n\t\t'Fling',\r\n\t\t'Grass Pledge',\r\n\t\t'Struggle',\r\n\t\t'Water Pledge',\r\n\t];\r\n\tgetItemBoost(move: Dex.Move, value: ModifiableValue, moveType: Dex.TypeName) {\r\n\t\tlet item = this.battle.dex.items.get(value.serverPokemon.item);\r\n\t\tlet itemName = item.name;\r\n\t\tlet moveName = move.name;\r\n\t\tlet species = this.battle.dex.species.get(value.serverPokemon.speciesForme);\r\n\t\tlet isTransform = value.pokemon.volatiles.transform;\r\n\t\tlet speciesName = isTransform && value.pokemon.volatiles.formechange?.[1] && this.battle.gen <= 4 ?\r\n\t\t\tthis.battle.dex.species.get(value.pokemon.volatiles.formechange[1]).baseSpecies : species.baseSpecies;\r\n\r\n\t\t// Plates\r\n\t\tif (item.onPlate === moveType && !item.zMove) {\r\n\t\t\tvalue.itemModify(1.2);\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Incenses\r\n\t\tif (BattleTooltips.incenseTypes[item.name] === moveType) {\r\n\t\t\tvalue.itemModify(1.2);\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Type-enhancing items\r\n\t\tif (BattleTooltips.itemTypes[item.name] === moveType) {\r\n\t\t\tvalue.itemModify(this.battle.gen < 4 ? 1.1 : 1.2);\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Light ball is a base power modifier in gen 4 only\r\n\t\tif (item.name === 'Light Ball' && this.battle.gen === 4 && speciesName === 'Pikachu') {\r\n\t\t\tvalue.itemModify(2);\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\t// Pokemon-specific items\r\n\t\tif (item.name === 'Soul Dew' && this.battle.gen < 7) return value;\r\n\t\tif (BattleTooltips.orbUsers[speciesName]?.includes(item.name) &&\r\n\t\t\tBattleTooltips.orbTypes[item.name]?.includes(moveType)) {\r\n\t\t\tvalue.itemModify(1.2);\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tif (speciesName === 'Ogerpon') {\r\n\t\t\tconst speciesForme = value.pokemon.getSpeciesForme();\r\n\t\t\tif (\r\n\t\t\t\t(speciesForme.startsWith('Ogerpon-Wellspring') && itemName === 'Wellspring Mask') ||\r\n\t\t\t\t(speciesForme.startsWith('Ogerpon-Hearthflame') && itemName === 'Hearthflame Mask') ||\r\n\t\t\t\t(speciesForme.startsWith('Ogerpon-Cornerstone') && itemName === 'Cornerstone Mask')\r\n\t\t\t) {\r\n\t\t\t\tvalue.itemModify(1.2);\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Gems\r\n\t\tif (BattleTooltips.noGemMoves.includes(moveName)) return value;\r\n\t\tif (itemName === moveType + ' Gem') {\r\n\t\t\tvalue.itemModify(this.battle.gen < 6 ? 1.5 : 1.3);\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tif (itemName === 'Muscle Band' && move.category === 'Physical' ||\r\n\t\t\titemName === 'Wise Glasses' && move.category === 'Special' ||\r\n\t\t\titemName === 'Punching Glove' && move.flags['punch']) {\r\n\t\t\tvalue.itemModify(1.1);\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\tgetPokemonTypes(pokemon: Pokemon | ServerPokemon, preterastallized = false): readonly Dex.TypeName[] {\r\n\t\tif (!(pokemon as Pokemon).getTypes) {\r\n\t\t\treturn this.battle.dex.species.get(pokemon.speciesForme).types;\r\n\t\t}\r\n\r\n\t\treturn (pokemon as Pokemon).getTypeList(undefined, preterastallized);\r\n\t}\r\n\tpokemonHasType(pokemon: Pokemon | ServerPokemon, type: Dex.TypeName, types?: readonly Dex.TypeName[]) {\r\n\t\tif (!types) types = this.getPokemonTypes(pokemon);\r\n\t\tfor (const curType of types) {\r\n\t\t\tif (curType === type) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetAllyAbility(ally: Pokemon) {\r\n\t\tlet serverPokemon;\r\n\t\tif (this.battle.myAllyPokemon) {\r\n\t\t\tserverPokemon = this.battle.myAllyPokemon[ally.slot];\r\n\t\t} else if (this.battle.myPokemon) {\r\n\t\t\tserverPokemon = this.battle.myPokemon[ally.slot];\r\n\t\t}\r\n\t\treturn ally.effectiveAbility(serverPokemon);\r\n\t}\r\n\tgetPokemonAbilityData(clientPokemon: Pokemon | null, serverPokemon: ServerPokemon | null | undefined) {\r\n\t\tconst abilityData: { ability: string, baseAbility: string, possibilities: string[] } = {\r\n\t\t\tability: '', baseAbility: '', possibilities: [],\r\n\t\t};\r\n\t\tif (clientPokemon) {\r\n\t\t\tif (clientPokemon.ability) {\r\n\t\t\t\tabilityData.ability = clientPokemon.ability || clientPokemon.baseAbility;\r\n\t\t\t\tif (clientPokemon.baseAbility) {\r\n\t\t\t\t\tabilityData.baseAbility = clientPokemon.baseAbility;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst speciesForme = clientPokemon.getSpeciesForme() || serverPokemon?.speciesForme || '';\r\n\t\t\t\tconst species = this.battle.dex.species.get(speciesForme);\r\n\t\t\t\tif (species.exists && species.abilities) {\r\n\t\t\t\t\tabilityData.possibilities = Object.values(species.abilities);\r\n\t\t\t\t\tif (this.battle.rules['Frantic Fusions Mod']) {\r\n\t\t\t\t\t\tconst fusionSpecies = this.battle.dex.species.get(clientPokemon.name);\r\n\t\t\t\t\t\tif (fusionSpecies.exists && fusionSpecies.name !== species.name) {\r\n\t\t\t\t\t\t\tfor (const newAbility of Object.values(fusionSpecies.abilities)) {\r\n\t\t\t\t\t\t\t\tif (abilityData.possibilities.includes(newAbility)) continue;\r\n\t\t\t\t\t\t\t\tabilityData.possibilities.push(newAbility);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (serverPokemon) {\r\n\t\t\tif (!abilityData.ability) abilityData.ability = serverPokemon.ability || serverPokemon.baseAbility;\r\n\t\t\tif (!abilityData.baseAbility && serverPokemon.baseAbility) {\r\n\t\t\t\tabilityData.baseAbility = serverPokemon.baseAbility;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn abilityData;\r\n\t}\r\n\tgetPokemonAbilityText(\r\n\t\tclientPokemon: Pokemon | null,\r\n\t\tserverPokemon: ServerPokemon | null | undefined,\r\n\t\tisActive: boolean | undefined,\r\n\t\thidePossible?: boolean\r\n\t) {\r\n\t\tlet text = '';\r\n\t\tconst abilityData = this.getPokemonAbilityData(clientPokemon, serverPokemon);\r\n\t\tif (!isActive) {\r\n\t\t\t// for switch tooltips, only show the original ability\r\n\t\t\tconst ability = abilityData.baseAbility || abilityData.ability;\r\n\t\t\tif (ability) text = '<small>Ability:</small> ' + this.battle.dex.abilities.get(ability).name;\r\n\t\t} else {\r\n\t\t\tif (abilityData.ability) {\r\n\t\t\t\tconst abilityName = this.battle.dex.abilities.get(abilityData.ability).name;\r\n\t\t\t\ttext = '<small>Ability:</small> ' + abilityName;\r\n\t\t\t\tconst baseAbilityName = this.battle.dex.abilities.get(abilityData.baseAbility).name;\r\n\t\t\t\tif (baseAbilityName && baseAbilityName !== abilityName) text += ' (base: ' + baseAbilityName + ')';\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst tier = this.battle.tier;\r\n\t\tif (!text && abilityData.possibilities.length && !hidePossible &&\r\n\t\t\t!(tier.includes('Almost Any Ability') || tier.includes('Hackmons') ||\r\n\t\t\t\ttier.includes('Inheritance') || tier.includes('Metronome'))) {\r\n\t\t\ttext = '<small>Possible abilities:</small> ' + abilityData.possibilities.join(', ');\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n}\r\n\r\nexport class BattleStatGuesser {\r\n\tformatid: ID;\r\n\tdex: ModdedDex;\r\n\tmoveCount: any = null;\r\n\thasMove: any = null;\r\n\r\n\tignoreEVLimits: boolean;\r\n\tsupportsEVs: boolean;\r\n\tsupportsAVs: boolean;\r\n\r\n\tconstructor(formatid: ID) {\r\n\t\tthis.formatid = formatid;\r\n\t\tthis.dex = formatid ? Dex.mod(formatid.slice(0, 4) as ID) : Dex;\r\n\t\tthis.ignoreEVLimits = (\r\n\t\t\tthis.dex.gen < 3 ||\r\n\t\t\t((this.formatid.endsWith('hackmons') || this.formatid.endsWith('bh')) && this.dex.gen !== 6) ||\r\n\t\t\tthis.formatid.includes('metronomebattle') ||\r\n\t\t\tthis.formatid.endsWith('norestrictions')\r\n\t\t);\r\n\t\tthis.supportsEVs = !this.formatid.includes('letsgo');\r\n\t\tthis.supportsAVs = !this.supportsEVs && this.formatid.endsWith('norestrictions');\r\n\t}\r\n\tguess(set: Dex.PokemonSet) {\r\n\t\tlet role = this.guessRole(set);\r\n\t\tlet comboEVs = this.guessEVs(set, role);\r\n\t\tlet evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };\r\n\t\tfor (let stat in evs) {\r\n\t\t\tevs[stat as Dex.StatName] = comboEVs[stat as Dex.StatName] || 0;\r\n\t\t}\r\n\t\tlet plusStat = comboEVs.plusStat || '' as const;\r\n\t\tlet minusStat = comboEVs.minusStat || '' as const;\r\n\t\treturn { role, evs, plusStat, minusStat, moveCount: this.moveCount, hasMove: this.hasMove };\r\n\t}\r\n\tguessRole(set: Dex.PokemonSet) {\r\n\t\tif (!set) return '?';\r\n\t\tif (!set.moves) return '?';\r\n\r\n\t\tlet moveCount = {\r\n\t\t\t'Physical': 0,\r\n\t\t\t'Special': 0,\r\n\t\t\t'PhysicalAttack': 0,\r\n\t\t\t'SpecialAttack': 0,\r\n\t\t\t'PhysicalSetup': 0,\r\n\t\t\t'SpecialSetup': 0,\r\n\t\t\t'Support': 0,\r\n\t\t\t'Setup': 0,\r\n\t\t\t'Restoration': 0,\r\n\t\t\t'Offense': 0,\r\n\t\t\t'Stall': 0,\r\n\t\t\t'SpecialStall': 0,\r\n\t\t\t'PhysicalStall': 0,\r\n\t\t\t'Fast': 0,\r\n\t\t\t'Ultrafast': 0,\r\n\t\t\t'bulk': 0,\r\n\t\t\t'specialBulk': 0,\r\n\t\t\t'physicalBulk': 0,\r\n\t\t};\r\n\t\tlet hasMove: { [moveid: string]: 1 } = {};\r\n\t\tlet itemid = toID(set.item);\r\n\t\tlet item = this.dex.items.get(itemid);\r\n\t\tlet abilityid = toID(set.ability);\r\n\r\n\t\tlet species = this.dex.species.get(set.species || set.name!);\r\n\t\tif (item.megaEvolves === species.name) species = this.dex.species.get(item.megaStone);\r\n\t\tif (!species.exists) return '?';\r\n\t\tlet stats = species.baseStats;\r\n\r\n\t\tif (set.moves.length < 1) return '?';\r\n\t\tlet needsFourMoves = !['unown', 'ditto'].includes(species.id);\r\n\t\tlet hasFourValidMoves = set.moves.length >= 4 && !set.moves.includes('');\r\n\t\tlet moveids = set.moves.map(toID);\r\n\t\tif (moveids.includes('lastresort' as ID)) needsFourMoves = false;\r\n\t\tif (!hasFourValidMoves && needsFourMoves && !this.formatid.includes('metronomebattle')) {\r\n\t\t\treturn '?';\r\n\t\t}\r\n\r\n\t\tfor (let i = 0, len = set.moves.length; i < len; i++) {\r\n\t\t\tlet move = this.dex.moves.get(set.moves[i]);\r\n\t\t\thasMove[move.id] = 1;\r\n\t\t\tif (move.category === 'Status') {\r\n\t\t\t\tif (['batonpass', 'healingwish', 'lunardance'].includes(move.id)) {\r\n\t\t\t\t\tmoveCount['Support']++;\r\n\t\t\t\t} else if (['metronome', 'assist', 'copycat', 'mefirst', 'photongeyser', 'shellsidearm'].includes(move.id)) {\r\n\t\t\t\t\tmoveCount['Physical'] += 0.5;\r\n\t\t\t\t\tmoveCount['Special'] += 0.5;\r\n\t\t\t\t} else if (move.id === 'naturepower') {\r\n\t\t\t\t\tmoveCount['Special']++;\r\n\t\t\t\t} else if (['protect', 'detect', 'spikyshield', 'kingsshield'].includes(move.id)) {\r\n\t\t\t\t\tmoveCount['Stall']++;\r\n\t\t\t\t} else if (move.id === 'wish') {\r\n\t\t\t\t\tmoveCount['Restoration']++;\r\n\t\t\t\t\tmoveCount['Stall']++;\r\n\t\t\t\t\tmoveCount['Support']++;\r\n\t\t\t\t} else if (move.heal) {\r\n\t\t\t\t\tmoveCount['Restoration']++;\r\n\t\t\t\t\tmoveCount['Stall']++;\r\n\t\t\t\t} else if (move.target === 'self') {\r\n\t\t\t\t\tif (['agility', 'rockpolish', 'shellsmash', 'growth', 'workup'].includes(move.id)) {\r\n\t\t\t\t\t\tmoveCount['PhysicalSetup']++;\r\n\t\t\t\t\t\tmoveCount['SpecialSetup']++;\r\n\t\t\t\t\t} else if (['dragondance', 'swordsdance', 'coil', 'bulkup', 'curse', 'bellydrum'].includes(move.id)) {\r\n\t\t\t\t\t\tmoveCount['PhysicalSetup']++;\r\n\t\t\t\t\t} else if (['nastyplot', 'tailglow', 'quiverdance', 'calmmind', 'geomancy'].includes(move.id)) {\r\n\t\t\t\t\t\tmoveCount['SpecialSetup']++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (move.id === 'substitute') moveCount['Stall']++;\r\n\t\t\t\t\tmoveCount['Setup']++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (['toxic', 'leechseed', 'willowisp'].includes(move.id)) {\r\n\t\t\t\t\t\tmoveCount['Stall']++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoveCount['Support']++;\r\n\t\t\t\t}\r\n\t\t\t} else if (['counter', 'endeavor', 'metalburst', 'mirrorcoat', 'rapidspin'].includes(move.id)) {\r\n\t\t\t\tmoveCount['Support']++;\r\n\t\t\t} else if ([\r\n\t\t\t\t'nightshade', 'seismictoss', 'psywave', 'superfang', 'naturesmadness', 'foulplay', 'endeavor', 'finalgambit', 'bodypress',\r\n\t\t\t].includes(move.id)) {\r\n\t\t\t\tmoveCount['Offense']++;\r\n\t\t\t} else if (move.id === 'fellstinger') {\r\n\t\t\t\tmoveCount['PhysicalSetup']++;\r\n\t\t\t\tmoveCount['Setup']++;\r\n\t\t\t} else {\r\n\t\t\t\tmoveCount[move.category]++;\r\n\t\t\t\tmoveCount['Offense']++;\r\n\t\t\t\tif (move.id === 'knockoff') {\r\n\t\t\t\t\tmoveCount['Support']++;\r\n\t\t\t\t}\r\n\t\t\t\tif (['scald', 'voltswitch', 'uturn', 'flipturn'].includes(move.id)) {\r\n\t\t\t\t\tmoveCount[move.category] -= 0.2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (hasMove['batonpass']) moveCount['Support'] += moveCount['Setup'];\r\n\t\tmoveCount['PhysicalAttack'] = moveCount['Physical'];\r\n\t\tmoveCount['Physical'] += moveCount['PhysicalSetup'];\r\n\t\tmoveCount['SpecialAttack'] = moveCount['Special'];\r\n\t\tmoveCount['Special'] += moveCount['SpecialSetup'];\r\n\r\n\t\tif (hasMove['dragondance'] || hasMove['quiverdance']) moveCount['Ultrafast'] = 1;\r\n\r\n\t\tlet isFast = (stats.spe >= 80);\r\n\t\tlet physicalBulk = (stats.hp + 75) * (stats.def + 87);\r\n\t\tlet specialBulk = (stats.hp + 75) * (stats.spd + 87);\r\n\r\n\t\tif (hasMove['willowisp'] || hasMove['acidarmor'] || hasMove['irondefense'] || hasMove['cottonguard']) {\r\n\t\t\tphysicalBulk *= 1.6;\r\n\t\t\tmoveCount['PhysicalStall']++;\r\n\t\t} else if (hasMove['scald'] || hasMove['bulkup'] || hasMove['coil'] || hasMove['cosmicpower']) {\r\n\t\t\tphysicalBulk *= 1.3;\r\n\t\t\tif (hasMove['scald']) { // partial stall goes in reverse\r\n\t\t\t\tmoveCount['SpecialStall']++;\r\n\t\t\t} else {\r\n\t\t\t\tmoveCount['PhysicalStall']++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (abilityid === 'flamebody') physicalBulk *= 1.1;\r\n\r\n\t\tif (hasMove['calmmind'] || hasMove['quiverdance'] || hasMove['geomancy']) {\r\n\t\t\tspecialBulk *= 1.3;\r\n\t\t\tmoveCount['SpecialStall']++;\r\n\t\t}\r\n\t\tif (abilityid === 'sandstream' && species.types.includes('Rock')) {\r\n\t\t\tspecialBulk *= 1.5;\r\n\t\t}\r\n\r\n\t\tif (hasMove['bellydrum']) {\r\n\t\t\tphysicalBulk *= 0.6;\r\n\t\t\tspecialBulk *= 0.6;\r\n\t\t}\r\n\t\tif (moveCount['Restoration']) {\r\n\t\t\tphysicalBulk *= 1.5;\r\n\t\t\tspecialBulk *= 1.5;\r\n\t\t} else if (hasMove['painsplit'] && hasMove['substitute']) {\r\n\t\t\t// SubSplit isn't generally a stall set\r\n\t\t\tmoveCount['Stall']--;\r\n\t\t} else if (hasMove['painsplit'] || hasMove['rest']) {\r\n\t\t\tphysicalBulk *= 1.4;\r\n\t\t\tspecialBulk *= 1.4;\r\n\t\t}\r\n\t\tif ((hasMove['bodyslam'] || hasMove['thunder']) && abilityid === 'serenegrace' || hasMove['thunderwave']) {\r\n\t\t\tphysicalBulk *= 1.1;\r\n\t\t\tspecialBulk *= 1.1;\r\n\t\t}\r\n\t\tif ((hasMove['ironhead'] || hasMove['airslash']) && abilityid === 'serenegrace') {\r\n\t\t\tphysicalBulk *= 1.1;\r\n\t\t\tspecialBulk *= 1.1;\r\n\t\t}\r\n\t\tif (hasMove['gigadrain'] || hasMove['drainpunch'] || hasMove['hornleech']) {\r\n\t\t\tphysicalBulk *= 1.15;\r\n\t\t\tspecialBulk *= 1.15;\r\n\t\t}\r\n\t\tif (itemid === 'leftovers' || itemid === 'blacksludge') {\r\n\t\t\tphysicalBulk *= 1 + 0.1 * (1 + moveCount['Stall'] / 1.5);\r\n\t\t\tspecialBulk *= 1 + 0.1 * (1 + moveCount['Stall'] / 1.5);\r\n\t\t}\r\n\t\tif (hasMove['leechseed']) {\r\n\t\t\tphysicalBulk *= 1 + 0.1 * (1 + moveCount['Stall'] / 1.5);\r\n\t\t\tspecialBulk *= 1 + 0.1 * (1 + moveCount['Stall'] / 1.5);\r\n\t\t}\r\n\t\tif ((itemid === 'flameorb' || itemid === 'toxicorb') && abilityid !== 'magicguard') {\r\n\t\t\tif (itemid === 'toxicorb' && abilityid === 'poisonheal') {\r\n\t\t\t\tphysicalBulk *= 1 + 0.1 * (2 + moveCount['Stall']);\r\n\t\t\t\tspecialBulk *= 1 + 0.1 * (2 + moveCount['Stall']);\r\n\t\t\t} else {\r\n\t\t\t\tphysicalBulk *= 0.8;\r\n\t\t\t\tspecialBulk *= 0.8;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (itemid === 'lifeorb') {\r\n\t\t\tphysicalBulk *= 0.7;\r\n\t\t\tspecialBulk *= 0.7;\r\n\t\t}\r\n\t\tif (abilityid === 'multiscale' || abilityid === 'magicguard' || abilityid === 'regenerator') {\r\n\t\t\tphysicalBulk *= 1.4;\r\n\t\t\tspecialBulk *= 1.4;\r\n\t\t}\r\n\t\tif (itemid === 'eviolite') {\r\n\t\t\tphysicalBulk *= 1.5;\r\n\t\t\tspecialBulk *= 1.5;\r\n\t\t}\r\n\t\tif (itemid === 'assaultvest') {\r\n\t\t\tspecialBulk *= 1.5;\r\n\t\t}\r\n\r\n\t\tlet bulk = physicalBulk + specialBulk;\r\n\t\tif (bulk < 46000 && stats.spe >= 70) isFast = true;\r\n\t\tif (hasMove['trickroom']) isFast = false;\r\n\t\tmoveCount['bulk'] = bulk;\r\n\t\tmoveCount['physicalBulk'] = physicalBulk;\r\n\t\tmoveCount['specialBulk'] = specialBulk;\r\n\r\n\t\tif (\r\n\t\t\thasMove['agility'] || hasMove['dragondance'] || hasMove['quiverdance'] ||\r\n\t\t\thasMove['rockpolish'] || hasMove['shellsmash'] || hasMove['flamecharge']\r\n\t\t) {\r\n\t\t\tisFast = true;\r\n\t\t} else if (abilityid === 'unburden' || abilityid === 'speedboost' || abilityid === 'motordrive') {\r\n\t\t\tisFast = true;\r\n\t\t\tmoveCount['Ultrafast'] = 1;\r\n\t\t} else if (abilityid === 'chlorophyll' || abilityid === 'swiftswim' || abilityid === 'sandrush') {\r\n\t\t\tisFast = true;\r\n\t\t\tmoveCount['Ultrafast'] = 2;\r\n\t\t} else if (itemid === 'salacberry') {\r\n\t\t\tisFast = true;\r\n\t\t}\r\n\t\tconst ultrafast = hasMove['agility'] || hasMove['shellsmash'] ||\r\n\t\t\thasMove['autotomize'] || hasMove['shiftgear'] || hasMove['rockpolish'];\r\n\t\tif (ultrafast) {\r\n\t\t\tmoveCount['Ultrafast'] = 2;\r\n\t\t}\r\n\t\tmoveCount['Fast'] = isFast ? 1 : 0;\r\n\r\n\t\tthis.moveCount = moveCount;\r\n\t\tthis.hasMove = hasMove;\r\n\r\n\t\tif (species.id === 'ditto') return abilityid === 'imposter' ? 'Physically Defensive' : 'Fast Bulky Support';\r\n\t\tif (species.id === 'shedinja') return 'Fast Physical Sweeper';\r\n\r\n\t\tif (itemid === 'choiceband' && moveCount['PhysicalAttack'] >= 2) {\r\n\t\t\tif (!isFast) return 'Bulky Band';\r\n\t\t\treturn 'Fast Band';\r\n\t\t} else if (itemid === 'choicespecs' && moveCount['SpecialAttack'] >= 2) {\r\n\t\t\tif (!isFast) return 'Bulky Specs';\r\n\t\t\treturn 'Fast Specs';\r\n\t\t} else if (itemid === 'choicescarf') {\r\n\t\t\tif (moveCount['PhysicalAttack'] === 0) return 'Special Scarf';\r\n\t\t\tif (moveCount['SpecialAttack'] === 0) return 'Physical Scarf';\r\n\t\t\tif (moveCount['PhysicalAttack'] > moveCount['SpecialAttack']) return 'Physical Biased Mixed Scarf';\r\n\t\t\tif (moveCount['PhysicalAttack'] < moveCount['SpecialAttack']) return 'Special Biased Mixed Scarf';\r\n\t\t\tif (stats.atk < stats.spa) return 'Special Biased Mixed Scarf';\r\n\t\t\treturn 'Physical Biased Mixed Scarf';\r\n\t\t}\r\n\r\n\t\tif (species.id === 'unown') return 'Fast Special Sweeper';\r\n\r\n\t\tif (moveCount['PhysicalStall'] && moveCount['Restoration']) {\r\n\t\t\tif (stats.spe > 110 && abilityid !== 'prankster') return 'Fast Bulky Support';\r\n\t\t\treturn 'Specially Defensive';\r\n\t\t}\r\n\t\tif (moveCount['SpecialStall'] && moveCount['Restoration'] && itemid !== 'lifeorb') {\r\n\t\t\tif (stats.spe > 110 && abilityid !== 'prankster') return 'Fast Bulky Support';\r\n\t\t\treturn 'Physically Defensive';\r\n\t\t}\r\n\r\n\t\tlet offenseBias: 'Physical' | 'Special' = 'Physical';\r\n\t\tif (stats.spa > stats.atk && moveCount['Special'] > 1) offenseBias = 'Special';\r\n\t\telse if (stats.atk > stats.spa && moveCount['Physical'] > 1) offenseBias = 'Physical';\r\n\t\telse if (moveCount['Special'] > moveCount['Physical']) offenseBias = 'Special';\r\n\r\n\t\tif (moveCount['Stall'] + moveCount['Support'] / 2 <= 2 && bulk < 135000 && moveCount[offenseBias] >= 1.5) {\r\n\t\t\tif (isFast) {\r\n\t\t\t\tif (bulk > 80000 && !moveCount['Ultrafast']) return 'Bulky ' + offenseBias + ' Sweeper';\r\n\t\t\t\treturn 'Fast ' + offenseBias + ' Sweeper';\r\n\t\t\t} else {\r\n\t\t\t\tif (moveCount[offenseBias] >= 3 || moveCount['Stall'] <= 0) {\r\n\t\t\t\t\treturn 'Bulky ' + offenseBias + ' Sweeper';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isFast && abilityid !== 'prankster') {\r\n\t\t\tif (stats.spe > 100 || bulk < 55000 || moveCount['Ultrafast']) {\r\n\t\t\t\treturn 'Fast Bulky Support';\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (moveCount['SpecialStall']) return 'Physically Defensive';\r\n\t\tif (moveCount['PhysicalStall']) return 'Specially Defensive';\r\n\t\tif (species.id === 'blissey' || species.id === 'chansey') return 'Physically Defensive';\r\n\t\tif (specialBulk >= physicalBulk) return 'Specially Defensive';\r\n\t\treturn 'Physically Defensive';\r\n\t}\r\n\tensureMinEVs(evs: Dex.StatsTable, stat: Dex.StatName, min: number, evTotal: number) {\r\n\t\tif (!evs[stat]) evs[stat] = 0;\r\n\t\tlet diff = min - evs[stat];\r\n\t\tif (diff <= 0) return evTotal;\r\n\t\tif (evTotal <= 504) {\r\n\t\t\tlet change = Math.min(508 - evTotal, diff);\r\n\t\t\tevTotal += change;\r\n\t\t\tevs[stat] += change;\r\n\t\t\tdiff -= change;\r\n\t\t}\r\n\t\tif (diff <= 0) return evTotal;\r\n\t\tlet evPriority = { def: 1, spd: 1, hp: 1, atk: 1, spa: 1, spe: 1 };\r\n\t\tlet prioStat: Dex.StatName;\r\n\t\tfor (prioStat in evPriority) {\r\n\t\t\tif (prioStat === stat) continue;\r\n\t\t\tif (evs[prioStat] && evs[prioStat] > 128) {\r\n\t\t\t\tevs[prioStat] -= diff;\r\n\t\t\t\tevs[stat] += diff;\r\n\t\t\t\treturn evTotal;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn evTotal; // can't do it :(\r\n\t}\r\n\tensureMaxEVs(evs: Dex.StatsTable, stat: Dex.StatName, min: number, evTotal: number) {\r\n\t\tif (!evs[stat]) evs[stat] = 0;\r\n\t\tlet diff = evs[stat] - min;\r\n\t\tif (diff <= 0) return evTotal;\r\n\t\tevs[stat] -= diff;\r\n\t\tevTotal -= diff;\r\n\t\treturn evTotal; // can't do it :(\r\n\t}\r\n\tguessEVs(\r\n\t\tset: Dex.PokemonSet, role: string\r\n\t): Partial<Dex.StatsTable> & { plusStat?: Dex.StatNameExceptHP, minusStat?: Dex.StatNameExceptHP } {\r\n\t\tif (!set) return {};\r\n\t\tif (role === '?') return {};\r\n\t\tlet species = this.dex.species.get(set.species || set.name!);\r\n\t\tlet stats = species.baseStats;\r\n\r\n\t\tlet hasMove = this.hasMove;\r\n\t\tlet moveCount = this.moveCount;\r\n\r\n\t\tlet evs: Dex.StatsTable & { plusStat?: Dex.StatNameExceptHP, minusStat?: Dex.StatNameExceptHP } = {\r\n\t\t\thp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0,\r\n\t\t};\r\n\t\tlet plusStat: Dex.StatNameExceptHP;\r\n\t\tlet minusStat: Dex.StatNameExceptHP | undefined = undefined;\r\n\r\n\t\tlet statChart: { [role: string]: [Dex.StatNameExceptHP, Dex.StatName] } = {\r\n\t\t\t'Bulky Band': ['atk', 'hp'],\r\n\t\t\t'Fast Band': ['spe', 'atk'],\r\n\t\t\t'Bulky Specs': ['spa', 'hp'],\r\n\t\t\t'Fast Specs': ['spe', 'spa'],\r\n\t\t\t'Physical Scarf': ['spe', 'atk'],\r\n\t\t\t'Special Scarf': ['spe', 'spa'],\r\n\t\t\t'Physical Biased Mixed Scarf': ['spe', 'atk'],\r\n\t\t\t'Special Biased Mixed Scarf': ['spe', 'spa'],\r\n\t\t\t'Fast Physical Sweeper': ['spe', 'atk'],\r\n\t\t\t'Fast Special Sweeper': ['spe', 'spa'],\r\n\t\t\t'Bulky Physical Sweeper': ['atk', 'hp'],\r\n\t\t\t'Bulky Special Sweeper': ['spa', 'hp'],\r\n\t\t\t'Fast Bulky Support': ['spe', 'hp'],\r\n\t\t\t'Physically Defensive': ['def', 'hp'],\r\n\t\t\t'Specially Defensive': ['spd', 'hp'],\r\n\t\t};\r\n\r\n\t\tplusStat = statChart[role][0];\r\n\t\tif (role === 'Fast Bulky Support') moveCount['Ultrafast'] = 0;\r\n\t\tif (plusStat === 'spe' && moveCount['Ultrafast']) {\r\n\t\t\tif (statChart[role][1] === 'atk' || statChart[role][1] === 'spa') {\r\n\t\t\t\tplusStat = statChart[role][1];\r\n\t\t\t} else if (moveCount['Physical'] >= 3) {\r\n\t\t\t\tplusStat = 'atk';\r\n\t\t\t} else if (stats.spd > stats.def) {\r\n\t\t\t\tplusStat = 'spd';\r\n\t\t\t} else {\r\n\t\t\t\tplusStat = 'def';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.supportsAVs) {\r\n\t\t\t// Let's Go, AVs enabled\r\n\t\t\tevs = { hp: 200, atk: 200, def: 200, spa: 200, spd: 200, spe: 200 };\r\n\t\t\tif (!moveCount['PhysicalAttack']) evs.atk = 0;\r\n\t\t\tif (!moveCount['SpecialAttack']) evs.spa = 0;\r\n\t\t\tif (hasMove['gyroball'] || hasMove['trickroom']) evs.spe = 0;\r\n\t\t} else if (!this.supportsEVs) {\r\n\t\t\t// Let's Go, AVs disabled\r\n\t\t\t// no change\r\n\t\t} else if (this.ignoreEVLimits) {\r\n\t\t\t// Gen 1-2, hackable EVs (like Hackmons)\r\n\t\t\tevs = { hp: 252, atk: 252, def: 252, spa: 252, spd: 252, spe: 252 };\r\n\t\t\tif (!moveCount['PhysicalAttack']) evs.atk = 0;\r\n\t\t\tif (!moveCount['SpecialAttack'] && this.dex.gen > 1) evs.spa = 0;\r\n\t\t\tif (hasMove['gyroball'] || hasMove['trickroom']) evs.spe = 0;\r\n\t\t\tif (this.dex.gen === 1) evs.spd = 0;\r\n\t\t\tif (this.dex.gen < 3) return evs;\r\n\t\t} else {\r\n\t\t\t// Normal Gen 3-7\r\n\t\t\tif (!statChart[role]) return {};\r\n\r\n\t\t\tlet evTotal = 0;\r\n\r\n\t\t\tlet primaryStat = statChart[role][0];\r\n\t\t\tlet stat = this.getStat(primaryStat, set, 252, plusStat === primaryStat ? 1.1 : 1.0);\r\n\t\t\tlet ev = 252;\r\n\t\t\twhile (ev > 0 && stat <= this.getStat(primaryStat, set, ev - 4, plusStat === primaryStat ? 1.1 : 1.0)) ev -= 4;\r\n\t\t\tevs[primaryStat] = ev;\r\n\t\t\tevTotal += ev;\r\n\r\n\t\t\tlet secondaryStat: Dex.StatName | null = statChart[role][1];\r\n\t\t\tif (secondaryStat === 'hp' && set.level && set.level < 20) secondaryStat = 'spd';\r\n\t\t\tstat = this.getStat(secondaryStat, set, 252, plusStat === secondaryStat ? 1.1 : 1.0);\r\n\t\t\tev = 252;\r\n\t\t\twhile (ev > 0 && stat <= this.getStat(secondaryStat, set, ev - 4, plusStat === secondaryStat ? 1.1 : 1.0)) ev -= 4;\r\n\t\t\tevs[secondaryStat] = ev;\r\n\t\t\tevTotal += ev;\r\n\r\n\t\t\tlet SRweaknesses = ['Fire', 'Flying', 'Bug', 'Ice'];\r\n\t\t\tlet SRresistances = ['Ground', 'Steel', 'Fighting'];\r\n\t\t\tlet SRweak = 0;\r\n\t\t\tif (set.ability !== 'Magic Guard' && set.ability !== 'Mountaineer') {\r\n\t\t\t\tif (SRweaknesses.includes(species.types[0])) {\r\n\t\t\t\t\tSRweak++;\r\n\t\t\t\t} else if (SRresistances.includes(species.types[0])) {\r\n\t\t\t\t\tSRweak--;\r\n\t\t\t\t}\r\n\t\t\t\tif (SRweaknesses.includes(species.types[1])) {\r\n\t\t\t\t\tSRweak++;\r\n\t\t\t\t} else if (SRresistances.includes(species.types[1])) {\r\n\t\t\t\t\tSRweak--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet hpDivisibility = 0;\r\n\t\t\tlet hpShouldBeDivisible = false;\r\n\t\t\tlet hp = evs['hp'] || 0;\r\n\t\t\tstat = this.getStat('hp', set, hp, 1);\r\n\t\t\tif ((set.item === 'Leftovers' || set.item === 'Black Sludge') && hasMove['substitute'] && stat !== 404) {\r\n\t\t\t\thpDivisibility = 4;\r\n\t\t\t} else if (set.item === 'Leftovers' || set.item === 'Black Sludge') {\r\n\t\t\t\thpDivisibility = 0;\r\n\t\t\t} else if (hasMove['bellydrum'] && (set.item || '').endsWith('Berry')) {\r\n\t\t\t\thpDivisibility = 2;\r\n\t\t\t\thpShouldBeDivisible = true;\r\n\t\t\t} else if (hasMove['substitute'] && (set.item || '').endsWith('Berry')) {\r\n\t\t\t\thpDivisibility = 4;\r\n\t\t\t\thpShouldBeDivisible = true;\r\n\t\t\t} else if (SRweak >= 2 || hasMove['bellydrum']) {\r\n\t\t\t\thpDivisibility = 2;\r\n\t\t\t} else if (SRweak >= 1 || hasMove['substitute'] || hasMove['transform']) {\r\n\t\t\t\thpDivisibility = 4;\r\n\t\t\t} else if (set.ability !== 'Magic Guard') {\r\n\t\t\t\thpDivisibility = 8;\r\n\t\t\t}\r\n\r\n\t\t\tif (hpDivisibility) {\r\n\t\t\t\twhile (hp < 252 && evTotal < 508 && !(stat % hpDivisibility) !== hpShouldBeDivisible) {\r\n\t\t\t\t\thp += 4;\r\n\t\t\t\t\tstat = this.getStat('hp', set, hp, 1);\r\n\t\t\t\t\tevTotal += 4;\r\n\t\t\t\t}\r\n\t\t\t\twhile (hp > 0 && !(stat % hpDivisibility) !== hpShouldBeDivisible) {\r\n\t\t\t\t\thp -= 4;\r\n\t\t\t\t\tstat = this.getStat('hp', set, hp, 1);\r\n\t\t\t\t\tevTotal -= 4;\r\n\t\t\t\t}\r\n\t\t\t\twhile (hp > 0 && stat === this.getStat('hp', set, hp - 4, 1)) {\r\n\t\t\t\t\thp -= 4;\r\n\t\t\t\t\tevTotal -= 4;\r\n\t\t\t\t}\r\n\t\t\t\tif (hp || evs['hp']) evs['hp'] = hp;\r\n\t\t\t}\r\n\r\n\t\t\tif (species.id === 'tentacruel') {\r\n\t\t\t\tevTotal = this.ensureMinEVs(evs, 'spe', 16, evTotal);\r\n\t\t\t} else if (species.id === 'skarmory') {\r\n\t\t\t\tevTotal = this.ensureMinEVs(evs, 'spe', 24, evTotal);\r\n\t\t\t} else if (species.id === 'jirachi') {\r\n\t\t\t\tevTotal = this.ensureMinEVs(evs, 'spe', 32, evTotal);\r\n\t\t\t} else if (species.id === 'celebi') {\r\n\t\t\t\tevTotal = this.ensureMinEVs(evs, 'spe', 36, evTotal);\r\n\t\t\t} else if (species.id === 'volcarona') {\r\n\t\t\t\tevTotal = this.ensureMinEVs(evs, 'spe', 52, evTotal);\r\n\t\t\t} else if (species.id === 'gliscor') {\r\n\t\t\t\tevTotal = this.ensureMinEVs(evs, 'spe', 72, evTotal);\r\n\t\t\t} else if (species.id === 'dragonite' && evs['hp']) {\r\n\t\t\t\tevTotal = this.ensureMaxEVs(evs, 'spe', 220, evTotal);\r\n\t\t\t}\r\n\r\n\t\t\tif (evTotal < 508) {\r\n\t\t\t\tlet remaining = 508 - evTotal;\r\n\t\t\t\tif (remaining > 252) remaining = 252;\r\n\t\t\t\tsecondaryStat = null;\r\n\t\t\t\tif (!evs['atk'] && moveCount['PhysicalAttack'] >= 1) {\r\n\t\t\t\t\tsecondaryStat = 'atk';\r\n\t\t\t\t} else if (!evs['spa'] && moveCount['SpecialAttack'] >= 1) {\r\n\t\t\t\t\tsecondaryStat = 'spa';\r\n\t\t\t\t} else if (stats.hp === 1 && !evs['def']) {\r\n\t\t\t\t\tsecondaryStat = 'def';\r\n\t\t\t\t} else if (stats.def === stats.spd && !evs['spd']) {\r\n\t\t\t\t\tsecondaryStat = 'spd';\r\n\t\t\t\t} else if (!evs['spd']) {\r\n\t\t\t\t\tsecondaryStat = 'spd';\r\n\t\t\t\t} else if (!evs['def']) {\r\n\t\t\t\t\tsecondaryStat = 'def';\r\n\t\t\t\t}\r\n\t\t\t\tif (secondaryStat) {\r\n\t\t\t\t\tev = remaining;\r\n\t\t\t\t\tstat = this.getStat(secondaryStat, set, ev);\r\n\t\t\t\t\twhile (ev > 0 && stat === this.getStat(secondaryStat, set, ev - 4)) ev -= 4;\r\n\t\t\t\t\tif (ev) evs[secondaryStat] = ev;\r\n\t\t\t\t\tremaining -= ev;\r\n\t\t\t\t}\r\n\t\t\t\tif (remaining && !evs['spe']) {\r\n\t\t\t\t\tev = remaining;\r\n\t\t\t\t\tstat = this.getStat('spe', set, ev);\r\n\t\t\t\t\twhile (ev > 0 && stat === this.getStat('spe', set, ev - 4)) ev -= 4;\r\n\t\t\t\t\tif (ev) evs['spe'] = ev;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (hasMove['gyroball'] || hasMove['trickroom']) {\r\n\t\t\tminusStat = 'spe';\r\n\t\t} else if (!moveCount['PhysicalAttack']) {\r\n\t\t\tminusStat = 'atk';\r\n\t\t} else if (moveCount['SpecialAttack'] < 1 && !evs['spa']) {\r\n\t\t\tif (moveCount['SpecialAttack'] < moveCount['PhysicalAttack']) {\r\n\t\t\t\tminusStat = 'spa';\r\n\t\t\t} else if (!evs['atk']) {\r\n\t\t\t\tminusStat = 'atk';\r\n\t\t\t}\r\n\t\t} else if (moveCount['PhysicalAttack'] < 1 && !evs['atk']) {\r\n\t\t\tminusStat = 'atk';\r\n\t\t} else if (stats.def > stats.spe && stats.spd > stats.spe && !evs['spe']) {\r\n\t\t\tminusStat = 'spe';\r\n\t\t} else if (stats.def > stats.spd) {\r\n\t\t\tminusStat = 'spd';\r\n\t\t} else {\r\n\t\t\tminusStat = 'def';\r\n\t\t}\r\n\r\n\t\tif (!minusStat || plusStat === minusStat) {\r\n\t\t\tminusStat = (plusStat === 'spe' ? 'spd' : 'spe');\r\n\t\t}\r\n\r\n\t\tevs.plusStat = plusStat;\r\n\t\tevs.minusStat = minusStat;\r\n\r\n\t\treturn evs;\r\n\t}\r\n\r\n\tgetStat(stat: Dex.StatName, set: Dex.PokemonSet, evOverride?: number, natureOverride?: number) {\r\n\t\tlet species = this.dex.species.get(set.species);\r\n\t\tif (!species.exists) return 0;\r\n\r\n\t\tlet level = set.level || 100;\r\n\r\n\t\tlet baseStat = species.baseStats[stat];\r\n\r\n\t\tlet iv = set.ivs?.[stat];\r\n\t\tif (typeof iv !== 'number') iv = 31;\r\n\t\tif (this.dex.gen <= 2) iv &= 30;\r\n\r\n\t\tlet ev = set.evs?.[stat];\r\n\t\tif (typeof ev !== 'number') ev = (this.dex.gen > 2 ? 0 : 252);\r\n\t\tif (evOverride !== undefined) ev = evOverride;\r\n\r\n\t\tif (stat === 'hp') {\r\n\t\t\tif (baseStat === 1) return 1;\r\n\t\t\tif (!this.supportsEVs) return ~~(~~(2 * baseStat + iv + 100) * level / 100 + 10) + (this.supportsAVs ? ev : 0);\r\n\t\t\treturn ~~(~~(2 * baseStat + iv + ~~(ev / 4) + 100) * level / 100 + 10);\r\n\t\t}\r\n\t\tlet val = ~~(~~(2 * baseStat + iv + ~~(ev / 4)) * level / 100 + 5);\r\n\t\tif (!this.supportsEVs) {\r\n\t\t\tval = ~~(~~(2 * baseStat + iv) * level / 100 + 5);\r\n\t\t}\r\n\t\tif (natureOverride) {\r\n\t\t\tval *= natureOverride;\r\n\t\t} else if (BattleNatures[set.nature!]?.plus === stat) {\r\n\t\t\tval *= 1.1;\r\n\t\t} else if (BattleNatures[set.nature!]?.minus === stat) {\r\n\t\t\tval *= 0.9;\r\n\t\t}\r\n\t\tif (!this.supportsEVs) {\r\n\t\t\tlet friendshipValue = ~~((70 / 255 / 10 + 1) * 100);\r\n\t\t\tval = ~~(val) * friendshipValue / 100 + (this.supportsAVs ? ev : 0);\r\n\t\t}\r\n\t\treturn ~~(val);\r\n\t}\r\n}\r\n\r\nexport function BattleStatOptimizer(set: Dex.PokemonSet, formatid: ID) {\r\n\tif (!set.evs) return null;\r\n\r\n\tconst dex = Dex.mod(formatid.slice(0, 4) as ID);\r\n\tconst ignoreEVLimits = (\r\n\t\tdex.gen < 3 ||\r\n\t\t((formatid.endsWith('hackmons') || formatid.endsWith('bh')) && dex.gen !== 6) ||\r\n\t\tformatid.includes('metronomebattle') || formatid.endsWith('norestrictions')\r\n\t);\r\n\tconst supportsEVs = !formatid.includes('letsgo');\r\n\tif (!supportsEVs || ignoreEVLimits) return null;\r\n\r\n\tconst species = dex.species.get(set.species);\r\n\tconst level = set.level || 100;\r\n\tconst getStat = (stat: Dex.StatNameExceptHP, ev: number, nature: Dex.Nature) => {\r\n\t\tconst baseStat = species.baseStats[stat];\r\n\t\tconst iv = set.ivs?.[stat] || 31;\r\n\t\tlet val = ~~(~~(2 * baseStat + iv + ~~(ev / 4)) * level / 100 + 5);\r\n\t\tif (nature.plus === stat) {\r\n\t\t\tval *= 1.1;\r\n\t\t} else if (nature.minus === stat) {\r\n\t\t\tval *= 0.9;\r\n\t\t}\r\n\t\treturn ~~(val);\r\n\t};\r\n\r\n\tconst origNature = BattleNatures[set.nature || 'Serious'];\r\n\tconst origStats = {\r\n\t\t// no need to calculate hp\r\n\t\tatk: getStat('atk', set.evs.atk || 0, origNature),\r\n\t\tdef: getStat('def', set.evs.def || 0, origNature),\r\n\t\tspa: getStat('spa', set.evs.spa || 0, origNature),\r\n\t\tspd: getStat('spd', set.evs.spd || 0, origNature),\r\n\t\tspe: getStat('spe', set.evs.spe || 0, origNature),\r\n\t};\r\n\tconst getMinEVs = (stat: Dex.StatNameExceptHP, nature: Dex.Nature) => {\r\n\t\tlet ev = 0;\r\n\t\twhile (getStat(stat, ev, nature) < origStats[stat]) {\r\n\t\t\tev += 4;\r\n\t\t}\r\n\t\treturn ev;\r\n\t};\r\n\r\n\tconst origSpread = { evs: set.evs, ...origNature };\r\n\tlet origLeftoverEVs = 508;\r\n\tfor (const stat of Dex.statNames) {\r\n\t\torigLeftoverEVs -= origSpread.evs?.[stat] || 0;\r\n\t}\r\n\t// Only check for optimizations if EVs are completed\r\n\tif (origLeftoverEVs > 4) return null;\r\n\r\n\t// Can't move the plus if it boosts its stat past normal EV limit\r\n\tconst plusTooHigh = origNature.plus && getStat(origNature.plus, 252, {}) < origStats[origNature.plus];\r\n\t// Can't move the minus if there's no investment in its stat to redistribute\r\n\tconst minusTooLow = origNature.minus && !origSpread.evs?.[origNature.minus];\r\n\t// If we can't move either of them, do nothing\r\n\tif (plusTooHigh && minusTooLow) return null;\r\n\r\n\tlet bestPlus = origNature.plus;\r\n\tlet bestPlusMinEVs = bestPlus && origSpread.evs[bestPlus];\r\n\tlet bestMinus = origNature.minus || 'atk';\r\n\tlet bestMinusMinEVs = origSpread.evs[bestMinus];\r\n\tlet savedEVs = 0;\r\n\r\n\t// Try and move the minus first, as figuring out where the plus should go is harder if the minus hasn't been placed\r\n\tif (!minusTooLow) {\r\n\t\tfor (const stat of Dex.statNamesExceptHP) {\r\n\t\t\tif (origStats[stat] < origStats[bestMinus]) {\r\n\t\t\t\tconst minEVs = getMinEVs(stat, { minus: stat });\r\n\t\t\t\tif (minEVs > 252) continue;\r\n\t\t\t\t// This number can go negative at this point, but we'll make up for it later (and check to make sure)\r\n\t\t\t\tsavedEVs = (origSpread.evs[stat] || 0) - minEVs;\r\n\t\t\t\tif (origNature.minus) {\r\n\t\t\t\t\tsavedEVs += (origSpread.evs[origNature.minus] || 0) - getMinEVs(origNature.minus, { minus: stat });\r\n\t\t\t\t}\r\n\t\t\t\tbestMinus = stat;\r\n\t\t\t\tbestMinusMinEVs = minEVs;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (!plusTooHigh) {\r\n\t\tfor (const stat of Dex.statNamesExceptHP) {\r\n\t\t\t// Don't move the plus to an uninvested stat\r\n\t\t\tif (stat !== origNature.plus && origSpread.evs[stat] && stat !== bestMinus) {\r\n\t\t\t\tconst minEVs = getMinEVs(stat, { plus: stat });\r\n\t\t\t\tlet plusEVsSaved = (origNature.minus === stat ? getMinEVs(stat, {}) : origSpread.evs[stat] || 0) - minEVs;\r\n\t\t\t\tif (bestPlus && bestPlus !== bestMinus) {\r\n\t\t\t\t\tplusEVsSaved += bestPlusMinEVs! - getMinEVs(bestPlus, { plus: stat, minus: bestMinus });\r\n\t\t\t\t}\r\n\t\t\t\tif (plusEVsSaved > 0 && savedEVs + plusEVsSaved > 0) {\r\n\t\t\t\t\tsavedEVs += plusEVsSaved;\r\n\t\t\t\t\tbestPlus = stat;\r\n\t\t\t\t\tbestPlusMinEVs = minEVs;\r\n\t\t\t\t} else if (plusEVsSaved === 0 && (bestPlus || savedEVs > 0) || plusEVsSaved > 0 && savedEVs + plusEVsSaved === 0) {\r\n\t\t\t\t\tif (!bestPlus || getStat(stat, getMinEVs(stat, { plus: stat }), { plus: stat }) > origStats[stat]) {\r\n\t\t\t\t\t\tsavedEVs += plusEVsSaved;\r\n\t\t\t\t\t\tbestPlus = stat;\r\n\t\t\t\t\t\tbestPlusMinEVs = minEVs;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (bestPlus && savedEVs >= 0) {\r\n\t\tconst newSpread: {\r\n\t\t\tevs: Partial<Dex.StatsTable>,\r\n\t\t\tplus?: Dex.StatNameExceptHP,\r\n\t\t\tminus?: Dex.StatNameExceptHP,\r\n\t\t} = { evs: { ...origSpread.evs }, plus: bestPlus, minus: bestMinus };\r\n\t\tif (bestPlus !== origNature.plus || bestMinus !== origNature.minus) {\r\n\t\t\tnewSpread.evs[bestPlus] = bestPlusMinEVs!;\r\n\t\t\tnewSpread.evs[bestMinus] = bestMinusMinEVs!;\r\n\t\t\tif (origNature.plus && origNature.plus !== bestPlus && origNature.plus !== bestMinus) {\r\n\t\t\t\tnewSpread.evs[origNature.plus] = getMinEVs(origNature.plus, newSpread);\r\n\t\t\t}\r\n\t\t\tif (origNature.minus && origNature.minus !== bestPlus && origNature.minus !== bestMinus) {\r\n\t\t\t\tnewSpread.evs[origNature.minus] = getMinEVs(origNature.minus, newSpread);\r\n\t\t\t}\r\n\t\t\tfor (const stat of Dex.statNames) {\r\n\t\t\t\tif (!newSpread.evs[stat]) delete newSpread.evs[stat];\r\n\t\t\t}\r\n\t\t\treturn { ...newSpread, savedEVs };\r\n\t\t} else if (!plusTooHigh && !minusTooLow) {\r\n\t\t\tif (Math.floor(getStat(bestPlus, bestMinusMinEVs!, newSpread) / 11) <= Math.ceil(origStats[bestMinus] / 9)) {\r\n\t\t\t\t// We're not gaining more points from our plus than we're losing to our minus\r\n\t\t\t\t// So a neutral nature would be better\r\n\t\t\t\tdelete newSpread.plus;\r\n\t\t\t\tdelete newSpread.minus;\r\n\t\t\t\tnewSpread.evs[origNature.plus] = getMinEVs(origNature.plus, newSpread);\r\n\t\t\t\tnewSpread.evs[origNature.minus] = getMinEVs(origNature.minus, newSpread);\r\n\t\t\t\tsavedEVs += (origSpread.evs[origNature.plus] || 0) - newSpread.evs[origNature.plus]!;\r\n\t\t\t\tsavedEVs += (origSpread.evs[origNature.minus] || 0) - newSpread.evs[origNature.minus]!;\r\n\t\t\t\tif (savedEVs < 0) return null;\r\n\t\t\t\tfor (const stat of Dex.statNames) {\r\n\t\t\t\t\tif (!newSpread.evs[stat]) delete newSpread.evs[stat];\r\n\t\t\t\t}\r\n\t\t\t\treturn { ...newSpread, savedEVs };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\ndeclare const require: any;\r\ndeclare const global: any;\r\nif (typeof require === 'function') {\r\n\t// in Node\r\n\tglobal.BattleStatGuesser = BattleStatGuesser;\r\n\tglobal.BattleStatOptimizer = BattleStatOptimizer;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
