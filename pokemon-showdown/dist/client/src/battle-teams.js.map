{
  "version": 3,
  "sources": ["../../../client/src/battle-teams.ts"],
  "sourcesContent": ["import { Dex, type ModdedDex } from \"./battle-dex\";\r\nimport { BattleNatures, BattleStatNames } from \"./battle-dex-data\";\r\n\r\nexport declare namespace Teams {\r\n\t/**\r\n\t * Teams.PokemonSet can be sparse, in which case that entry should be\r\n\t * inferred from the rest of the set, according to sensible\r\n\t * defaults.\r\n\t */\r\n\texport interface FullPokemonSet {\r\n\t\t/** Defaults to species name (not including forme), like in games */\r\n\t\tname: string;\r\n\t\tspecies: string;\r\n\t\t/** Defaults to no item */\r\n\t\titem?: string;\r\n\t\t/** Defaults to no ability (error in Gen 3+) */\r\n\t\tability?: string;\r\n\t\tmoves: string[];\r\n\t\t/** Defaults to no nature (error in Gen 3+) */\r\n\t\tnature?: Dex.NatureName;\r\n\t\t/** Defaults to random legal gender, NOT subject to gender ratios */\r\n\t\tgender?: string;\r\n\t\t/** Defaults to flat 252's (200's/0's in Let's Go) (error in gen 3+) */\r\n\t\tevs: Partial<Dex.StatsTable>;\r\n\t\t/** Defaults to whatever makes sense - flat 31's unless you have Gyro Ball etc */\r\n\t\tivs: Dex.StatsTable;\r\n\t\t/** Defaults as you'd expect (100 normally, 50 in VGC-likes, 5 in LC) */\r\n\t\tlevel: number;\r\n\t\t/** Defaults to no (error if shiny event) */\r\n\t\tshiny: boolean;\r\n\t\t/** Defaults to 255 unless you have Frustration, in which case 0 */\r\n\t\thappiness: number;\r\n\t\t/** Defaults to event required ball, otherwise Pok\u00E9 Ball */\r\n\t\tpokeball: string;\r\n\t\t/** Defaults to the type of your Hidden Power in Moves, otherwise Dark */\r\n\t\thpType?: string;\r\n\t\t/** Defaults to 10 */\r\n\t\tdynamaxLevel?: number;\r\n\t\t/** Defaults to no (can only be yes for certain Pokemon) */\r\n\t\tgigantamax?: boolean;\r\n\t\t/** Defaults to the primary type */\r\n\t\tteraType?: string;\r\n\t}\r\n\texport interface PokemonSet extends Partial<FullPokemonSet> {\r\n\t\t/** Defaults to species name (not including forme), like in games */\r\n\t\tspecies: string;\r\n\t\tmoves: string[];\r\n\t}\r\n}\r\n\r\nexport const Teams = new class {\r\n\tpack(team: Teams.PokemonSet[] | null): string {\r\n\t\tif (!team) return '';\r\n\r\n\t\tfunction getIv(ivs: Dex.StatsTable, s: keyof Dex.StatsTable): string {\r\n\t\t\treturn ivs[s] === 31 || ivs[s] === undefined ? '' : ivs[s].toString();\r\n\t\t}\r\n\r\n\t\tlet buf = '';\r\n\t\tfor (const set of team) {\r\n\t\t\tif (buf) buf += ']';\r\n\r\n\t\t\t// name\r\n\t\t\tbuf += (set.name || set.species);\r\n\r\n\t\t\t// species\r\n\t\t\tconst speciesid = this.packName(set.species || set.name);\r\n\t\t\tbuf += `|${this.packName(set.name || set.species) === speciesid ? '' : speciesid}`;\r\n\r\n\t\t\t// item\r\n\t\t\tbuf += `|${this.packName(set.item)}`;\r\n\r\n\t\t\t// ability\r\n\t\t\tbuf += `|${this.packName(set.ability)}`;\r\n\r\n\t\t\t// moves\r\n\t\t\tbuf += '|' + set.moves.map(this.packName).join(',');\r\n\r\n\t\t\t// nature\r\n\t\t\tbuf += `|${set.nature || ''}`;\r\n\r\n\t\t\t// evs\r\n\t\t\tlet evs = '|';\r\n\t\t\tif (set.evs) {\r\n\t\t\t\tevs = `|${set.evs['hp'] || ''},${set.evs['atk'] || ''},${set.evs['def'] || ''},` +\r\n\t\t\t\t\t`${set.evs['spa'] || ''},${set.evs['spd'] || ''},${set.evs['spe'] || ''}`;\r\n\t\t\t}\r\n\t\t\tif (evs === '|,,,,,') {\r\n\t\t\t\tbuf += '|';\r\n\t\t\t} else {\r\n\t\t\t\tbuf += evs;\r\n\t\t\t}\r\n\r\n\t\t\t// gender\r\n\t\t\tif (set.gender) {\r\n\t\t\t\tbuf += `|${set.gender}`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += '|';\r\n\t\t\t}\r\n\r\n\t\t\t// ivs\r\n\t\t\tlet ivs = '|';\r\n\t\t\tif (set.ivs) {\r\n\t\t\t\tivs = `|${getIv(set.ivs, 'hp')},${getIv(set.ivs, 'atk')},${getIv(set.ivs, 'def')},` +\r\n\t\t\t\t\t`${getIv(set.ivs, 'spa')},${getIv(set.ivs, 'spd')},${getIv(set.ivs, 'spe')}`;\r\n\t\t\t}\r\n\t\t\tif (ivs === '|,,,,,') {\r\n\t\t\t\tbuf += '|';\r\n\t\t\t} else {\r\n\t\t\t\tbuf += ivs;\r\n\t\t\t}\r\n\r\n\t\t\t// shiny\r\n\t\t\tif (set.shiny) {\r\n\t\t\t\tbuf += '|S';\r\n\t\t\t} else {\r\n\t\t\t\tbuf += '|';\r\n\t\t\t}\r\n\r\n\t\t\t// level\r\n\t\t\tif (set.level && set.level !== 100) {\r\n\t\t\t\tbuf += `|${set.level}`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += '|';\r\n\t\t\t}\r\n\r\n\t\t\t// happiness\r\n\t\t\tif (set.happiness !== undefined && set.happiness !== 255) {\r\n\t\t\t\tbuf += `|${set.happiness}`;\r\n\t\t\t} else {\r\n\t\t\t\tbuf += '|';\r\n\t\t\t}\r\n\r\n\t\t\tif (set.pokeball || set.hpType || set.gigantamax ||\r\n\t\t\t\t(set.dynamaxLevel !== undefined && set.dynamaxLevel !== 10) || set.teraType) {\r\n\t\t\t\tbuf += `,${set.hpType || ''}`;\r\n\t\t\t\tbuf += `,${this.packName(set.pokeball || '')}`;\r\n\t\t\t\tbuf += `,${set.gigantamax ? 'G' : ''}`;\r\n\t\t\t\tbuf += `,${set.dynamaxLevel !== undefined && set.dynamaxLevel !== 10 ? set.dynamaxLevel : ''}`;\r\n\t\t\t\tbuf += `,${set.teraType || ''}`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn buf;\r\n\t}\r\n\t/** Very similar to toID but without the lowercase conversion */\r\n\tpackName(this: void, name: string | undefined | null) {\r\n\t\tif (!name) return '';\r\n\t\treturn name.replace(/[^A-Za-z0-9]+/g, '');\r\n\t}\r\n\r\n\tunpack(buf: string): Teams.PokemonSet[] {\r\n\t\tif (!buf) return [];\r\n\r\n\t\tconst team = [];\r\n\t\tlet i = 0;\r\n\t\tlet j = 0;\r\n\r\n\t\twhile (true) {\r\n\t\t\tconst set: Teams.PokemonSet = {} as any;\r\n\t\t\tteam.push(set);\r\n\r\n\t\t\t// name\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tconst name = buf.substring(i, j);\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// species\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tconst species = Dex.species.get(buf.substring(i, j) || name);\r\n\t\t\tset.species = species.name;\r\n\t\t\tif (species.baseSpecies !== name) set.name = name;\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// item\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tset.item = Dex.items.get(buf.substring(i, j)).name;\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// ability\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tconst ability = Dex.abilities.get(buf.substring(i, j)).name;\r\n\t\t\tset.ability = (species.abilities &&\r\n\t\t\t\t['', '0', '1', 'H', 'S'].includes(ability) ? species.abilities[ability as '0' || '0'] : ability);\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// moves\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tset.moves = buf.substring(i, j).split(',').map(\r\n\t\t\t\tmoveid => Dex.moves.get(moveid).name\r\n\t\t\t);\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// nature\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tset.nature = buf.substring(i, j) as Dex.NatureName;\r\n\t\t\tif (set.nature as any === 'undefined') delete set.nature;\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// evs\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tif (j !== i) {\r\n\t\t\t\tconst evstring = buf.substring(i, j);\r\n\t\t\t\tif (evstring.length > 5) {\r\n\t\t\t\t\tconst evs = evstring.split(',');\r\n\t\t\t\t\tset.evs = {\r\n\t\t\t\t\t\thp: Number(evs[0]) || 0,\r\n\t\t\t\t\t\tatk: Number(evs[1]) || 0,\r\n\t\t\t\t\t\tdef: Number(evs[2]) || 0,\r\n\t\t\t\t\t\tspa: Number(evs[3]) || 0,\r\n\t\t\t\t\t\tspd: Number(evs[4]) || 0,\r\n\t\t\t\t\t\tspe: Number(evs[5]) || 0,\r\n\t\t\t\t\t};\r\n\t\t\t\t} else if (evstring === '0') {\r\n\t\t\t\t\tset.evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// gender\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tif (i !== j) set.gender = buf.substring(i, j);\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// ivs\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tif (j !== i) {\r\n\t\t\t\tconst ivs = buf.substring(i, j).split(',');\r\n\t\t\t\tset.ivs = {\r\n\t\t\t\t\thp: ivs[0] === '' ? 31 : Number(ivs[0]),\r\n\t\t\t\t\tatk: ivs[1] === '' ? 31 : Number(ivs[1]),\r\n\t\t\t\t\tdef: ivs[2] === '' ? 31 : Number(ivs[2]),\r\n\t\t\t\t\tspa: ivs[3] === '' ? 31 : Number(ivs[3]),\r\n\t\t\t\t\tspd: ivs[4] === '' ? 31 : Number(ivs[4]),\r\n\t\t\t\t\tspe: ivs[5] === '' ? 31 : Number(ivs[5]),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// shiny\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tif (i !== j) set.shiny = true;\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// level\r\n\t\t\tj = buf.indexOf('|', i);\r\n\t\t\tif (i !== j) set.level = parseInt(buf.substring(i, j), 10);\r\n\t\t\ti = j + 1;\r\n\r\n\t\t\t// happiness\r\n\t\t\tj = buf.indexOf(']', i);\r\n\t\t\tlet misc;\r\n\t\t\tif (j < 0) {\r\n\t\t\t\tif (i < buf.length) misc = buf.substring(i).split(',', 6);\r\n\t\t\t} else {\r\n\t\t\t\tif (i !== j) misc = buf.substring(i, j).split(',', 6);\r\n\t\t\t}\r\n\t\t\tif (misc) {\r\n\t\t\t\tset.happiness = (misc[0] ? Number(misc[0]) : undefined);\r\n\t\t\t\tset.hpType = misc[1] || undefined;\r\n\t\t\t\tset.pokeball = misc[2] || undefined;\r\n\t\t\t\tset.gigantamax = !!misc[3] || undefined;\r\n\t\t\t\tset.dynamaxLevel = (misc[4] ? Number(misc[4]) : undefined);\r\n\t\t\t\tset.teraType = misc[5] || undefined;\r\n\t\t\t}\r\n\t\t\tif (j < 0) break;\r\n\t\t\ti = j + 1;\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\tunpackSpeciesOnly(buf: string): string[] {\r\n\t\tif (!buf) return [];\r\n\r\n\t\tconst team = [];\r\n\t\tlet i = 0;\r\n\r\n\t\twhile (true) {\r\n\t\t\tconst name = buf.slice(i, buf.indexOf('|', i));\r\n\t\t\ti = buf.indexOf('|', i) + 1;\r\n\r\n\t\t\tteam.push(buf.slice(i, buf.indexOf('|', i)) || name);\r\n\r\n\t\t\tfor (let k = 0; k < 9; k++) {\r\n\t\t\t\ti = buf.indexOf('|', i) + 1;\r\n\t\t\t}\r\n\r\n\t\t\ti = buf.indexOf(']', i) + 1;\r\n\r\n\t\t\tif (i < 1) break;\r\n\t\t}\r\n\r\n\t\treturn team;\r\n\t}\r\n\t/**\r\n\t * (You may wish to manually add two spaces to the end of every line so\r\n\t * linebreaks are preserved in Markdown; I assume mostly for Reddit.)\r\n\t */\r\n\texportSet(set: Teams.PokemonSet, dex: ModdedDex = Dex, newFormat?: boolean) {\r\n\t\tlet text = '';\r\n\r\n\t\t// core\r\n\t\tif (set.name && set.name !== set.species) {\r\n\t\t\ttext += `${set.name} (${set.species})`;\r\n\t\t} else {\r\n\t\t\ttext += `${set.species}`;\r\n\t\t}\r\n\t\tif (set.gender === 'M') text += ` (M)`;\r\n\t\tif (set.gender === 'F') text += ` (F)`;\r\n\t\tif (!newFormat && set.item) {\r\n\t\t\ttext += ` @ ${set.item}`;\r\n\t\t}\r\n\t\ttext += `\\n`;\r\n\t\tif ((set.item || set.ability || dex.gen >= 2) && newFormat) {\r\n\t\t\tif (set.ability || dex.gen >= 3) text += `[${set.ability || '(select ability)'}]`;\r\n\t\t\tif (set.item || dex.gen >= 2) text += ` @ ${set.item || \"(no item)\"}`;\r\n\t\t\ttext += `\\n`;\r\n\t\t} else if (set.ability && set.ability !== 'No Ability') {\r\n\t\t\ttext += `Ability: ${set.ability}\\n`;\r\n\t\t}\r\n\r\n\t\tif (newFormat) {\r\n\t\t\tif (set.moves) {\r\n\t\t\t\tfor (let move of set.moves) {\r\n\t\t\t\t\tif (move.startsWith('Hidden Power ')) {\r\n\t\t\t\t\t\tconst hpType = move.slice(13);\r\n\t\t\t\t\t\tmove = move.slice(0, 13);\r\n\t\t\t\t\t\tmove = `${move}[${hpType}]`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttext += `- ${move || ''}\\n`;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (let i = set.moves?.length || 0; i < 4; i++) {\r\n\t\t\t\ttext += `- \\n`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// stats\r\n\t\tlet first = true;\r\n\t\tif (set.evs || set.nature) {\r\n\t\t\tconst nature = newFormat ? BattleNatures[set.nature as 'Serious'] : null;\r\n\t\t\tfor (const stat of Dex.statNames) {\r\n\t\t\t\tconst plusMinus = !newFormat ? '' : nature?.plus === stat ? '+' : nature?.minus === stat ? '-' : '';\r\n\t\t\t\tconst ev = set.evs?.[stat] || '';\r\n\t\t\t\tif (ev === '' && !plusMinus) continue;\r\n\t\t\t\ttext += first ? `EVs: ` : ` / `;\r\n\t\t\t\tfirst = false;\r\n\t\t\t\ttext += `${ev}${plusMinus} ${BattleStatNames[stat]}`;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!first) {\r\n\t\t\tif (set.nature && newFormat) text += ` (${set.nature})`;\r\n\t\t\ttext += `\\n`;\r\n\t\t}\r\n\t\tif (set.nature && !newFormat) {\r\n\t\t\ttext += `${set.nature} Nature\\n`;\r\n\t\t} else if (['Hardy', 'Docile', 'Serious', 'Bashful', 'Quirky'].includes(set.nature!)) {\r\n\t\t\ttext += `${set.nature!} Nature\\n`;\r\n\t\t}\r\n\t\tfirst = true;\r\n\t\tif (set.ivs) {\r\n\t\t\tfor (const stat of Dex.statNames) {\r\n\t\t\t\tif (set.ivs[stat] === undefined || isNaN(set.ivs[stat]) || set.ivs[stat] === 31) continue;\r\n\t\t\t\tif (first) {\r\n\t\t\t\t\ttext += `IVs: `;\r\n\t\t\t\t\tfirst = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttext += ` / `;\r\n\t\t\t\t}\r\n\t\t\t\ttext += `${set.ivs[stat]} ${BattleStatNames[stat]}`;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!first) {\r\n\t\t\ttext += `\\n`;\r\n\t\t}\r\n\r\n\t\t// details\r\n\t\tif (set.level && set.level !== 100) {\r\n\t\t\ttext += `Level: ${set.level}\\n`;\r\n\t\t}\r\n\t\tif (set.shiny) {\r\n\t\t\ttext += !newFormat ? `Shiny: Yes\\n` : `Shiny\\n`;\r\n\t\t}\r\n\t\tif (typeof set.happiness === 'number' && set.happiness !== 255 && !isNaN(set.happiness)) {\r\n\t\t\ttext += `Happiness: ${set.happiness}\\n`;\r\n\t\t}\r\n\t\tif (typeof set.dynamaxLevel === 'number' && set.dynamaxLevel !== 255 && !isNaN(set.dynamaxLevel)) {\r\n\t\t\ttext += `Dynamax Level: ${set.dynamaxLevel}\\n`;\r\n\t\t}\r\n\t\tif (set.gigantamax) {\r\n\t\t\ttext += !newFormat ? `Gigantamax: Yes\\n` : `Gigantamax\\n`;\r\n\t\t}\r\n\t\tif (set.teraType) {\r\n\t\t\ttext += `Tera Type: ${set.teraType}\\n`;\r\n\t\t}\r\n\r\n\t\tif (!newFormat) {\r\n\t\t\tfor (let move of set.moves || []) {\r\n\t\t\t\tif (move.startsWith('Hidden Power ')) {\r\n\t\t\t\t\tconst hpType = move.slice(13);\r\n\t\t\t\t\tmove = move.slice(0, 13);\r\n\t\t\t\t\tmove = !newFormat ? `${move}[${hpType}]` : `${move}${hpType}`;\r\n\t\t\t\t}\r\n\t\t\t\ttext += `- ${move}\\n`;\r\n\t\t\t}\r\n\t\t\tfor (let i = set.moves?.length || 0; i < 4; i++) {\r\n\t\t\t\ttext += `- \\n`;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttext += `\\n`;\r\n\t\treturn text;\r\n\t}\r\n\t// TODO: finish this impl\r\n\t// getFullSet(set: Teams.PokemonSet, dex: ModdedDex): Teams.FullPokemonSet {\r\n\t// \t//\r\n\t// }\r\n\texport(sets: Teams.PokemonSet[], dex?: ModdedDex, newFormat?: boolean) {\r\n\t\tlet text = '';\r\n\t\tfor (const set of sets) {\r\n\t\t\t// core\r\n\t\t\ttext += Teams.exportSet(set, dex, newFormat);\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
